
<style>
    .card {

border: none;
box-shadow: 5px 6px 6px 2px #e9ecef;
border-radius: 4px;
}

.modal-body {  
    overflow-y: auto; /* Allow scrolling if content overflows */  
    padding: 1rem;   /* Add padding for comfort */  
}  

@media (max-width: 1900px) {  
    .modal-lg {  
        max-width: 2500%; /* Full width on small screens */  
    }  
}
@keyframes pulse {  
    0% {  
        background-color: rgba(255, 0, 0, 0.1); /* Couleur de fond initiale */  
    }  
    50% {  
        background-color: rgba(255, 0, 0, 0.3); /* Couleur de fond intermédiaire */  
    }  
    100% {  
        background-color: rgba(255, 0, 0, 0.1); /* Retour à la couleur initiale */  
    }  
}  

.button-pulse {  
    animation: pulse 1s infinite; /* Applique l'animation en boucle infinie */  
}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.1.4/sweetalert2.min.css">  

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css"/>
<link href="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.css" rel="stylesheet">

{% extends './index.html'%}

{% load static %}
{% load humanize %}
{% block content %}
<div class="container">  
    <div class="row">  
        <div class="col-md-12">  
            <div class="card">  
                <div class="card-body">  
                    <h4 style="font-weight: bold; font-family: forte;">  
                        Formulaires Associés à l'opération <b class="text-primary">{{operation.nom}}  </b> 
                    </h4>  
                </div>  
            </div>  
        </div>  
    </div>  

    <div class="row mt-4"> <!-- Ajout d'une marge supérieure pour espacer les sections -->  
        {% for dataset_operations in dataset_operation %}
        <div class="col-md-4"> <!-- Each card will be in a column of 4/12 -->
            <div class="card bg-light my-2 mx-4" style="border-radius: 15px;">
                <div class="card-body">
                    <small style="color: orange; font-weight: bold;">
                        <span class="badge badge-success">Déjà Saisie</span>
                    </small>
                    <p class="small mb-0">
                        <img src="{{ actual_institution.img.url }}" class="rounded-circle img-responsive" style="width: 35px">
                        <span class="mx-2">{{ dataset_operations.m_name }}</span>
                    </p>
                    <div class="d-flex justify-content-start align-items-center mt-2">
                        <button class="btn btn-light mx-4 text-danger button-pulse border border-danger"
                                style="font-weight: bold; font-style: italic; transition: background-color 0.3s, transform 0.3s;"
                                data-toggle="modal"
                                data-target=".bd-example-modal-lg{{ dataset_operations.id }}"
                                id="loadDatasetButton"
                                data-id="{{ dataset_operations.id }}">
                            Renseigner Formulaire <i class="fa fa-thumbtack"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="modal fade bd-example-modal-lg{{ dataset_operations.id }}" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" style="max-width: 1200px;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLongTitle">Formulaire <b class="text-danger">{{ dataset_operations.m_name }}</b></h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <p style="font-weight:bold;">... {{ dataset_operations.nom }}</p>
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-12"></div>
                            </div>
                            <hr class="p-2 bg-dark"/>
                            <button class="btn btn-success my-2 text-light" id="loadDataButton" data-id="{{ dataset_operations.id }}" onclick="loadDataset(this)">Rappel Donnee</button>

                            <!-- <button class="btn btn-success my-2 text-light" id="loadDataButton"><i class="fa fa-eye"></i>&nbsp;Afficher</button> -->
                            <form method="POST" action="/save_value/" class="card" onsubmit="return submitForm('{{ dataset_operations.id }}')" id="myForm{{ dataset_operations.id }}">
                                {% csrf_token %}
                                <input type="hidden" name="generator" value="dSv">
                                <input type="hidden" name="dSv_id" value="{{ dataset_operations.id }}">
                                <input type="hidden" name="edit_or_create" value="c">
                                <input type="hidden" name="variables_value" id="variables_value">
                                <input type="hidden" name="variables_names" id="variables_names">
        
                                <div class="row">
                                    <div class="col-md-4 text-dark" style="font-weight:bold;font-style:italic">
                                        <label>Année</label>
                                        <select class="form-control" name="period1_saisie" id="annee" style="height:50px">
                                            {% for period_oks in periode_ok %}
                                                {% if operation.periode_ok_id == period_oks.id %}
                                                    <option value="{{ period_oks.annee }}" selected>{{ period_oks.annee }}</option>
                                                {% endif %}
                                            {% endfor %}
                                        </select>
                                    </div>
        
                                    <div class="col-md-4" style="font-weight:bold;font-style:italic">
                                        <label>Periode</label>
                                        <select class="form-control" name="period2_saisie" id="period" style="height:50px" readonly>
                                            {% for period_oks in periode_ok %}
                                                {% if operation.periode_ok_id == period_oks.id %}
                                                    <option value="{{ period_oks.id }}" selected>{{ period_oks.nom }}</option>
                                                {% endif %}
                                            {% endfor %}
                                        </select>
                                    </div>
        
                                    <div class="col-md-4" style="font-weight:bold;font-style:italic">
                                        <label>Structure</label>
                                        <select class="form-control js-example-matcher-start" name='struc_selec' id="structure" readonly>
                                            <option></option>
                                            {% for structures in structure_s %}
                                                {% if operation.structure_id == structures.id %}
                                                    <option value="{{ structures.id }}" selected>{{ structures.nom }}</option>
                                                {% endif %}
                                            {% endfor %}
                                        </select>
                                    </div>
        
                                    <div class="col-md-6">
                                        <label for="" class="text-danger" style="font-weight:bold;display:none">Resultat CalCul *</label>
                                        <input type="text" id="indicator-values" name="indicator-values" class="form-control" readonly style="display:none">
                                        <input type="text" name="elementsArea" id="elementsArea" class="form-control" style="display:none">
                                        <input type="text" name="elements" id="displayArea" class="form-control" style="display:none">
                                    </div>
        
                                    <div class="col-md-6">
                                        <label for="" class="text-danger" style="font-weight:bold;display:none">Code Indicateur *</label>
                                        <input type="text" id="indicator-ids" name="indicator-ids" class="form-control" readonly style="display:none">
                                    </div>
                                </div>
        
                                <div id="loadingIndicator" role="alert" aria-live="assertive" aria-hidden="true" style="display: none;">
                                    <span>Chargement en cours, veuillez patienter...</span>
                                </div>
        
                                <hr class="p-2 bg-dark"/>
                                <div id="dF_Div_mob" class="modal-body"></div>
                            </form>
        
                            <div class="col-md-12">
                                <button class="btn btn text-light" id="myButton{{ dataset_operations.id }}" style="background: #232526;" data-form-id="{{ dataset_operations.id }}">
                                    <i class="fa fa-check"></i>&nbsp;Enregistrer
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <script>

function submitForm(formId) {
    const myForm = document.getElementById(`myForm${formId}`);
    if (myForm.checkValidity()) {
        myForm.submit();
        return true;
    }
    return false;
}

document.querySelectorAll('button[id^="myButton"]').forEach(button => {
    button.addEventListener('click', function() {
        const formId = this.dataset.formId;

        Swal.fire({
            title: "<strong>Information</strong>",
            icon: "info",
            html: `
                Les données saisies seront remplacées dans la base de données en cas de doublon. <b>Souhaitez-vous tout de même les enregistrer ?</b>
            `,
            showCloseButton: true,
            showCancelButton: true,
            focusConfirm: false,
            confirmButtonText: `<i class="fa fa-thumbs-up"></i> Oui / Yes!`,
            confirmButtonAriaLabel: "Thumbs up, great!",
            cancelButtonText: `<i class="fa fa-thumbs-down"></i> Non / No`,
            cancelButtonAriaLabel: "Thumbs down"
        }).then((result) => {
            if (result.isConfirmed) {
                const formSubmitted = submitForm(formId);
                if (!formSubmitted) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Erreur',
                        text: 'Le formulaire n\'est pas valide. Veuillez vérifier les champs.',
                    });
                }
            }
        });
    });
});
</script>










<script>  
    function handleData(data) {  
      if (data.error) {  
          console.error('Erreur:', data.error);  
        //   alert("Erreur lors du chargement des données: " + data.error);  
          return [];  
      }  
  
      const dataArray = data.data || [];   
      const inputData = dataArray.map(item => ({  
          name: `D0elt${item.id}`,  // Ajouter 'D0elt' devant 'item.id'  
          value: item.content        // Supposant que 'item' a une propriété 'value'  
      }));  
     
  
      // Vérifier s'il n'y a pas de valeurs
      if (inputData.length === 0) {
          toastr.warning('Il n\'y a aucune valeur à traiter.', 'Aucune valeur trouvée');
  
          // Vider tous les champs d'entrée
          const allInputs = document.querySelectorAll('input[name^="D0elt"]');
          allInputs.forEach(input => {
              input.value = '';  // Vider le champ
          });
  
          return [];
      }
  
      // Mettre à jour les champs d'entrée  
      inputData.forEach(input => {  
          console.log(`Recherche du champ: ${input.name}`); // Ajoutez ceci pour déboguer 
  
          const inputElement = document.querySelector(`input[name="${input.name}"]`);  
          if (inputElement) {  
              inputElement.value = input.value;  
          } else {  
              console.warn(`Champ d'entrée "${input.name}" introuvable.`);  
          }  
      });  
  
      console.log('Données traitées:', dataArray);  
      return dataArray;   
  }
  
  
   



  function loadDataset(button) {  
    const datasetId = button.getAttribute('data-id');  
    // alert(datasetId); // Use alert to check if datasetId is retrieved correctly
    const url = `/get_dataset/${datasetId}/`;  

    Swal.fire({  
        title: 'Chargement...',  
        text: 'Veuillez patienter pendant le chargement des données.',  
        allowOutsideClick: false,  
        showConfirmButton: false,  
        onBeforeOpen: () => {  
            Swal.showLoading();  
        }  
    });  

    fetch(url)  
        .then(response => {  
            if (!response.ok) {  
                throw new Error('Erreur lors de la récupération du dataset');  
            }  
            return response.json();  
        })  
        .then(data => {  
            const modalBody = document.querySelector(`.bd-example-modal-lg${datasetId} .modal-body`);  
            if (modalBody) {  
                if (data.content) { 
                    modalBody.innerHTML = `<p>${data.content}</p>`; // Display content
                } else {  
                    modalBody.innerHTML = "<p>Aucun contenu disponible.</p>";  
                }  
                initIndic(datasetId);  
                Swal.close();  
            } else {  
                console.error('modalBody est null');  
                Swal.close();  
            }  
        })  
        .catch(error => {  
            const modalBody = document.querySelector(`.bd-example-modal-lg${datasetId} .modal-body`);  
            if (modalBody) {  
                modalBody.innerHTML = "<p>Erreur lors du chargement des données. Veuillez réessayer.</p>";  
            }  
            console.error('Erreur:', error);  
            Swal.fire({  
                icon: 'error',  
                title: 'Une erreur est survenue',  
                text: 'Veuillez réessayer.',  
            });  
        });  
}

    
    // Fonction pour échapper les caractères HTML (protection XSS)
function escapeHtml(unsafe) {
return unsafe
       .replace(/&/g, "&amp;")
       .replace(/</g, "&lt;")
       .replace(/>/g, "&gt;")
       .replace(/"/g, "&quot;")
       .replace(/'/g, "&#039;");
}


function showLoading() {  
Swal.fire({  
    title: 'Chargement...',  
    text: 'Veuillez patienter pendant le chargement des données.',  
    allowOutsideClick: false,  
    showConfirmButton: false,  
    didOpen: () => {  
        Swal.showLoading(); // Afficher l'indicateur de chargement  
    }  
});  
}  

function hideLoading() {  
Swal.close(); // Fermer l'alerte de chargement  
}  





// Use event delegation to handle clicks on dynamically created buttons
document.addEventListener('click', function(event) {
  if (event.target && event.target.id === 'loadDataButton') {
      const selectedYear = document.getElementById('annee').value;
      const selectedPeriod = document.getElementById('period').value;
      const selectedStructure = document.getElementById('structure').value;

      // Check if all selections are made
      if (!selectedYear || !selectedPeriod || !selectedStructure) {
          Swal.fire({
              icon: 'warning',
              title: 'Attention!',
              text: "Veuillez sélectionner l'année, la période et la structure.",
              confirmButtonText: 'OK'
          });
          return;
      }

      const url = `/load_data/${selectedStructure}/${selectedPeriod}/`; // URL to fetch data
      showLoading(); // Show loading indicator

      // Show the div with animation
      const div = document.getElementById('dF_Div_mob');
      div.classList.add('show'); // Add 'show' class to display the div

      fetch(url)
          .then(response => {
              if (!response.ok) {
                  throw new Error('Erreur lors de la récupération des données');
              }
              return response.json();
          })
          .then(data => handleData(data))
          .catch(error => {
              console.error('Erreur lors du chargement des données:', error);
              Swal.fire({
                  icon: 'error',
                  title: 'Erreur',
                  text: "Une erreur est survenue. Veuillez réessayer.",
              });
          })
          .finally(() => {
              hideLoading(); // Hide loading indicator
          });
  }
});




// Fonction pour initialiser les indicateurs  
function initIndic(datasetId) {  
// alert("Fonction initIndic() appelée avec datasetId:", datasetId);  

const indicSelector = document.getElementsByClassName("indicSelector");  
let indic_value = "";  
for (let i = 0; i < indicSelector.length; i++) {  
    indic_value += indicSelector[i].getAttribute("data-id") + "#";  
}  

const institutionId = {{ actual_institution.id }}; // Assurez-vous que `actual_institution` est défini  

$.ajax({  
    url: '/get_elements/',  
    data: {  
        'dataset': datasetId,  
        'type_dataset': '0',  
        'other': 'dI_formula',  
        'institution': institutionId,  
        'value': indic_value  
    },  
    success: function(data) {  
        
function check_selector(evalu = false) {  
  const indicatorValues = {};  

  for (let i = 0; i < indicSelector.length; i++) {  
      indicSelector[i].textContent = data.formulas[i];  
      const indicatorId = indicSelector[i].getAttribute("data-id");  
     
      const tmp_elts = data.data_elts.split("#");  
      console.log('Les IDs sont :', tmp_elts);
      let elts = [];  

      for (let j = 0; j < tmp_elts.length; j++) {  
          const tp = document.getElementsByName("D0elt" + tmp_elts[j]);  
          if (tp.length > 0) {  
              elts.push({ id: tmp_elts[j], value: tp[0].value }); // Récupération des valeurs avec l'ID  
              console.log("Valeur de D0elt" + tmp_elts[j] + " :", tp[0].value); // Affichage de la valeur récupérée  
          } else {  
              console.warn("Élément manquant pour D0elt" + tmp_elts[j]);  
          }  
      }  

      console.log("Éléments récupérés :", elts);   

      // Mettre à jour le displayArea  
      const displayArea = document.getElementById("displayArea");  
      const valuesString = elts.map(item => `"D0elt${item.id}": ${item.value}`).join(', '); // Formater les valeurs  
      displayArea.value = valuesString; // Mettre à jour l'input avec les valeurs formatées  
      
      // Définir la valeur à soumettre dans un champ caché  
      document.getElementById("elementsArea").value = JSON.stringify(elts); // Soumission en format JSON  

      // Remplacer les placeholders dans indicSelector avec les valeurs récupérées  
      for (let j = 0; j < elts.length; j++) {  
          indicSelector[i].textContent = indicSelector[i].textContent.replace("$" + elts[j].id + "$", elts[j].value);  
      }  

      if (evalu) {  
          try {  
              indicSelector[i].textContent = eval(indicSelector[i].textContent); // Évaluation des calculs  
              const indicatorValue = indicSelector[i].textContent;  
              indicatorValues[indicatorId] = indicatorValue;  
          } catch (error) {  
              console.error("Erreur lors du calcul de l'indicateur :", error);  
          }  
      }  
  }  

  // Stocker les valeurs et les identifiants dans les champs cachés du formulaire  
  document.getElementById("indicator-values").value = JSON.stringify(indicatorValues);  
  const indicatorIds = Object.keys(indicatorValues);  
  document.getElementById("indicator-ids").value = JSON.stringify(indicatorIds);  

  return indicatorValues;  
}


        // Évaluer les sélecteurs d'indicateurs  
        check_selector(true);  

        const variables_selector = document.getElementsByClassName("variableSelector");  
        for (let i = 0; i < variables_selector.length; i++) {  
            const inputs = variables_selector[i].getElementsByTagName("input")[0];  
            if (inputs) {  
                inputs.onchange = function() {  
                    try {  
                        check_selector(true);  
                    } catch (error) {  
                        console.error("Erreur lors de l'évaluation des sélecteurs :", error);  
                        check_selector(); // Évaluer sans option  
                    }  
                };  
            }  
        }  
    },  
    error: function(xhr, status, error) {  
        console.error("Erreur AJAX:", status, error);  
        alert("Une erreur est survenue lors de la récupération des éléments. Veuillez réessayer.");  
    }  
});  
}  

// Ajout d'un gestionnaire d'événements pour chaque bouton ayant 'loadDatasetButton' comme ID  
document.querySelectorAll('.btn.button-pulse').forEach(button => {  
button.addEventListener('click', function() {  
    loadDataset(this);  
});  
});




</script>

        {%endfor%}
       
    </div>  
</div>
{%endblock%}
{%block script%}



      
{% for message in messages %}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
 {% if message.tags == 'success' %}

<script type="text/javascript">
 Swal.fire({
 position: "top-end",
 icon: "success",
 title: "{{message}}",
 showConfirmButton: false,
 timer: 2000
});
</script>
{%endif%}
{%endfor%}
</script>
{% for message in messages %}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
 {% if message.tags == 'error' %}

<script type="text/javascript">
 Swal.fire({
 position: "top-end",
 icon: "error",
 title: "{{message}}",
 showConfirmButton: false,
 timer: 5000
});
</script>
{%endif%}
{%endfor%}

{% for message in messages %}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
 {% if message.tags == 'info' %}

<script type="text/javascript">
 Swal.fire({
 position: "top-end",
 icon: "info",
 title: "{{message}}",
 showConfirmButton: false,
 timer: 5000
});
</script>
{%endif%}
{%endfor%}
<script>
						
  $(document).ready(function() {
    $('#annee').on('change', function() {
      var selectedId = $(this).val();
    
      // Effectuer une requête AJAX pour récupérer les informations de la table periodeok en fonction de l'ID de la période sélectionnée
      $.ajax({
      url: '/search_period/',  // L'URL correspondant à la vue Django
      method: 'GET',
      data: { annee: selectedId },
      success: function(data) {
        var selectInformations = $('#period');
        selectInformations.empty(); // Effacer les anciennes options
    
        // Ajouter les nouvelles options basées sur les données récupérées via AJAX
        data.forEach(function(periode_ok_id) {
        selectInformations.append($('<option>', {
          value: periode_ok_id.id,
          text: periode_ok_id.nom  // Remplacez 'champ1' par le nom du champ que vous souhaitez afficher
        }));
        });
      },
      error: function(xhr, status, error) {
        console.error('Une erreur s\'est produite lors de la requête AJAX :', status, error);
      }
      });
    });
    });
    
    </script>

   <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    



  <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>  


  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  

  

<script src="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js"></script>
<script>  
  new TomSelect("#structure",{
    create: true,
    sortField: {
      field: "text",
      direction: "asc"
    }
  });
</script> 
{%endblock%}