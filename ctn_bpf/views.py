# -*- coding: utf-8 -*-
from asgiref.sync import sync_to_async
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.http import FileResponse, HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import render, redirect, get_object_or_404
from django.core.paginator import Paginator
from django.contrib.auth import authenticate, login, logout
from openpyxl import load_workbook
from django.core.mail import send_mail, send_mass_mail

from django.core.mail import EmailMessage, EmailMultiAlternatives
from django.core.cache import cache
from django.views.decorators.cache import cache_page

from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.db.models import ProtectedError
from django.contrib.auth.decorators import login_required

from .models import *
from .utilities import get_period_values, set_pv_tp, subperiods_value, transform_to_plannify
from .utilities2 import split_extras1
import os
import datetime

import random
from .serializers import ActualiteSerializer,InstitutionSerializer

from rest_framework.viewsets import ModelViewSet

class InstitutionViewSet(ModelViewSet):
    serializer_class = InstitutionSerializer

    def get_queryset(query):
        return Institution.objects.all()

class ArticleViewSet(ModelViewSet):
    serializer_class = ActualiteSerializer

    def get_queryset(ModelViewSet):
        return Actualite.objects.all()


@login_required(login_url='/log_account')
def admin_institution(request):
    template = "webpages/ctn_bpf/institution_admin.html"
    context = {
        'edit': 0
    }
    return render(request, template, context)


@login_required(login_url='/log_account')
def contact(request):
    template = "webpages/ctn_bpf/contact.html"
    context = {
        'edit': 0
    }
    return render(request, template, context)


def edit_institution(request, institution_id):
    template = "webpages/ctn_bpf/institution_admin.html"
    context = {
        'edit': 1,
        'institution': Institution.objects.get(id=int(institution_id))
    }
    return render(request, template, context)


def save_edit_institution(request):
    nom = request.POST["nom"]
    code = request.POST["code"]
    try:
        file = request.FILES["file"]
    except:
        file = None

    insti_id = int(request.POST['insti_id'])
    institution = Institution.objects.get(id=insti_id)
    institution.sigle = code
    institution.nom = nom
    if file != None:
        institution.img = file
    institution.save()
    return redirect('/')


def save_institution(request):
    lien = request.POST.get('lien',None)
    groupe=request.POST.get('groupe','')
    nom = request.POST["nom"]
    numro_telephone = request.POST.get('numro_telephone',None)
   # lien_facebook = request.POST.get('lien_facebook',None)
  #  lien_instagram = request.POST.get('lien_instagram',None)
    description = request.POST.get('description',None)
    #user = request.POST['user']

   # print(user)
    
    baniere = request.POST['baniere']
    response = redirect("/")
   # personnel = Personnel.objects.get(id=int(user))

    try:
        code = request.POST["code"]
    except:
        code = nom
    try:
        image = request.FILES["file"]
    except:
        image = OperaFile.objects.filter(m_name="IDF").first().m_file  # Instituti Defaut FIle
    try:
        desc = request.POST['desc']
    except:
        desc = " "
    try:
        app_code = request.POST['app_code']
    except:
        app_code = "#"
    # Informations Savers

    owner = Owner.objects.filter(m_code=app_code).first()
    if owner == None:
        response = specific_log(request, 2)
    else:
        nb_institutions = owner.nb_institutions()
        if (owner.m_bought == False and nb_institutions == 0) or (
                owner.m_bought == True and nb_institutions <= owner.m_type):
            institution = Institution(sigle=code, nom=nom, img=image,link=lien,groupe_id=groupe,baniere_id=baniere,numero_whatsapp=numro_telephone,description=description)
            institution.owner = owner
            institution.save()
            # personnel.actual_institution = institution
            # personnel.save
   
            owner.m_user.personnel.actual_institution = institution
            owner.m_user.personnel.save()
            try:
                check_mail = request.POST['check_mail']
            except:
                check_mail = False
            if check_mail == True:
                owner.m_mail_notified = True
                owner.save()
            # owner.save()
            if request.user.is_authenticated == False:
                user = owner.m_user
                login(request, user)

            # tache hierachy modifier
            entity = EntityType(m_nom="Projet")
            entity.m_fields = "Nom du Projet|Objectif du Projet|"
            entity.m_type_fields = "text|text|"
            entity.m_fields_rapported = "Commentaires|"
            entity.m_type_fields_rapp = "text|"
            entity.save()
            type_entity = InsitutionEntities(m_hierachie=0)
            type_entity.m_entity_type = entity
            type_entity.m_institution = institution
            type_entity.save()

            # Tache Launcher
            entity = EntityType(m_nom="Tache")
            entity.is_tache = True
            entity.m_fields = "Nom de la Tache|Objectif de la Tache|"
            entity.m_type_fields = "text|text|"
            entity.m_fields_rapported = "Commentaires|"
            entity.m_type_fields_rapp = "text|"
            entity.save()
            type_entity = InsitutionEntities(m_hierachie=1)
            type_entity.m_entity_type = entity
            type_entity.m_institution = institution
            type_entity.save()

            personnel = Personnel.objects.get(bd_user__id=request.user.id)
            role = Role(nom="Administrateur " + str(institution), description="Supervise la Plateforme",
                        actual_institution=institution, permissions=100)
            role.save()
            function = Personnel_Function(m_institution=institution, m_personnel=personnel, m_role=role)
            function.save()
            role = Role(
                nom=" " + str(
                    institution),
                description="",
                actual_institution=institution, permissions=0)
            role.save()

            # Initialisation des Structures
            structure = Structure(nom=institution.sigle, designation=institution.nom)
            structure.institution = institution
            structure.save()
            pers_struc = Personnel_Structure(m_personnel=personnel, m_structure=structure)
            pers_struc.save()

            # Initialisation des Periodes
            configurations_periodes = Periode.objects.filter(m_initial=True)
            for p in configurations_periodes:
                per = Institution_Periodes(m_periode=p, m_institution=institution, m_default=True)
                per.save()
            institution.default_period = configurations_periodes.last()
            institution.default_subperiod = institution.default_period.sub_periods().first()
            institution.save()
        else:
            request.session['too_much_ins'] = 1
            response = redirect('/register/')
    return response


def set_default_period(request, period=0, sub_period="#"):
    # r_institution = request.COOKIES['institution']
    r_institution = request.user.personnel.actual_institution
    if int(period) != 0:
        r_periode = Periode.objects.get(id=int(period))
        r_institution.default_period = r_periode
        r_institution.default_subperiod = r_periode.sub_periods().last()
    if sub_period != "#":
        r_sub_period = SubPeriode.objects.get(id=int(sub_period))
        r_institution.default_subperiod = r_sub_period
    r_institution.save()
    return redirect('/configurations/')


def authorized_institutions(request):
    if request.user.is_staff:
        institutions = Institution.objects.filter()
    else:
        institutions = [request.user.personnel.get_institution]
    return institutions


def basis(request):
    permissions = list()
    actual_institution = None
    animate = None
    animate2 = None
    context = dict()
    user = request.user
    try:
        if request.session['logged'] == 1:
            request.session['logged'] = 0
            animate = 0
    except:
        pass
    try:
        if request.session['new_rapport'] == 1:
            request.session['new_rapport'] = 0
            animate2 = 0
        elif request.session['new_rapport'] == 2:
            request.session['new_rapport'] = 0
            animate2 = 1
    except:
        pass

    if request != None and user.is_authenticated:
        actual_institution = user.personnel.actual_institution
        bool(actual_institution)

        programmes = list()  # request.user.personnel.get_programmes()
        nb_programmes = 0

        personnel = request.user.personnel
        bool(personnel)

        prenom = personnel.prenom
        nom = personnel.nom
        role = personnel.get_function(actual_institution.id)
        picture = personnel.photo
        functi = role
        entity_manage = None
        if actual_institution.owner != None and actual_institution.owner.m_user == request.user:
            permissions = 100
        elif functi == None:
            permissions = 10
        else:
            permissions = functi.m_role.permissions
            if functi.m_role.m_nature == "1":
                # enti = funxti
                eRACI = personnel.RACI_manage()
                if eRACI != None:
                    if eRACI[0] != None:
                        entity_manage = eRACI[0]
            elif permissions < 0:
                entity_manage = functi.m_entity
        context = {
            'actual_institution': actual_institution,
            'animate': animate,
            'animate2': animate2,
            'prenom': prenom,
            'role': role,
            'nom': nom,
            'picture': picture,
            'permissions': permissions,
            'programmes': programmes,
            'nb_programmes': nb_programmes,
            'entity_manage': entity_manage
        }
        if entity_manage != None:
            context["my_entities"] = personnel.RACI_list()
            context["no_simple_user"] = context["my_entities"] != []
            context["type_ents"] = entity_manage.m_type_entity
            context["hierachie_ent"] = entity_manage.m_type_entity.hierachie()

        context['default_struc_name'] = actual_institution.default_struc_name
        context['this_period'] = datetime.datetime.now()
        context['operations_name'] = actual_institution.operations_name
        context['insti_structures'] = actual_institution.structures()
        context['default_period'] = context['actual_institution'].default_period

        get_entities = actual_institution.get_entities()

        context['get_entities'] = get_entities
        context['get_entities2'] = list(get_entities)[:-1]

        top_entity = context['actual_institution'].top_entity()
        bool(top_entity)
        context['top_entity'] = top_entity

        last_entity = context['actual_institution'].last_entity()
        bool(last_entity)
        context['last_entity'] = last_entity

        if actual_institution.finan_options != None:
            context["finances"] = actual_institution.finances()
            context["real_finances"] = 0
            context["finan_options"] = actual_institution.finan_options
            context["depenses_eff"] = actual_institution.depenses_eff

        tmp_week = int(max(1, context['this_period'].day / 7))
        if context['this_period'].day > context['this_period'].isoweekday() * tmp_week:
            tmp_week += 1
        context['this_week'] = tmp_week
        context['operations_modules'] = Aggregate.objects.filter(
            m_institution__id=context['actual_institution'].id).select_related('m_institution').first()


    else:
        actual_institution = None
        context["institution"] = None
    return context


def agenda(request):
    template = "webpages/ctn_bpf/agenda_week.html"
    context = basis(request)
    return render(request, template, context)


def log_account(request):
    template = "webpages/ctn_bpf/login.html"
    context = dict()
    try:
        if request.session['too_much_ins'] == 1:
            context['too_much_ins'] = True
            request.session['too_much_ins'] = None
    except:
        pass
    try:
        if request.session['new_user'] == 1:
            # request.session['new_user'] = 0
            animate = 1
            context['new_user'] = animate
            request.session['new_user'] = 0
    except:
        pass
    try:
        context['bad_log'] = (request.session['bad_log'] != None and request.session['try_log'] != None)
        request.session['try_log'] = None
    except:
        pass
    return render(request, template, context)


# @cache_page(60 * 15)
def index_log(request, nature):
    if True:
        context = basis(request)
        operation_m = Operation.objects.all()
        context['operation_m'] = operation_m
        operation_details = OperationDetails.objects.all()
        context['operation_details'] = operation_details
        operation_consult=Operation.objects.all()
        context['operation_consult']=operation_consult
        context['menu'] = 'i'
        elements = list()
        top_entity = context['top_entity']

        tops = top_entity.lines()
        bool(tops)

        context['lvl'] = nature

        if nature == -1 and context['permissions'] >= 0:
            nature = 0

        if context['permissions'] == 0:
            nature = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
                'm_institution').last().m_hierachie
            bool(nature)

        context['nature'] = nature
        context['next_nature'] = nature + 1
        # If any Tops have been created, redirection

        if tops.first() == None:
            template = "webpages/ctn_bpf/index_empty.html"
            context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                'actual_institution']).select_related('m_institution').first().m_entity_type
            tmp_lines = list()
        else:
            if context["entity_manage"] != None:
                hierachy = context["entity_manage"].m_type_entity.hierachie()
                hierachi_id = context["entity_manage"].id
                return redirect("gestionnaire/" + str(hierachy) + "/" + str(hierachi_id) + "/")
            else:
                template = "webpages/ctn_bpf/operations_home.html"
            nb_elements = 0
            for t in tops:
                elements.append({'entity': t, 'values': t.levels(nature, context['actual_institution'])})

            context['elements'] = elements
            context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                'actual_institution']).select_related('m_institution').first()
            if context['type_entity'] != None:
                context["type_entity"] = context["type_entity"].m_entity_type
                tmp_lines = context['type_entity'].lines()
            else:
                tmp_lines = list()
        # Moyenne de Progression
        nb_elt = 0
        progress = 0
        """
		for elt in tmp_lines:
			progress += elt.progression()
			nb_elt += 1
		if nb_elt > 0:
			progress /= nb_elt
		"""

        progress = context['actual_institution'].progression()
        context['actual_progression'] = round(progress, 2)
        paginator_o = Paginator(elements, 6)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range

    return render(request, template, context)


def index(request, nature=-1):
    if request.user.is_authenticated:

        return index_log(request, nature)
    else:
        context = dict()
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None

        template = "webpages/ctn_bpf/presentation.html"
        
        # context['temoignages'] = Temoignage.objects.filter()[:3]
        context['institution_count'] = Institution.objects.count()
        context['projet_count'] = 0
        tmp1 = InsitutionEntities.objects.filter(m_hierachie=1)
        for t in tmp1:
            context['projet_count'] += t.m_entity_type.lines().count()
        context['operations_count'] = Operation.objects.count()
        context['personnel_count'] = Personnel.objects.count()
    try:
        if request.session['too_much_ins'] == 1:
            context['too_much_ins'] = True
        # request.session['too_much_ins'] = None
    except:
        pass
    try:
        if request.session['assistance'] == 1:
            context['assist_send'] = True
            request.session['assistance'] = None
    except:
        pass
    return render(request, template, context)


def bad_auth(request):
    template = "webpages/ctn_bpf/bad_auth.html"
    context = {
        'error': "Erreur au niveau de l'Adresse/Mot de Passe"
    }
    return render(request, template, context)


def main(request, menu_main=0):
    template = "webpages/ctn_bpf/main.html"
    if menu_main == 1:
        template = "webpages/ctn_bpf/presentation_framework.html"
    elif menu_main == 2:
        template = "webpages/ctn_bpf/presentation_documentation.html"
    docus = OperaFile.objects.filter(m_category="DOC")
    apps = OperaApp.objects.filter()
    context = {
        "docus": docus,
        "apps": apps
    }
    return render(request, template, context)


def gestionnaire_search(request):
    generator = request.POST['generator']
    name = request.POST['search']
    if generator == '0':
        hierachy = int(request.POST['hierachy'])
        gest = int(request.POST['gest'])
        response = gestionnaire(request, hierachy, gest, name)
    elif generator == 'o':
        gest = int(request.POST['gest'])
        response = ges_taches(request, gest, None, name)
    elif generator == 's':
        response = structures(request, name)
    elif generator == 'r':
        response = roles(request)
    elif generator == 'p':
        response = personnels(request, name)
    elif generator == 'i2':
        hierachy = int(request.POST['hierachy'])
        gest = int(request.POST['gest'])
        response = evaluer(request, hierachy, gest, name)
    elif generator == "ex":
        response = extra(request, name)
    elif generator == "dSV":
        pass
    return response


# @cache_page(60 * 15)
# @login_required(login_url='/log_account')
# def gestionnaire(request, gest_val, gest_id=0, name=None, structure=None, periode=None, enums="#"):
#     tmp_gest_val = gest_val
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     bool(actual_institution)

#     context['base_img_val'] = context['actual_institution'].img.url

#     if int(gest_val) == -1:
#         gest_val = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
#             'm_institution').last().m_hierachie
#         bool(gest_val)
#         tmp_gest_val = gest_val
#     try:
#         entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,
#                                                    m_institution=actual_institution).select_related(
#             'm_institution').first().m_entity_type
#     except:
#         entity = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
#             'm_institution').last().m_entity_type

#     is_tache = False
#     context['is_sub_tache'] = False
#     context['detail_g_v'] = False
#     context['sup_hierachy'] = list()
#     if gest_id != 0:
#         # gest_val = str(int(gest_val) + 1)
#         # entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,m_institution=context['actual_institution']).first().m_entity_type
#         sup_entity = Entity.objects.filter(id=gest_id).first()
#         if sup_entity != None:
#             lines = sup_entity.sub_entities()
#         else:
#             lines = list()
#         tmp_gest_val = str(int(gest_val) + 1)
#         sub_type = InsitutionEntities.objects.filter(m_hierachie=tmp_gest_val,
#                                                      m_institution=context['actual_institution']).select_related(
#             'm_institution').first()

#         if context["permissions"] <= 0 and sup_entity in context["my_entities"]:
#             context["autoE"] = 1
#         elif context["permissions"] <= 0:
#             for t in sup_entity.sup_hierachie():
#                 if t in context["my_entities"]:
#                     context["autoE"] = 1
#                     break
#         if sub_type != None:  # Ce n'est pas une tache
#             sub_type = sub_type.m_entity_type
#             fields = sub_type.fields()
#             context['is_sub_tache'] = sub_type.is_tache
#             context['sub_entity'] = sub_type
#             context['base_val'] = sup_entity
#             context['sub_entities'] = sup_entity.sub_entities()
#             context['gest_id'] = gest_id
#             context['objects_field'] = sub_type.objects_field()
#             context['calculates_field'] = sub_type.calculates_field()
#             if sup_entity != None:
#                 if sup_entity.m_type_entity.is_pic_represented == True and sup_entity.m_pic_represented != None:
#                     try:
#                         context['base_img_val'] = sup_entity.m_pic_represented.url
#                     except:
#                         pass
#             actu_entity = sub_type
#         else:
#             is_tache = True
#             fields = list()
#             actu_entity = entity
#         context['detail_g_v'] = True
#     else:
#         actu_entity = entity
#         enmPT = actu_entity.enum_fields()['result']
#         """
# 		test_PT = dict()
# 		for e in enmPT:
# 			test_PT[e['name']] = e['lines']
# 		"""
#         lines = entity.lines()
#         is_tache = entity.is_tache
#         fields = entity.fields()
#         context['objects_field'] = entity.objects_field()
#         context['calculates_field'] = entity.calculates_field()

#     if name != None:
#         tmp = list()
#         for l in lines:
#             if name in l.get_name():
#                 tmp.append(l)
#         lines = tmp

#     if structure != None:
#         tmp = list()
#         for l in lines:
#             if l.structure == structure:
#                 tmp.append(l)
#         lines = tmp

#     if periode != None:
#         tmp = list()
#         for l in lines:
#             if periode in l.plannification():
#                 tmp.append(l)
#         lines = tmp

#     context['is_tache'] = is_tache
#     context['hierachy'] = int(tmp_gest_val)
#     context['next_hierachy'] = int(tmp_gest_val) + 1
#     context['gest_val'] = int(gest_val)
#     context['entity'] = entity
#     context['actu_entity'] = actu_entity
#     context['sup_zone'] = entity.sup_entity(actual_institution.id)
#     context['fields'] = fields
#     # context['lines'] = lines
#     context['menu'] = 'g'
#     paginator_o = Paginator(list(lines), 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range

#     if int(tmp_gest_val) > 0 and gest_id != 0:
#         context['sup_hierachy'] = sup_entity.sup_hierachie()

#     if (int(tmp_gest_val) - 1 > 0) and InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
#                                                                          m_institution=context[
#                                                                              'actual_institution']).select_related(
#             'm_institution').first() == None:
#         context['none_search'] = True
#     else:
#         context['first_sup_search'] = True

#     if tmp_gest_val == '0' and entity.m_enum_values in ["", None]:
#         context['none_search'] = True
#     context['searches'] = list(InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
#                                                                  m_institution=context[
#                                                                      'actual_institution']).select_related(
#         'm_institution'))
#     """
# 	if is_tache or context['is_sub_tache']:
# 		context['searches'].append({'label':'Structure','code':'s','values':context['structures']})
# 	"""
#     try:
#         if context['base_val'] != None:
#             taches = list()  # context['base_val'].taches()
#             struc = set()
#             for t in taches:
#                 struc.add(t.structure)

#             context['structures_not_null'] = struc
#     except:
#         pass
#     try:

#         if context["entity_manage"] != None:
#             context["not_add"] = 1
#             entityd = Entity.objects.get(id=context['base_val'].id)
#             if entityd in context["my_entities"]:

#                 if context["role"].m_role.permissions >= 0:
#                     context["permissions"] = 0
#                 if context["permissions"] >= 0:
#                     request.session["permissions_valider"] = True
#             else:
#                 if request.session["permissions_valider"] == True:
#                     pass  # context["permissions"] = -100
#     except:
#         pass
#     if context['permissions'] < 0:
#         template = "webpages/ctn_bpf/entities_simple_user.html"
#         try:
#             if context['base_val'].id == context['entity_manage'].id:
#                 context["auto_simple"] = 1
#         except:
#             pass
#     else:
#         if is_tache or context['is_sub_tache'] == True:
#             template = "webpages/ctn_bpf/taches.html"
#             context['structures'] = Structure.objects.filter(institution=context['actual_institution']).select_related(
#                 'institution')
#         else:
#             template = "webpages/ctn_bpf/entities.html"

#     if enums != "#":
#         context['da_enums'] = enums
#     if is_tache and gest_id != 0:
#         response = redirect('/taches/' + str(gest_id) + '/')
#     else:
#         response = render(request, template, context)
#     return response


@login_required(login_url='/log_account')
def messengers(request):
    context = basis(request)
    template = "webpages/ctn_bpf/messengers.html"
    return render(request, template, context)


# @cache_page(60 * 15)
def ges_taches(request, tache_id, arg_period=None, search=None):
    context = basis(request)
    base_val = Tache.objects.get(id=int(tache_id))
    lines = Operation.objects.filter(tache=base_val).select_related('tache')
    lines_tache = lines
    context['sup_hierachy'] = base_val.sup_hierachie()

    if search != None:
        tmp = lines
        lines = list()
        for l in tmp:
            if search in str(l):
                lines.append(l)
    context['arg_period'] = arg_period
    if arg_period != None:
        periodes = base_val.plan_months()
        prd = periodes[(arg_period - 1)]
        context['periodes'] = prd
        lines = lines.filter(m_tache_plannification=prd)
        context['test'] = list()
        actual_institution = context['actual_institution']
        week = list()
        for t in actual_institution.default_subperiod.decoup_desc_slip2():
            week.append({'per': t, 'val': list()})
        for l in lines:
            ps = l.periodes()
            t_ps = ps.desc_split()
            i_p = 0
            for t in t_ps:
                if int(t) == 0:
                    week[i_p]['val'].append(l)
                    break
                i_p += 1
        context['test'] = week

    context['none_search'] = True
    context['entity'] = base_val.m_type_entity
    context['base_val'] = base_val
    context['sub_entity'] = context['actual_institution'].operations_name
    tmp_perso = Personnel.objects.filter()
    context['personnels'] = set()
    for t in tmp_perso:
        if context['actual_institution'] in t.all_institutions():
            context['personnels'].add(t)
    context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
        'actual_institution')
    plan = base_val.plannification()
    if plan != None:
        context['searches'] = [{'label': '', 'values': base_val.plannification().table(), 'not_filter': True}]
    else:
        context['searches'] = [{'label': '', 'values': ["Aucune Valeur"], 'not_filter': True}]
    context['g_v'] = 'o'
    context['menu'] = 'go'
    base_valE = Entity.objects.get(id=base_val.id)

    if context["permissions"] <= 0 and base_valE in context["my_entities"]:
        context["autoE"] = 1
    elif context["permissions"] <= 0:
        for t in base_val.sup_hierachie():
            if t in context["my_entities"]:
                context["autoE"] = 1
                break

    if context['permissions'] < 0:
        template = "webpages/ctn_bpf/operations_simple_user.html"
        if context['base_val'].id == context['entity_manage'].id:
            context["auto_simple"] = 1
            lines = lines_tache
    else:
        if arg_period is None:
            template = "webpages/ctn_bpf/operations.html"
        else:
            template = "webpages/ctn_bpf/operations_periodes.html"

    paginator_o = Paginator(lines, 12)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    context['lines'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    # context['roles_RACI'] =
    try:
        if request.session["permissions_valider"] == True:
            context["permissions"] = 0
            context["not_add"] = 1
    except:
        pass
    return render(request, template, context)


def structure_hie(request):
    return structures(request, None, 1)


def structures(request, name=None, hierachie=None):
    template = "webpages/ctn_bpf/structure.html"
    context = basis(request)
    context['entity'] = str(context['actual_institution'].default_struc_name)
    lines= Structure.objects.filter(parent=None,institution=context['actual_institution'])
    context['lines'] = lines
  
    context['sub_structures'] = {s.id: Structure.objects.filter(parent=s) for s in lines} 
    groupe_structure = GroupeStructure.objects.only('nom')
    context['groupe_structure'] = groupe_structure
    if name != None:
        context['lines'] = context['lines'].filter(nom__contains=name)
    context['fields'] = ['Logo', 'Nom',
                         'Designation',
                         'Responsable', 'Total : ' + str(context['actual_institution'].last_entity())]
    context['menu'] = 's'
    context['personnels'] = Personnel.objects.filter(actual_institution=context['actual_institution']).select_related(
        'actual_institution')
    context['g_v'] = 's'
    context['none_search'] = True
    if hierachie != None:
        stH = context["actual_institution"].Structure_Hierachy()
        vals = ""
        for s2 in stH:
            s3 = s2.m_levels_fields.split("|")[:-1]
            for s in s3:
                vals += str(request.POST[s]) + "|"
        tmp = vals.split("#")
        re = ""
        for tm in tmp:
            re += tm.split("|")[0] + "|"
        vals = re
        context['vals'] = vals
        context['lines'] = context['lines'].filter(values_hierachy__contains=vals)
        context["stH"] = stH[0].m_levels_fields
    return render(request, template, context)


def structure_details(request, structure_id=0):
    template = "webpages/ctn_bpf/structure_details.html"
    context = basis(request)
    structure = Structure.objects.get(id=int(structure_id))
    entity = context['actual_institution'].last_entity()
    lines = Tache.objects.filter(structure=structure).select_related('structure')

    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    fields = entity.fields()

    context['structure'] = structure
    context['base_val'] = structure
    # context['gest_id']=gest_id
    context['entity'] = entity
    context['sub_entity'] = entity
    context['objects_field'] = entity.objects_field()
    context['fields'] = fields
    context['is_tache'] = True
    return render(request, template, context)


def users_simples(request, search=None):
    template = "webpages/ctn_bpf/roles.html"
    fields_personnel = ['', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', 'sexe']
    fields_roles = ['Role', 'Description', 'Entite']
    personnel = Personnel.objects.filter()
    context = basis(request)
    roles = Role.objects.filter(actual_institution=context['actual_institution'], is_simple_user=1).select_related(
        'actual_institution')

    if search != None:
        roles = roles.filter(nom__contains=search)
    context['entity'] = 'Utilisateur Simple'
    context['fields1'] = fields_personnel
    context['personnel'] = personnel
    context['fields'] = fields_roles
    context['lines'] = roles
    context['g_v'] = 'r'
    context['g_vs'] = 'u2'
    return render(request, template, context)


def personnels(request, name=None, lis_peros=None):
    template = "webpages/ctn_bpf/roles.html"
    context = basis(request)
    context['entity'] = 'Personnel'
    context['fields'] = ['', 'Nom', 'Prenom', 'Telephone', 'Email', 'Fonction', 'Structures','sexe']
    context['lines'] = list()
    lines2 = set()
    tmp_perso = Personnel.objects.filter()
    if lis_peros == None:
        for t in tmp_perso:
            if context['actual_institution'] in t.all_institutions():
                atmp = {
                    'id': t.id,
                    'photo': t.photo,
                    'prenom': t.prenom,
                    'nom': t.nom,
                    'tel': t.tel,
                    'mail': t.mail,
                    'sexe':t.sexe,
                    'get_function': t.get_function(context['actual_institution'].id),
                    'get_structure': t.get_structure(context['actual_institution'].id)
                }
                context['lines'].append(atmp)
                lines2.add(t)
    else:
        context['lines'] = lis_peros
    # context['lines'] = Personnel.objects.filter(actual_institution=context['actual_institution'])
    if name != None:
        name = name.lower()
        tmps = context['lines']
        context['lines'] = list()
        for tt in tmps:
            ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
            for t in ta:
                if name in str(t):
                    context['lines'].append(tt)
                    break
    paginator_o = Paginator(context['lines'], 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)

    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    context['menu'] = 'g'
    context['g_v'] = 'p2'
    context['g_vs'] = 'p2'
    context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
        'actual_institution')
    context['searches'] = []
    context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
        actual_institution=context['actual_institution']).select_related('actual_institution')})
    context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
        institution=context['actual_institution']).select_related('institution')})
    context['functions'] = list()
    context['structures'] = list()
    for p in lines2:
        context['functions'].append(p.get_function(context['actual_institution'].id))
        context['structures'].append(p.get_structure(context['actual_institution']))
    try:
        if request.session['perso_saved'] > 0:
            context['perso_saved'] = True
            tmp_user = Personnel.objects.get(id=request.session['perso_saved'])
            context['perso_get'] = tmp_user
            request.session['perso_saved'] = None
    except:
        pass
    return render(request, template, context)


def personnel_id(request, perso_id):
    context = basis(request)
    template = "webpages/ctn_bpf/profile.html"
    personnel = Personnel.objects.get(id=perso_id)
    context["personnel"] = personnel
    context["prenom"] = personnel.prenom
    context["nom"] = personnel.nom
    context["role"] = personnel.get_function(context["actual_institution"].id)
    operation=Operation.objects.filter(m_institution_id=context['actual_institution'], etat="0")
    context['operation']=operation
    perso=Personnel.objects.filter(actual_institution=context['actual_institution'])
    context['perso']=perso
    operation_historic=HistoricRACI.objects.all()
    context['operation_historic']=operation_historic
    return render(request, template, context)


"""
def roles(request):
	template = "webpages/ctn_bpf/personnel_roles.html"
	context = basis(request)
	context['lines'] = Role.objects.filter(institution=context['actual_institution'])
	context['menu'] = 'g'
	return render(request,template,context)
"""


def filter_perso(request, structure_id=0, role_id=0):
    if structure_id == 0:
        structure = request.POST["Structure"]
        tds = structure
        if str(structure) != '0':
            structure = Structure.objects.get(id=int(structure))
    else:
        structure = Structure.objects.get(id=structure_id)

    if role_id == 0:
        role = int(request.POST["Fonction"])
        if str(role) != '0':
            role = Role.objects.get(id=role)
    else:
        role = Role.objects.get(id=role_id)
    personnel = Personnel.objects.filter()
    context = basis(request)
    result = list()
    if structure != '0':
        for p in personnel:
            if p.get_structure() != None and p.get_structure().m_structure == structure:
                result.append(p)
    if role != '0':

        if structure == '0':
            tmp = personnel
        else:
            tmp = result
        result = list()
        for p in tmp:

            if p.get_function() != None and p.get_function().m_role == role:
                result.append(p)
    return personnels(request, None, result)


def gestionnaire_id(request, gest_val, gest_id):
    pass


# def log(request, out=False):
#     if out == False:
#         response = "/log_account/"
#         result = False
#         try:
#             request.session['bad_log'] += 1
#             if request.session['bad_log'] > 0:
#                 response = "/bad_auth/"
#         except:
#             request.session['bad_log'] = 1
#             request.session['try_log'] = True
#         r_email = request.POST['email']
#         r_password = request.POST['password']
#         users = User.objects.filter(email=r_email)
#         r_username = User.objects.filter(email=r_email).last()
#         if r_username != None:
#             r_username = r_username.username
#             user = authenticate(username=r_username, password=r_password)
#             if user:
#                 login(request, user)
#                 result = True
#                 response = "/"
#             else:
#                 if users.count() > 2:
#                     for u in users:
#                         r_username = u.username
#                         u_tmp = authenticate(username=r_username, password=r_password)
#                         if u_tmp:
#                             login(request, u_tmp)
#                             result = True
#                             response = "/"
#             request.session['logged'] = 1
#             request.session['bad_log'] = None
#     else:
#         logout(request)
#         response = "/"
#     return redirect(response)


def specific_log(request, type_view=0):
    template = "webpages/ctn_bpf/specific_log.html"
    context = {

    }
    if type_view == 2:
        context['specific'] = 0  # Not Code
    return render(request, template, context)


def save_entity(request):
    try:
        institution = Institution.objects.get(id=int(request.POST['institution']))
    except:
        institution = basis(request)['actual_institution']
    try:
        operation_aggregate = request.POST['ope_aggregate']
    except:
        entity_nom = request.POST['entity_nom']
        entity_hierachy = request.POST['entity_hierachy']
        fields_name = request.POST['fields_name']
        fields_type = request.POST['fields_type']
        rapp_fields_name = request.POST['fields_name2']
        rapp_fields_type = request.POST['fields_type2']
        if request.POST['entity_image'] == '0':
            entity_image = False
        else:
            entity_image = True
        edit_or_create = request.POST['edit_or_create']
        operation_aggregate = None
        enum_fields = request.POST['enum_fields']
    if operation_aggregate is None:
        if edit_or_create == 'e':
            edit_id = request.POST['edit_id']
            institutionEntity = InsitutionEntities.objects.get(id=int(edit_id))
            entity = institutionEntity.m_entity_type
            actual_fields = entity.fields()
            actual_values = entity.lines()
            for l in actual_values:
                value = l.m_value_fields
                tmp = ""
                for f in fields_name.split("|")[:-1]:
                    if f not in actual_fields:
                        tmp += " |"
                    else:
                        tmp += str(l.get_value(f)) + "|"
                l.m_value_fields = tmp
                l.save()
        else:
            entity = EntityType(m_nom=entity_nom)
        entity.is_pic_represented = entity_image
        entity.m_nom = entity_nom
        entity.m_fields = fields_name
        entity.m_type_fields = fields_type
        entity.m_fields_rapported = rapp_fields_name
        entity.m_type_fields_rapp = rapp_fields_type
        entity.m_enum_values = enum_fields
        entity.indicateur_fields = request.POST['indicateurs_field']
        entity.save()
        # tache hierachy modifier
        hierachie = int(entity_hierachy) + 1

        # Decalage des Relations
        if edit_or_create != 'e':

            to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
            for d in to_decaler:
                d.m_hierachie += 1
                d.save()
            institutionEntity = InsitutionEntities(m_hierachie=hierachie, m_entity_type=entity,
                                                   m_institution=institution)
            if to_decaler.first() == None:
                institutionEntity.m_entity_type.is_tache = True
                institutionEntity.m_entity_type.save()
        else:
            institutionEntity.m_hierachie = hierachie
        institutionEntity.save()
    else:
        edit_or_create = request.POST['edit_or_create_O']
        aggregate_name = request.POST['aggregate_name']
        aggregate_fields_name = request.POST['aggregate_fields_name']
        aggregate_fields_type = request.POST['aggregate_fields_type']
        aggregate_rap_fields_name = request.POST['aggregate_rap_fields_name']
        aggregate_rap_fields_type = request.POST['aggregate_rap_fields_type']

        # Aggregates launching
        aggregates = institution.operations_modules()
        # Aggregates launching

        if aggregates == None:
            aggregates = Aggregate(m_institution=institution)

        aggregates.m_nom = aggregate_name
        aggregates.m_fields = aggregate_fields_name
        aggregates.m_type_fields = aggregate_fields_type
        aggregates.m_fields_rapported = aggregate_rap_fields_name
        aggregates.m_type_fields_rapp = aggregate_rap_fields_type
        aggregates.save()
    return redirect('/configurations/')


# def save_entity_value(request):
#     institution = int(request.POST['institution'])
#     hierachie = int(request.POST['hierachie'])
#     if hierachie != -1:
#         type_entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution__id=institution).first()
#     else:
#         type_entity = InsitutionEntities.objects.filter(m_institution__id=institution).last()
#     type_entity = type_entity.m_entity_type
#     fields_value = request.POST['fields']
#     edit_or_create = request.POST['edit_or_create']

#     is_tache = request.POST['is_tache']
#     if is_tache == 'True':
#         if edit_or_create == 'e':
#             edit_id = request.POST['edit_id']
#             entity = Tache.objects.get(id=int(edit_id))
#             entity.m_value_fields = fields_value
#             entity.m_type_entity = type_entity
#         else:
#             entity = Tache(m_value_fields=fields_value, m_type_entity=type_entity)
#         structures_list = request.POST['structures_list']  # getFieldValues()
#         structures_roles = request.POST['structures_roles']
#         try:
#             entity.montant = float(request.POST["finances"])
#         except:
#             pass
#         entity.save()
#         r_struc = list()
#         tmp_struc = list()
#         r_roles = structures_roles
#         r_roles = r_roles.split('\n')
#         i = 0

#         for s in structures_list.split('|')[:-1]:
#             if s not in tmp_struc:
#                 tmp_struc.append(s)
#         for s in tmp_struc:
#             r_struc.append(Structure.objects.get(id=int(s)))
#         r_struc.sort(key=lambda x: x.nom)
#         try:
#             if edit_or_create == 'e':
#                 for s in entity.structures.filter():
#                     s.delete()
#             for s in r_struc:
#                 if s == 0:
#                     pass
#                 else:
#                     r_str = StructureRole(m_structure=s, m_role=r_roles[i])
#                     r_str.save()
#                     entity.structures.add(r_str)
#                     i += 1
#             entity.structure = entity.structures.first().m_structure  # next(iter(r_struc)).m_structure
#         except:
#             pass

#         entity.save()
#         calendar = request.POST['calendar_selected']
#         periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
#         if edit_or_create == 'e' and calendar != "#":
#             plani_tche = TachePlannify.objects.filter(m_tache=entity)
#             for p in plani_tche:
#                 p.delete()
#         if calendar != "#":
#             plani_tche = TachePlannify(m_tache=entity, m_planify=calendar, m_periode=periode)
#             plani_tche.save()
#             set_pv_tp(plani_tche)
#     else:
#         if edit_or_create == 'e':
#             edit_id = request.POST['edit_id']
#             entity = Entity.objects.get(id=int(edit_id))
#             entity.m_value_fields = fields_value
#             entity.m_type_entity = type_entity
#         else:
#             entity = Entity(m_value_fields=fields_value, m_type_entity=type_entity)
#         entity.save()
#     try:
#         sup_entity = request.POST['sup_entity']
#     except:
#         sup_entity = None
#     # relations_entities
#     if sup_entity != None:
#         sup_entity = Entity.objects.get(id=int(sup_entity))

#         if edit_or_create == 'e':
#             delete_hierachie = EntityHierachie.objects.filter(m_sub_entity=entity).first()
#             if delete_hierachie != None:
#                 delete_hierachie.delete()
#         entity_hierachie = EntityHierachie(m_sub_entity=entity, m_sup_entity=sup_entity)
#         entity_hierachie.save()

#     # Image de Couverture
#     try:
#         entity.m_pic_represented = request.FILES["cover_img"]
#         entity.save()
#     except:
#         pass

#     i_f = 0
#     fields_name = entity.m_type_entity.fields()
#     for f in entity.m_type_entity.type_fields():
#         if f in ['file', 'image']:
#             try:
#                 eF = EntityFile(m_entity=entity, m_field=f, m_file=request.FILES[fields_name[i_f]])
#                 eF.save()
#                 entity.set_value(fields_name[i_f], str(eF.id))
#             except:
#                 entity.set_value(fields_name[i_f], str("Aucun Fichier"))
#             entity.save()
#         i_f += 1
#     base_val = request.POST["base_val"]

#     # Enumerations Values
#     split_extras1(entity)  # Clean the Error Files

#     if base_val not in ['', ' ', '0', None]:
#         response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
#     else:
#         response = "/gestionnaire/" + str(hierachie) + "/"
#     response = redirect(response)
#     return response

import json
def save_gestion(request):
    context = basis(request)
    generator = request.POST['generator']
    edit_or_create = request.POST['edit_or_create']
    try:
        r_redirect = request.POST['redirect']
    except:
        pass
    if generator == 'i':
        r_sigle = request.POST['sigle']
        r_nom = request.POST['nom']
        r_image = request.FILES['image']
        institution = Institution(sigle=r_sigle, nom=r_nom, img=r_image)
        institution.save()
        response = "/gestionnaire/i/"
    elif generator == 'eD':
        r_nom = request.POST['nom']
        # r_fields_type = request.POST['fields_type']
        # r_fields = request.POST['fields']
        r_domain_type = request.POST['domain_type']
        r_value_type = request.POST['value_type']
        r_aggregation_type = request.POST['aggregation_type']
        r_description = request.POST['description']
        nicename= request.POST['nicename']
        try:
            r_null_conserv = request.POST['null_conserv']
        except:
            r_null_conserv = 0
        try:
            r_fill_valid = request.POST['fill_valid']
        except:
            r_fill_valid = 0
        try:
            r_logo = request.FILES['logo']
        except:
            r_logo = None
        r_default_value = request.POST["default_value"]

        dE = DataElement(m_name=r_nom)
        if r_logo != None:
            m_logo = r_logo
        dE.m_domain_type = r_domain_type
        dE.m_value_type = r_value_type
        dE.m_aggregation_type = r_aggregation_type
        dE.m_description = r_description
        dE.nicename = nicename

        try:
            if int(r_null_conserv) == 1:
                dE.is_zero_collect = True
        except:
            dE.is_zero_collect = False
        try:
            if int(r_fill_valid) == 1:
                if request.POST['default_value'] == None:
                    tmp = 0
                else:
                    tmp = request.POST['default_value']
                dE.m_default_value = int(tmp)
        except:
            dE.m_default_value = None
        actual_institution = context['actual_institution']
        dE.m_institution = actual_institution
        dE.save()
        response = "/dataelts/"
    elif generator == 'a0':
        r_user = User.objects.get(id=int(request.POST['user']))
        r_message = request.POST['message']
        a = Assistance(m_user=r_user, m_message=r_message)
        a.save()
        request.session['assistance'] = 1
        response = "/assistance/"
    elif generator == "str":
        actual_institution = context['actual_institution']
        r_value = request.POST['value']
        actual_institution.default_struc_name = r_value
        actual_institution.save()
        response = "/structures/"
    elif generator == "p2":
        r_nom = request.POST['nom']
        r_prenom = request.POST['prenom']
        r_mail = request.POST['mail']
        r_tel = request.POST['tel']
        r_sexe =request.POST['sexe']
        personnel_saved = Personnel.objects.filter(mail=r_mail).first()
        try:
            r_img = request.FILES['photo']
        except:
            if edit_or_create != 'e':
                r_img = OperaFile.objects.filter(m_name="USR").first().m_file
            else:
                r_img = None
        if personnel_saved == None:
            tes_none = (User.objects.filter(email=r_mail).first())
            if tes_none != None:
                try:
                    personnel_saved = tes_none.personnel
                except:
                    personnel_saved = Personnel(bd_user=tes_none, nom=r_nom, prenom=r_prenom, mail=r_mail, photo=r_img,
                                                actual_institution=context['actual_institution'],tel=r_tel,sexe=r_sexe)
                    personnel_saved.save()

        try:
            r_structure = request.POST['Structure']
        except:
            r_structure = '0'
        if r_structure != '0':
            r_structure = Structure.objects.get(id=int(r_structure))
        else:
            r_structure = None
       # r_role = request.POST['Fonction']
       # r_role = Role.objects.get(id=int(r_role))
        edit_or_create = request.POST['edit_or_create']
        if edit_or_create != 'e':
            if personnel_saved == None:
                
                password = ""
                for i in range(0, 8):
                    password += str(random.randint(0, 9))
                usn = str(password) + str(User.objects.count() + 2)
                r_bd_user = User(username=usn, email=r_mail)
                subject = "Nouveau Compte Opera +"
                message_context = {
                    'password': password,
                    'name': r_nom + "" + r_prenom
                }
                message = render_to_string('webpages/ctn_bpf/mails/new_personnel.html', message_context)
                email = r_mail
                email_from = settings.EMAIL_HOST_USER
                recipient_list = [email, ]
                msg = EmailMessage(subject, message, email_from, recipient_list)
                msg.content_subtype = 'html'
                try:
                    msg.send()
                    r_bd_user.set_password(password)
                except:
                    r_bd_user.set_password("user1234")
                # r_bd_user.set_password('User'+password)
                r_bd_user.save()
                personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, photo=r_img,
                                      actual_institution=context['actual_institution'],tel=r_tel,sexe=r_sexe)
                personnel.bd_user = r_bd_user
            else:
                personnel = personnel_saved
        else:
            edit_id = request.POST['edit_id']
            if personnel_saved == None:
                personnel = Personnel.objects.get(id=int(edit_id))
            else:
                personnel = personnel_saved
            personnel.nom = r_nom
            personnel.prenom = r_prenom
            personnel.mail = r_mail
            personnel.bd_user.email = r_mail
            personnel.m_tel = r_tel
            personnel.bd_user.save()
            if r_img != None:
                personnel.photo = r_img
        if personnel_saved == None:
            personnel.save()
        else:
            request.session['perso_saved'] = personnel_saved.id
        try:
            simple_user = request.POST['simple_user']
        except:
            simple_user = '0'
        if simple_user == '0':
            ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
            ps.save()
            pf = Personnel_Function.objects.filter(m_personnel=personnel,
                                                   m_institution=context['actual_institution']).first()
            if pf == None:
                pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
                                        m_institution=context['actual_institution'])
            else:
                pf.m_role = r_role
            pf.save()
        else:
            entity = Entity.objects.get(id=int(simple_user))
            pf = Personnel_Function.objects.filter(m_personnel=personnel,
                                                   m_institution=context['actual_institution']).first()
            if pf == None:
                pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
                                        m_institution=context['actual_institution'])
            pf.m_entity = entity
            pf.save()

            ps = Personnel_Function.objects.filter(m_personnel=personnel,
                                                   m_institution=context['actual_institution']).first()
            ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
            ps.save()
        response = "/personnels/"
    elif generator == "r":  # Role
        r_nom = request.POST['nom']
        r_description = request.POST['description']
        r_permission = request.POST['permission']
        r_institution = Institution.objects.get(id=int(request.POST['institution']))
        r_ros_click = request.POST["ros_click"]

        if int(r_ros_click) in [1, 2]:
            r_permission = "-1"

        if r_permission == '-1':
            r_permission = 0
        else:
            permissions_hierachie = InsitutionEntities.objects.filter(m_institution=r_institution).last().m_hierachie
            if (permissions_hierachie + 1) >= int(r_permission):
                r_permission = 0  # (permissions_hierachie+1) - int(r_permission)
            else:
                r_permission = int(r_permission)
        if edit_or_create == 'c':
            role = Role(actual_institution=r_institution, nom=r_nom, description=r_description,
                        permissions=r_permission)
        else:
            edit_id = request.POST['edit_id']
            role = Role.objects.get(id=int(edit_id))
            role.nom = r_nom
            role.description = r_description
            role.permissions = r_permission
        if int(r_ros_click) == 1:
            r_entity_administr = request.POST["permission_entity"]
            eH = InsitutionEntities.objects.filter(id=int(r_entity_administr)).first().m_entity_type
            role.m_simple_auth = eH
            entities = list()
            """
			for e in r_entity_administr.split("#")[:-1]:
				entities.append(Entity.objects.get(id=int(e)))
			"""
            role.save()
            # role.m_entities.set(entities)
            role.m_nature = "1"
        elif int(r_ros_click) == 2:
            role.permissions = -100
            user_simple_entity = request.POST['user_simple_entity']
            role.is_simple_user = 1
            role.m_simple_auth = EntityType.objects.get(id=int(user_simple_entity))
        role.save()
        response = "/personnels/"
        messages.success(request,'Enregistrement Reussi 👍')
    elif generator == "s":
        try:
            r_pic = request.FILES["logo"]
        except:
            r_pic = None
        r_nom = request.POST['nom']
        r_designation = request.POST['designation']
        r_institution = request.POST['Institution']
        r_institution = Institution.objects.filter(id=int(r_institution)).first()
        try:
            r_responsable = Personnel.objects.filter(id=int(request.POST['responsable'])).first()
        except:
            r_responsable = None
        if edit_or_create == 'e':
            edit_id = int(request.POST['edit_id'])
            structure = Structure.objects.get(id=int(edit_id))
            structure.photo = r_pic
            structure.nom = r_nom
            structure.designation = r_designation
            structure.institution = r_institution
        else:
            structure = Structure(nom=r_nom, designation=r_designation,
                                  institution=r_institution)  # ,responsable=r_responsable
            if r_pic != None:
                structure.photo = r_pic
        structure.save()

        if r_responsable != None:
            if edit_or_create == 'c':
                sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
            else:
                edit_id = int(request.POST['edit_id'])
                structure = Structure.objects.get(id=int(edit_id))
                sR = StructureResponsable.objects.filter(m_structure=structure).first()
                if sR == None:
                    sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
                else:
                    sR.m_responsable = r_responsable
            sR.save()
        response = "/structures/"
    elif generator == 'd_s_1':
        if edit_or_create == "c":
            dS = DataSet()
            dS.save()
            response = "/data_sets/design/" + str(dS.id) + "/"
            form_part = False
        else:
            edit_id = request.POST["edit_id"]
            dS = DataSet.objects.get(id=int(edit_id))

            try:
                form_html = request.POST["form_design"]
                response = "/forms_data/"
                form_part = True
                for v in dS.m_dataelements.filter():
                    form_html = form_html.replace("dE$" + str(v.id) + "$",
                                                  "<div class='variableSelector'>  <div><input class='form-control' name='D0elt" + str(
                                                      v.id) + "' type='text'></div> </div>")  # <div><label><small>"+str(v)+"</small></label></div>
                for v in dS.m_indicateurs.filter():
                    form_html = form_html.replace("dI$" + str(v.id) + "$",
                                                  "<div class='indicSelector' data-id='" + str(v.id) + "'> </div>")
                dS.m_formulaire = form_html
            except:
                response = "/data_sets/design/" + str(dS.id) + "/"
                form_part = False
        if not form_part:
            form_name = request.POST["form_name"]
            if form_name not in [None, ""]:
                dS.m_name = form_name
            dS.m_periode = request.POST["periode"]
            dS.m_sub_periode = request.POST["sub_periode"]

            """
			r_indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
			dS.m_indicateur = r_indicateur
			"""
            dS.m_institution = context["actual_institution"]
            # ephoxVariables_input = request.POST["ephoxVariables_input"]
            variables_list = request.POST["variables_list"].split("#")
            indicateurs_list = request.POST["indicateurs_list"].split("#")
            variables_set = set()
            indicateurs_set = set()

            for v in variables_list[:-1]:
                dE = DataElement.objects.get(id=int(v))
                variables_set.add(dE)

            for v in indicateurs_list[:-1]:
                dI = Indicateur.objects.get(id=int(v))
                indicateurs_set.add(dI)

            """
			if ephoxVariables_input != "#":
				id_insert = 1
				ephoxVar = ephoxVariables_input.split("#")
				for v in ephoxVar[1:-1]:
					dE = DataElement.objects.get(id=int(v))
					dS.m_formulaire = dS.m_formulaire.replace("de$"+str(v)+"$","<div class='variableSelector'> <div><label><small>"+str(dE)+"</small></label></div> <div><input class='form-control' name='"+str(id_insert)+"' type='text'></div> </div>")
					id_insert += 1
					variables_set.add(dE)
				dS.save()
			"""
            variables_set = list(variables_set)
            indicateurs_set = list(indicateurs_set)
            dS.m_dataelements.set(variables_set)
            dS.m_indicateurs.set(indicateurs_set)

            r_structure = request.POST["structures_list"].split("$")
            structures_set = list()
            for r in r_structure[:-1]:
                structures_set.append(Structure.objects.get(id=int(r)))
            dS.m_structures.set(structures_set)

            r_role = request.POST["roles_list"].split("$")
            roles_set = list()
            for r in r_role[:-1]:
                roles_set.append(Role.objects.get(id=int(r)))
            dS.m_roles.set(roles_set)

        dS.save()
    elif generator == 'o':
        r_m_tache_plannification = request.POST['tache_periode']
        r_tache = request.POST['tache']
        response = "/taches/" + r_tache + "/"
        r_tache = Tache.objects.get(id=int(r_tache))

        # r_code = request.POST['code']
        r_dataset=request.POST.getlist('dataset[]')
        r_nom = request.POST['nom']
        r_perso = request.POST['perso']
        r_accountable = request.POST['accountable']
        r_consulted = request.POST['consulted']
        r_informed = request.POST['informed']
        #date_echeance_str = request.POST.get('date_echeance',None)
        r_nature = request.POST['nature']
        r_categorie=request.POST['categorie']
        #structure = request.POST.get('structure', '')
        mois = request.POST.get('mois',None)
        annee = request.POST.get('annee',None)
        #date_debut=request.POST.get('date_debut')
        operation_id = request.POST.get('operation_id',None)
        
        participant = request.POST['participant']

        structure = request.POST.get('structure', '').strip()  # Get input from POST request  
        if structure:  
            if structure.isdigit():  
                instance_structure = Structure.objects.get(id=int(structure))  
            else:  
                # Handle invalid input  
                raise ValueError("The 'structure' must be a valid integer ID.")  
        else:  
            # Handle the case where 'structure' is empty  
            instance_structure = None  # or however you want to handle the absence of a structure  
            
        date_debut = request.POST.get('date_debut', '').strip()  
        date_echeance_str = request.POST.get('date_echeance', '').strip()  

        # Initialize variables for further processing  
        start_date = None  
        end_date = None  

        # Check if date_debut is provided and valid  
        if date_debut:  
            try:  
                start_date = datetime.datetime.strptime(date_debut, '%d-%m-%Y')  # Change format if necessary  
            except ValueError:  
                error_message = "Invalid date format for 'date_debut'. Please use YYYY-MM-DD."  
                #return render(request, 'your_template.html', {'error': error_message})  

        # Check if date_echeance is provided and valid  
        if date_echeance_str:  
            try:  
                end_date = datetime.datetime.strptime(date_echeance_str, '%d-%m-%Y')  # Change format if necessary  
            except ValueError:  
                error_message = "Invalid date format for 'date_echeance'. Please use YYYY-MM-DD."  
          

        # Proceed with logic if both dates are valid  
        if  r_dataset and (structure is None or not annee or not mois):
            messages.info(request,"Cette Enregistrement Necessite La Selection D\'une Periode Et D\'une Structure")
        
        # Optional: Provide default values if needed  
        if annee in (None, ''):  
            annee = None  # Set to None, or you can use a default value like 0  
        if mois in (None, ''):  
            mois = None  # Set to None, or use a default value if needed  
       
        try:
            r_role = request.POST['role']
        except:
            pass
        if r_perso != "0":
            r_perso = Personnel.objects.get(id=int(r_perso))
        else:
            r_perso = None
        if r_accountable != "0":
            r_accountable = Personnel.objects.get(id=int(r_accountable))
        else:
            r_accountable = None
        if r_consulted != "0":
            r_consulted = Personnel.objects.get(id=int(r_consulted))
        else:
            r_consulted = None
        if r_informed != "0":
            r_informed = Personnel.objects.get(id=int(r_informed))
        else:
            r_informed = None
        if participant != "0":
            participant = Personnel.objects.get(id=int(participant))
        else:
            participant = None

        """		try:
			r_perso = Personnel.objects.get(id=int(r_perso))
			r_accountable = Personnel.objects.get(id=int(r_accountable))
			r_consulted = Personnel.objects.get(id=int(r_consulted))
			r_informed	 = Personnel.objects.get(id=int(r_informed))
		except:
			pass"""
        try:
            r_montant = int(request.POST['montant'])
        except:
            r_montant = 0
        file_oko = None
        r_chronogr = request.POST['chronogr']
        r_who_assign = int(request.POST['who_assign'])
        r_sub_period = request.POST['sub_period']
        r_notification = request.POST['notification']
        r_nature = request.POST['nature']
        r_priorite = request.POST['priorite']
        r_categorie=request.POST['categorie']
        r_dataset=request.POST.getlist('dataset[]')
        
        structure = request.POST.get('structure',None)
        mois = request.POST.get('mois',None)
        annee = request.POST.get('annee',None)
        date_debut=request.POST.get('date_debut',None)
        operation_id = request.POST.get('operation_id',None)
        #participant = request.POST.get('participant',None)
        # instance_personnel = Personnel.objects.get(id=int(participant))
        # if instance_personnel in (None,''):
        #     instance_personnel = None


        # Optional: Provide default values if needed  
        if annee in (None, ''):  
            annee = None  # Set to None, or you can use a default value like 0  
        if mois in (None, ''):  
            mois = None  # Set to None, or use a default value if needed  
       

       
        
        try:
            r_operation_aggregates = request.POST['operation_aggregates']
        except:
            r_operation_aggregates = None
        if edit_or_create == 'c':
            operation = Operation(
                tache=r_tache, 
                nom=r_nom, 
                montant=r_montant, 
                notification=r_notification,
                priorite=r_priorite, 
                date_echeance=end_date,
                nature_operation_id=r_nature,
                categorie_id=r_categorie,
                structure=instance_structure,
                periode=annee,
                periode_ok_id=mois,
                date_debut=start_date,
                parent_id=operation_id,
                participant=participant

            )
            operation.save()
            for dataset in r_dataset:
                data = DataSet.objects.get(id=int(dataset))
                operation.dataset.add(data)
            messages.success(request,'Enregistrement Reussi')

            
            operation.m_value = ""
            t2 = r_tache.sup_entity()
            tmp = str(r_tache.id) + "#"
            while t2 != None:
                tmp = str(t2.id) + "#" + tmp
                t2 = t2.sup_entity()
            operation.code = tmp

            if context['actual_institution'].default_options != True:
                try:
                    if r_operation_aggregates is not None:
                        operations_values = r_operation_aggregates.split("|")
                        i_val = 0
                        for val in context['actual_institution'].operations_modules().fill_fields():
                            if val["type"] in ['file', 'image']:
                                try:
                                    oF = OperationFile(operation=operation, m_field=val['field'],
                                                       m_file=request.FILES[val['field'] + '_nam'])
                                    operation.save()
                                    
                                    oF.save()
                                    
                                    
                                except:
                                    pass
                            operation.m_value += str(
                                operations_values[i_val]) + "|"  # str(operations_values[i_val]) + "|"
                            i_val += 1
                    else:
                        operation.m_value = r_operation_aggregates
                except:
                    pass
                operation.m_value += " "
            else:
                try:
                    file_oko = request.FILES['file_oko']
                    operation.fichier_joint = file_oko
                except:
                    pass
        else:

            edit_id = request.POST['edit_id']
            operation = Operation.objects.get(id=int(edit_id))
            operation.nom = r_nom
            operation.montant = r_montant
            operation.notification = r_notification
            operation.priorite = r_priorite
            if r_operation_aggregates is None:
                for val in context['actual_institution'].operations_modules().fields_rapported()[:-1]:
                    operation.m_value += " " + "|"
            else:
                operation.m_value = r_operation_aggregates
        operation.m_tache_plannification = r_m_tache_plannification
        # Add Institution to Operation
        operation.m_institution = context["actual_institution"]

        list_operations = list()
        if r_who_assign == 0:
            if r_perso != "0":
                operation.personnel = r_perso
            if r_accountable != "0":
                operation.accountable = r_accountable
            if r_consulted != "0":
                operation.consulted = r_consulted
            if r_informed != "0":
                operation.informed = r_informed
            list_operations.append(operation)
        elif r_who_assign == 1:
            role = Role.objects.get(id=int(r_role))
            for perso in role.persos():
                operation.personnel = perso.m_personnel
                list_operations.append(operation)
        else:
            list_operations.append(operation)

        for o in list_operations:
            o.save()
            if edit_or_create == 'e':
                op = OperationPeriode.objects.filter(m_operation=o).first()
                if op != None:
                    tmp_chrono = SubPeriode.objects.filter(id=int(r_sub_period)).first()
                    if tmp_chrono != None:
                        op.m_chronogramme = tmp_chrono
                    op.m_desc_realisation = r_chronogr
                    op.save()
                else:
                    op = OperationPeriode(m_operation=o, m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
                                          m_desc_realisation=r_chronogr)
                    op.save()
            else:
                op = OperationPeriode(m_operation=o, m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
                                      m_desc_realisation=r_chronogr)
                op.save()
        subject = "Attribution - " + str(operation.institution().operations_name())
        email_from = settings.EMAIL_HOST_USER
        try:
            raci_roles = [operation.personnel, operation.accountable, operation.consulted, operation.informed]
            all_emails = list()
            msg_emails = list()
            i_r = 0
            for r in raci_roles:
                i_r += 1
                if r is not None:
                    tmp_context = {
                        'operation': operation,
                        'personnel': r,
                        'tache': operation.tache,
                        'institution': operation.institution()
                    }
                    if i_r == 2:
                        tmp_context['role'] = 'A'
                    elif i_r == 3:
                        tmp_context['role'] = 'C'

                    elif i_r == 4:
                        tmp_context['role'] = 'I'
                    else:
                        tmp_context['role'] = 'Responsable'
                    message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', tmp_context)
                    # message2 = (subject, message, email_from, [r_role.m_personnel.mail])
                    message2 = EmailMessage(subject, message, email_from, [r.mail, ])
                    message2.content_subtype = 'html'

                    msg_emails.append(message2)
                    try:
                        message2.send()
                    except:
                        pass
        # recipient_list = all_emails
        # send_mass_mail((msg_emails), fail_silently=False)
        except:
            message_context = {
                'operation': operation,
                'personnel': operation.personnel,
                'tache': operation.tache,
                'institution': operation.institution()
            }
            message = "<html><head></heady><body><b>Vous avez une </b></body></html>"
            message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', message_context)
            if r_perso != '0':
                email = r_perso.mail
                recipient_list = [email, ]
                msg = EmailMessage(subject, message, email_from, recipient_list)
                msg.content_subtype = 'html'
                try:
                    if file_oko != None:
                        msg.attach(file_oko.name, file_oko.read(), file_oko.content_type)
                    msg.send()
                except:
                    pass
        """
		try:
			send_mail( subject, message, email_from, recipient_list, fail_silently=False)
			msg = EmailMessage(subject, message, email_from, recipient_list)
			msg.content_subtype = 'html'
			msg.send()
		except:
			pass
		"""
    elif generator == 'w':
        r_nom = request.POST['nom']
        r_prenom = request.POST['prenom']
        r_mail = request.POST['mail']
        r_password = request.POST['password']
        r_username = User.objects.count() + 1
        try:
            r_user = User(username=r_username, email=r_mail)
            r_user.set_password(r_password)
            r_user.save()
        except:
            r_user = User(username='ngb' + str(r_username + 1000), email=r_mail)
            r_user.set_password(r_password)
            r_user.save()

        # Code generator
        code = ""
        
        for i in range(6):
            code += str(random.randint(0, 9))
        # code = "000111"
        owner = Owner(m_user=r_user, m_code=code)
        owner.save()
        personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, bd_user=r_user)
        personnel.photo = OperaFile.objects.filter(m_name="USR").first().m_file
        personnel.save()
        subject = "d'une Institution Opera +"
        message = " Bonjour, utilisez ce code pour renseigner une Institution au sein d'Opera " + str(code)
        email = r_mail
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [email, ]
        try:
            send_mail(subject, message, email_from, recipient_list, fail_silently=False)
        except:
            pass  # No cconnexion
        response = "/log_account/"
        request.session['new_user'] = 1
    elif generator == "i2":
        id_e = int(request.POST["entity_id"])
        entity = Entity.objects.get(id=id_e)
        for i in entity.get_indicateurs():
            tmp_per = request.POST["period" + str(i.id)]
            tmp_num = request.POST["numer" + str(i.id)]
            tmp_field = request.POST["id" + str(i.id)]
            tmp_field = DataElement.objects.filter(id=int(tmp_field)).first()
            # i.m_values = str(tmp_per)+"#"+str(tmp_num)+"\n" + str(i.m_values)
            iV = IndicateurVal(m_indicateur=i, m_periode=tmp_per, m_valeur=tmp_num, m_numerateur=tmp_field)
            iV.save()

        entity.is_rapported = True
        entity.save()
        response = "/chaine_indicateurs/"
        context['indique'] = True
    elif generator == "dSv":
        r_dataset = DataSet.objects.get(id=int(request.POST["dSv_id"]))
        r_user = request.user.personnel
        r_variables = r_dataset.m_dataelements
        r_values = request.POST["variables_value"].split("#")
        r_values_names = request.POST["variables_names"].split("#")
        r_values_dict = dict()

        for v in r_variables.filter():
            r_values_dict["D0elt" + str(v.id)] = None

        for i in range(len(r_values)):
            r_values_dict[r_values_names[i]] = r_values[i]

        r_structures = request.POST.get("struc_selec",'')
        r_period1 = request.POST.get("period1_saisie",'')
        r_period2 = request.POST.get("period2_saisie",'')
        structure = request.POST.get('struc_selec','')

        if not r_structures or not r_period1 or not r_period2:
            messages.info(request,'Renseignez Les Champs Obligatoires')
        
        
            
        # indicateur_id = request.POST['indicateur_id']
        entity = DataSetValue(m_dataset=r_dataset, m_user=r_user, m_period_value=r_period1,
                              m_sub_period_value=r_period2)
        entity.save()
        indicator_values = json.loads(request.POST.get('indicator-values', '[]'))
        indicator_ids = json.loads(request.POST.get('indicator-ids', '[]'))
        for indicator_id in indicator_ids:
            indicator_value = indicator_values.get(indicator_id, None)
            if indicator_value is not None:
                indicateur_value = IndicateurValeur.objects.create(
                type_donnee="valeur_form",
                indicateur_id=indicator_id,
                periode_ok_id=r_period2,
                valeur=indicator_value,structure_id=structure,institution_id=context['actual_institution'].id)
                indicateur_value.save()
                messages.success(request,'Informations Renseignées Avec Succes')

        i = 0
        for v in r_variables.filter():
            dt = DSet_DElt(m_dataelement=v, m_dataset_value=entity,periode_id=r_period2,m_structure_id=structure,
                           m_value=r_values_dict["D0elt" + str(v.id)])  # r_values[i])
            dt.save()
            i += 1
        # for v in r_structures:
        #     stru = Structure.objects.get(id=int(v))
        #     entity.m_structures.add(stru)
        # entity.save()
        response = "/data_form/" + str(r_dataset.id) + "/" + str(0) + "/"
    elif generator == "ieD":
        formula = request.POST["formule"]
        indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
        indicateur.m_datalets_calcul = formula
        indicateur.save()
        response = "/dataelts/indic/"
    elif generator == "pass":
        password = request.POST["password"]
        user = request.user
        user.set_password(password)
        user.save()
        response = "/profile/"
    elif generator == "ind_va":
        entity = EntityType.objects.get(id=int(request.POST["entity_ind_id"]))
        entity.indicateur_fields = request.POST["ind_val"]
        entity.save()
        response = "/configurations/"
    elif generator == "cOi":
        entity = Tache.objects.get(id=request.POST["configOp_id"])
        tA = TacheAggregate.objects.filter(m_tache=entity).first()
        if tA == None:
            tA = TacheAggregate(m_tache=entity)
        i = 1
        for i1 in context["actual_institution"].operations_modules().fields():
            if request.POST["fiel1" + str(i)] not in ["#", "", " "]:
                tA.m_values1 += request.POST["fiel1" + str(
                    i)] + ""
            else:
                tA.m_values1 += "#" + ""
        i = 1
        for i1 in context["actual_institution"].operations_modules().fill_fields_rapp():
            if request.POST["fiel2" + str(i)] not in ["#", "", " "]:
                tA.m_values2 += request.POST["fiel2" + str(
                    i)] + ""
            else:
                tA.m_values2 += "#" + ""
            i += 1
        tA.save()
        response = "/taches/" + str(entity.id)
    return redirect(response)


def planifier2(request, period_id=0):
    template = "webpages/ctn_bpf/plannifier.html"
    annees = set()
    context = basis(request)
    entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
    tasks = entity.lines()

    # actual_period =

    context['searches'] = list()
    context['g_v'] = '1'
    context['institution'] = Institution.objects.last()
    if period_id != 0:
        context['actual_period'] = Institution_Periodes.objects.get(id=int(period_id))
    else:
        period = request.user.personnel.actual_institution.default_period
        institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                            m_periode=period).first()
        context['actual_period'] = institutionPe
    context['taches'] = tasks
    context['ranges'] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
    return render(request, template, context)


def roles(request, search=None):
    template = "webpages/ctn_bpf/roles.html"
    fields_personnel = ['', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', '','sexe']
    fields_roles = ['Role', 'Description', 'Permissions',
                    'Entite']
    personnel = Personnel.objects.filter()
    context = basis(request)
    roles = Role.objects.filter(actual_institution=context['actual_institution']).select_related('actual_institution')
    if search != None:
        roles = roles.filter(nom__contains=search)
    context[
        'entity'] = 'Role'
    context['fields1'] = fields_personnel
    context['personnel'] = personnel
    context['fields'] = fields_roles
    context['lines'] = roles
    context['g_v'] = 'r'
    context['g_vs'] = 'r2'
    return render(request, template, context)


def repartir_tache(request):
    r_tache = request.POST['tache']
    r_roles_tache = request.POST['roles_tache']
    r_personnel_tache = request.POST['personnel_tache']
    roles = r_roles_tache.split("_")
    personnels = r_personnel_tache.split("_")
    r_roles = list()
    r_persos = list()
    for r in roles:
        if r != '':
            r_roles.append(Role.objects.get(id=int(r)))
    for p in personnels:
        if p != '':
            r_persos.append(Personnel.objects.get(id=int(p)))
    tache = Tache.objects.get(id=int(r_tache))
    subject = "Attribution de la Tache"
    message = " Vous avez une Tache qui vouis a ete attribuee"
    email = r_persos[0].mail
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    # send_mail( subject, message, email_from, recipient_list, fail_silently=False)

    repartition = TacheRepartition(m_tache=tache)
    repartition.save()
    repartition.m_personnels.set(r_persos)
    repartition.m_roles.set(r_roles)
    repartition.save()
    return redirect("/gestionnaire/t/")


def modify(request, arg_val=""):
    r_personnel_id = request.POST['personnel']
    r_role_id = request.POST['role']
    personnel = Personnel.objects.get(id=int(r_personnel_id))
    role = Role.objects.get(id=int(r_role_id))
    r_institution = Institution.objects.get(id=int(request.POST['institution']))
    p_f = Personnel_Function(m_personnel=personnel, m_role=role, m_institution=r_institution)
    p_f.save()
    return redirect('/personnels/')


def save_plannify(request):
    tache_id = request.POST['calendar_tache']
    calendar = request.POST['calendar_selected']
    periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
    tache = Tache.objects.get(id=int(tache_id))
    try:
        plani_tche = TachePlannify.objects.filter(m_tache__id=int(tache_id)).first()
        plani_tche.m_planify = calendar
        plani_tche.m_periode = periode
    except:
        plani_tche = TachePlannify(m_tache=tache, m_planify=calendar, m_periode=periode)
    plani_tche.save()
    institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                        m_periode=periode)
    return redirect("/planifier/" + str(institutionPe.first().id) + "/")


# @cache_page(60 * 15)
def operations_home(request, lvl=-1, arg_structure="#", periode="#", search="#", only_not=0):
    template = "webpages/ctn_bpf/index.html"
    context = basis(request)
    if lvl == -1:
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
    else:
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution'],
                                                   m_hierachie=lvl).last().m_entity_type
    lines = entity.lines()
    tache_lvl = entity.is_tache
    if arg_structure not in ["#", '0']:
        tmp_structure = Structure.objects.get(id=int(arg_structure))
        try:
            tmp = list()
            for l in lines:
                if l.structure == tmp_structure:
                    tmp.append(l)
                else:
                    pass
            lines = tmp
            context['arg_structure'] = int(arg_structure)
        except:
            pass
    if periode not in ["#", '0']:
        try:
            tmp = list()
            for t in lines:
                if periode in t.plannification().table():
                    tmp.append(t)
            lines = tmp
        except:
            pass
    if search != "#":
        tmp = list()
        for t in lines:
            if search in t.get_name():
                tmp.append(t)
        lines = tmp
    context['entity'] = entity
    context['sup_entity'] = entity.sup_entity(context['actual_institution'].id)
    context['lines'] = lines
    context['fields'] = entity.fields()
    context['operation'] = 1
    context['personnel'] = Personnel.objects.filter()
    context['menu'] = 'o'
    context['lvl'] = lvl
    context['g_v'] = 'o'
    context['periode'] = periode
    context["tache_lvl"] = tache_lvl

    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


@login_required(login_url='/log_account')
def notifications(request):
    template = "webpages/ctn_bpf/index.html"
    context = basis(request)
    entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
        'm_institution').last().m_entity_type
    lines = list()
    for l in entity.lines():
        if l.progression() < 100:
            operations = l.operations()
            appd = False
            for o in operations:
                if o.personnel == request.user.personnel:
                    lines.append(l)
                    break
    context['notif'] = True
    context['entity'] = entity

    # context['lines'] = lines
    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    context['fields'] = entity.fields()
    context['personnel'] = Personnel.objects.filter()
    context['menu'] = 'o'
    context['g_v'] = 'o'
    return render(request, template, context)


@login_required(login_url='/log_account')
def alert_notifs(request, search=None, tree=None, report=0):
    context = basis(request)
    template = "webpages/ctn_bpf/alert_notifs.html"
    operation_historic = HistoricRACI.objects.all()
    
    personnel=Personnel.objects.filter(actual_institution_id=context['actual_institution'])
    context['personnel']=personnel
    perso = request.user.personnel
    context['report'] = report
    context['operation_historic'] = operation_historic
    structure = Structure.objects.filter(institution_id=context['actual_institution'])
    context['structure'] = structure
    periode_ok = PeriodeOk.objects.all()
    context['periode_ok'] = periode_ok
    repeat_mode = context["actual_institution"].repeat_mode
    dataset=DataSet.objects.filter(m_institution_id = context['actual_institution'])
    context['dataset']=dataset
    if repeat_mode:
        na_class = OperationDetails
        if report == 0:
            main_operations = Operation.objects.filter(personnel=perso.id,
                                                       etat='0')  # .values('m_institution','code','nom','id','date_creation')
        elif report == 1:
            main_operations = na_class.objects.filter(m_operation__accountable=perso.id,
                                                      etat='1')  # .values('m_institution','code','nom','id','date_creation')
        elif report == 2:
            main_operations = na_class.objects.filter(m_operation__consulted=perso.id,
                                                      etat='1')  # .values('m_institution','code','nom','id','date_creation')
        elif report == 3:
            main_operations = na_class.objects.filter(m_operation__informed=perso.id,
                                                      etat='2')  # .values('m_institution','code','nom','id','date_creation')
        elif report == 100:
            main_operations = na_class.objects.filter()
    else:
        na_class = Operation
        if report == 0:
            main_operations = na_class.objects.filter(personnel=perso.id,
                                                      etat='0')  # .values('m_institution','code','nom','id','date_creation')
        elif report == 1:
            main_operations = na_class.objects.filter(accountable=perso.id,
                                                      etat='1')  # .values('m_institution','code','nom','id','date_creation')
        elif report == 2:
            main_operations = na_class.objects.filter(consulted=perso.id,
                                                      etat='0')  # .values('m_institution','code','nom','id','date_creation')
        elif report == 3:
            main_operations = na_class.objects.filter(informed=perso.id,
                                                      etat='2')  # .values('m_institution','code','nom','id','date_creation')
        elif report == 100:
            main_operations = na_class.objects.filter()
    bool(main_operations)
    if repeat_mode and report != 0:
        tmp = list()
        for n in main_operations:
            tmp.append(n.m_operation.id)
        main_operations = Operation.objects.filter(id__in=tmp)

    main_operations = main_operations.order_by('-date_creation')
    if tree == '1':
        entHidden = request.POST["entHidden"]
        context["entHidden"] = entHidden.split("#")
        main_operations = main_operations.filter(code__contains=entHidden)
    tmp = list()
    try:
        n = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).count()
    except:
        n = 0

    for i in range(n):
        tmp.append(set())

    for o in main_operations:
        if o.code != None:
            o2 = o.code.split("#")
            try:
                for i in range(n):
                    tmp[i].add(o2[i])
            except:
                pass

    ents = list()
    for i in range(n):
        try:
            ents.append({
                "hierachie": i,
                'entities': Entity.objects.filter(id__in=list(tmp[i]))
            })
        except:
            pass
    context['ents'] = ents
    context['n'] = n

    main_operations2 = OperationRole.objects.filter(m_personnel=perso.id).values('m_operation')
    context['main_operations2'] = main_operations2
    # operations = perso.get_taches() #get_operations()

    results = list()
    results = list(main_operations)
    """
	for o in operations:
		if o.progression() == 0 and o.rapported() in ['0',None] :
			results.append(o)
	"""
    paginator_o = Paginator(results, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['menu'] = 'aN'
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    context['lines'] = context['pages_o']
    # operations=Operation.objects.all()
    for operation in context['pages_o']:
        operation.has_dataset= operation.dataset.exists()
    return render(request, template, context)


def save_rapport(request):
    context = basis(request)
    r_operation = Operation.objects.get(id=int(request.POST['operation_id']))
    actual_institution = context['actual_institution']

    r_operation.etat = "1"

    if request.POST['finances']:
        try:
            r_operation.montant3 = float(request.POST['finances'])
        except ValueError:
            r_operation.montant3 = 0
    else:
        r_operation.montant3 = 0

    r_operation.save()

    if request.method == "POST":
        operation_comm = request.POST.get('operation_comm')
        operation_raci = HistoricRACI.objects.create(m_commentaire=operation_comm,
                                                     m_operation_id=request.POST['operation_id'], m_role="R")
        operation_raci.save()
        if context["actual_institution"].repeat_mode == True:
            r_operation = OperationDetails(m_operation=r_operation)
            r_operation.personnel = request.user.personnel
            r_operation.m_institution_id = actual_institution
            r_operation.save()
            fil_class = OperationDetailsFile
    else:
        fil_class = OperationFile
    try:
        r_commentaire = request.POST['operation_comm']
    except:
        r_commentaire = None
    try:
        r_fichier = request.FILES['operation _fichier']
    except:
        r_fichier = None
    if context['actual_institution'].default_options != True:
        rapport_input = request.POST['rapport_input']
        rapport_values = request.POST['rapport_values']
        try:
            aggregates = context['actual_institution'].operations_modules().type_fields_rapported()
            aggs_fields = context['actual_institution'].operations_modules().fields_rapported()
        except:
            aggregates = list()
        i = 1
        for a in aggregates:
            if a == 'file':
                delet = fil_class.objects.filter(m_field=aggs_fields[(i - 1)], operation=r_operation)
                delet.delete()
                oF = fil_class.objects.create(m_field=aggs_fields[(i - 1)], operation=r_operation)
                try:
                    oF.m_file = request.FILES['file_r' + str(i)]
                except:
                    pass
                oF.save()
            i += 1
        r_operation.m_value_reported = rapport_values
        r_operation.etat = '1'
        r_operation.date_rapported = datetime.datetime.now()
        r_operation.m_commentaire = r_commentaire
        r_operation.save()
    else:
        r_operation.etat = '1'
        rapport_input = request.POST['rapport_input']
        if rapport_input != 'c':
            rapport = OperationRapport(operation_id=r_operation, commentaire=r_commentaire)
        else:
            # r_nom = request.POST['operation_nom']
            rapport = OperationRapport(piece_jointe=r_fichier, operation_id=r_operation, commentaire=r_commentaire)
            # r_operation.etat = '1' #nom_piece_jointe=r_nom
            periode = r_operation.periodes()
            desc_tmp = periode.desc_split()
            desc_tmp.append("")
            index = 0
            for i in desc_tmp:
                if i == '9':
                    pass
                elif i == '0':
                    desc_tmp[index] = '1'
                    rapport.period = index
                    rapport.save()
                    request.session['new_rapport'] = 1
                    break
                elif i == '1':
                    request.session['have_to_done'] = 1
                    break
                index += 1
            desc_tmp = "_".join(desc_tmp)

            periode.m_desc_realisation = desc_tmp
            periode.save()
    try:
        finances = request.POST["finances"]
        r_operation.montant2 = int(finances)
    except:
        r_operation.montant2 = 0
    r_operation.save()
    request.session['new_rapport'] = 1
    try:
        operation = r_operation
        peA = None
        tmps = [operation.accountable, operation.consulted]
        message_context1 = {
            'operation': operation,
            'role': 'A',
            'commentaires': r_commentaire,
            'lien': "/decision/o/" + str(operation.id) + "/",
            'institution': operation.institution()
        }
        message_context2 = {
            'operation': operation,
            'role': 'C',
            'commentaires': r_commentaire,
            'lien': "/decision/o/" + str(operation.id) + "/",
            'institution': operation.institution()
        }

        subject = str(operation) + " - attente de validation"
        message1 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context1)
        message2 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context2)
        recipient_list1 = [operation.accountable.bd_user.email, ]
        if operation.consulted != None:
            recipient_list2 = [operation.consulted.bd_user.email, ]
        else:
            recipient_list2 = list()
        email_from = settings.EMAIL_HOST_USER
        msg1 = EmailMessage(subject, message1, email_from, recipient_list1)
        msg1.content_subtype = 'html'
        msg2 = EmailMessage(subject, message2, email_from, recipient_list2)
        msg2.content_subtype = 'html'
        try:
            if r_fichier != None:
                msg1.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
                msg2.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
            msg1.send()
            msg2.send()
        except:
            pass
    except:
        pass
    response = redirect('/alert_notifs/0/0/')
    return response


def assign_supervisor(request):
    tache = Tache.objects.get(id=int(request.POST["assign"]))
    supervisor = Personnel.objects.get(id=int(request.POST['perso']))
    tache.superviseur = supervisor
    tache.save()
    return redirect('/gestionnaire/t/')



def valid_rapport(request):
    opera_valider_id = request.POST['opera_valider_id']
    operation = Operation.objects.get(id=int(opera_valider_id))
    context = basis(request)
    actual_institution = context['actual_institution']
    try:
        operation_rapport = request.POST["operation_rapport"]
        operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
        operation_rapport.etat = "2"
        operation_rapport.m_institution_id = actual_institution
        operation_rapport.save()
        operation.montant2=request.POST['montant2']
        numero = request.POST['numero']
        operation.etat = '2'
        operation.statut = '1'
        operation.save()
    except:
        operation.etat = '2'

    index = 0
    if request.method == "POST":
        m_commentaire = request.POST.get('opera_valider_comment')
        file = request.POST.get('file')
        # date_realisation = date.today()
        # date_realisation = datetime.today().date()
        save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
                                                    m_operation_id=request.POST['opera_valider_id'], m_role='A')
        save_historic.save()
        operation_rapports=OperationRapport.objects.create(piece_jointe=file,operation_id=request.POST['opera_valider_id'])
        operation_rapports.save()
          
    # if defaulted configurations
    try:
        periode = operation.periodes()
        desc_tmp = periode.desc_split()
        desc_tmp.append("")
        for i in desc_tmp:
            if i in ['9', '0']:
                pass
            elif i == '1':
                desc_tmp[index] = '2'
                request.session['validation_done'] = 1
                break
            index += 1
        desc_tmp = "_".join(desc_tmp)
        periode.m_desc_realisation = desc_tmp
        periode.save()
    except:
        pass
    operation.save()

    subject = " Evolution " + str(operation)
    message_context = {
        'operation': operation,
    }
    message = render_to_string('webpages/ctn_bpf/mails/inform_evolution.html', message_context)

    email_from = settings.EMAIL_HOST_USER
    recipient_list = [operation.personnel.bd_user.email, ]
    if operation.informed != None:
        recipient_list.append(operation.informed.bd_user.email)
    msg = EmailMessage(subject, message, email_from, recipient_list)
    msg.content_subtype = 'html'
    try:
        msg.send()
        send = '0'
    except:
        send = '1'

    return redirect('/operations/')



def in_valid_rapport(request):
    opera_invalider_id = request.POST['opera_invalider_id']
    commentaire = request.POST["opera_invalider_comment"]
    operation = Operation.objects.get(id=int(opera_invalider_id))
    operation.etat = '0'
    periode = operation.periodes()
    desc_tmp = periode.desc_split()
    desc_tmp.append("")
    try:
        operation_rapport = request.POST["operation_rapport"]
        operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
        operation_rapport.etat = 0
        operation_rapport.save()  #:save()
    except:
        operation_rapport.etat = 0
        pass
    index = 0
    if request.method == "POST":
        m_commentaire = request.POST.get('opera_invalider_comment')
        # date_realisation = date.today()
        # date_realisation = datetime.today().date()
        save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
                                                    m_operation_id=request.POST['opera_invalider_id'], m_role='A')
        save_historic.save()
    for i in desc_tmp:
        if i in ['1']:
            desc_tmp[index] = '0'
            request.session['validation_done'] = 1
        index += 1
    desc_tmp = "_".join(desc_tmp)
    periode.m_desc_realisation = desc_tmp
    periode.save()
    operation.save()
    message_context = {
        'operation': operation,
        'commentaire': commentaire
    }

    subject = " Rapport non Valide"
    message = render_to_string('webpages/ctn_bpf/mails/operation_invalid.html', message_context)
    email = operation.personnel.bd_user.email
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    msg = EmailMessage(subject, message, email_from, recipient_list)
    msg.content_subtype = 'html'
    try:
        msg.send()
        send = '0'
    except:
        send = '1'

    return redirect('/operations/')


def delete(request):
    id_entity = request.POST['id_entity']
    generator = request.POST['generator']
    try:
        force = False
        if generator == 'o':
            entity = Operation.objects.get(id=int(id_entity))
            response = redirect('/taches/' + str(entity.tache.id) + '/')
        elif generator == 'eD':
            entity = DataElement.objects.get(id=int(id_entity))
            response = redirect('/dataelts/')
        elif generator == 'p2':
            entity = Personnel.objects.get(id=int(id_entity))
            response = redirect('/personnels/')
        elif generator == 'r':
            entity = Role.objects.get(id=int(id_entity))
            response = redirect('/roles/')
        elif generator == 's':
            entity = Structure.objects.get(id=int(id_entity))
            response = redirect('/structures/')
        elif generator == 'e':
            entity = InsitutionEntities.objects.get(id=int(id_entity))
            hierachie = entity.m_hierachie
            institution = entity.m_institution
            to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
            for d in to_decaler:
                d.m_hierachie -= 1
                d.save()
            response = redirect('/configurations/')
            entity = entity.m_entity_type
        elif generator == 'i2':
            entity = Indicateur.objects.get(id=int(id_entity))
            response = redirect('/evaluer/' + str(entity.m_enti.m_type_entity.hierachie()))
        elif generator == 'iF3':
            entity = IndicateurVal.objects.get(id=int(id_entity))
            sup = entity.m_indicateur.m_enti
            try:
                s_sup = sup.sup_entity().id
                sup_hierachie = sup.m_type_entity.hierachie()

                response = redirect('/data_form/' + str(sup_hierachie) + '/' + str(s_sup) + '/')
            except:
                response = redirect('/data_form/-1/0/')
        elif generator == 'y':
            entity = Institution_Periodes.objects.get(id=int(id_entity))
            response = redirect('/configurations/')
        elif generator == 'z':
            entity = SubPeriode.objects.get(id=int(id_entity))
            response = redirect('/configurations/')
        elif generator == 'p2_RACI':
            entity = PersonnelRACI.objects.get(id=int(id_entity))
            response = redirect('/personnels_raci/')
        elif generator == "dSV":
            entity = DataSet.objects.get(id=int(id_entity))
            response = redirect("/data_form/-1/0/")
        else:
            hierachie = int(request.POST['hierachy'])
            try:
                base_val = int(request.POST["base_val"])
            except:
                base_val = "0"
            if base_val not in ['', '0', None]:
                response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
            else:
                response = "/gestionnaire/" + str(hierachie) + "/"

            entity = Entity.objects.get(id=int(id_entity))
            response = redirect(response)
        entity.delete()
    except ProtectedError:
        # render the template with your message in the context
        # or you can use the messages framework to send the message:
        template = "webpages/ctn_bpf/error_delete.html"
        context = basis(request)
        entity = Entity.objects.filter(id=int(id_entity)).first()
        if entity != None:
            context["entity"] = entity
            tmp_hierachie = entity.m_type_entity.hierachie()
            context['hierachie'] = tmp_hierachie
            if entity.m_type_entity.is_tache == True:
                subs = context["actual_institution"].operations_name
            else:
                tmp_hierachie += 1
                subs = InsitutionEntities.objects.filter(m_institution=context["actual_institution"],
                                                         m_hierachie=tmp_hierachie).first()
            context['subs'] = subs
            context['element'] = 1
        response = render(request, template, context)
    return response


def ajax_lines(request):
    type_search = request.GET.get('type_search')
    value_search = request.GET.get('value_search')
    sub_search = request.GET.get('sub_search')
    results = list()
    lines = list()
    progressions = list()
    lines_count = 0

    if value_search != "|":
        results = objets[type_search].objects.filter(nom__contains=value_search)
    else:
        pass

    if type_search == 'o':
        for r in results:
            progressions.append(r.progression())
            lines.append(r.nom + "|" + str(r.personnel) + "|" + str(r.montant) + "|" + r.semaines + "|")

    lines_count = results.count()
    data = {
        'progressions': progressions,
        'lines': lines,
        'lines_count': lines_count
    }
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def configurations(request):
    template = "webpages/ctn_bpf/configurations.html"
    context = basis(request)
    context['institution'] = request.user.personnel.actual_institution
    context['menu'] = 'c'
    context['g_v'] = 'e'
    context['basis_periodes'] = Periode.objects.filter(m_initial=True)
    return render(request, template, context)


def profile(request):
    template = "webpages/ctn_bpf/profile.html"
    context = basis(request)
    context['institution'] = context['actual_institution']
    context["personnel"] = request.user.personnel
    return render(request, template, context)


def filter_op_search(request):
    search = request.POST['search']
    return filter_op(request, search)


def filter_op(request, search="#"):
    try:
        niveau = int(request.POST['niveau'])
        periode = request.POST['periode']
        structure = request.POST['structure']
    except:
        niveau = -1
        periode = "#"
        structure = "#"
    try:
        only_not = int(request.POST["only_not"])
    except:
        only_not = 0
    return operations_home(request, niveau, structure, periode, search, only_not)


# def notifs(request):
#     user_id = request.GET.get('value')
#     insti_id = request.GET.get('institution')
#     actual_institution = Institution.objects.get(id=int(insti_id))
#     perso = Personnel.objects.get(bd_user__id=int(user_id))
#     if actual_institution.repeat_mode == False:
#         operations1 = list()
#         operations = Operation.objects.filter(personnel=perso)
#         operations_report = Operation.objects.filter(accountable=perso, etat='1')
#         count_is_consulted = Operation.objects.filter(consulted=perso, etat='1').count()
#         count_is_informed = Operation.objects.filter(informed=perso, etat='2').count()


#     else:
#         operations1 = Operation.objects.filter(personnel=perso)
#         operations = OperationDetails.objects.filter(m_operation__personnel=perso)
#         operations_report = OperationDetails.objects.filter(m_operation__accountable=perso, etat='1')
#         count_is_consulted = OperationDetails.objects.filter(m_operation__consulted=perso, etat='1').count()
#         count_is_informed = OperationDetails.objects.filter(m_operation__informed=perso, etat='2').count()

#     # General_Results
#     nb_taches = 0
#     nb_have_rapported = 0
#     nb_is_done = 0
#     nb_have_to_do = 0
#     nb_observations = 0

#     nb_have_rapported2 = 0
#     nb_is_done2 = 0
#     nb_have_to_do2 = 0
#     nb_observations2 = 0
#     if True:
#         for o in operations1:
#             if o.etat == '0':
#                 nb_have_to_do += 1
#                 nb_taches += 1
#                 if o.institution() == actual_institution:
#                     nb_have_to_do2 += 1
#         for o in operations:
#             if o.etat == '1':
#                 nb_have_rapported += 1
#                 if o.institution() == actual_institution:
#                     nb_have_rapported2 += 1
#             else:
#                 nb_is_done += 1
#                 if o.institution() == actual_institution:
#                     nb_is_done2 += 1

#         for o in operations_report:
#             nb_observations += 1
#             if o.institution() == actual_institution:
#                 nb_observations2 += 1

#     data = {
#         'result': nb_taches,
#         'have_to_done': nb_have_to_do,
#         'is_done': nb_is_done,
#         'have_rapported': nb_have_rapported,
#         'have_to_done2': nb_have_to_do2,
#         'is_done2': nb_is_done2,
#         'have_rapported2': nb_have_rapported2,
#         'nb_observations': nb_observations,
#         'nb_observations2': nb_observations2,
#         'count_is_consulted': count_is_consulted,
#         'count_is_informed': count_is_informed
#     }
#     # entities = institution.get_entities()
#     indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution).count()
#     data["indi_total"] = indicateurs_all
#     return JsonResponse(data)


def indicateurs_ajax(request):
    actual_institution = request.GET.get("institution")
    actual_year = request.GET.get("actual_year")

    try:
        entity_type = int(request.GET.get("entity_type"))
        type_indic = request.GET.get("type_indic")
    except:
        entity_type = None

    try:
        id_entity = int(request.GET.get("id_entity"))
        id_entity = Entity.objects.get(id=id_entity)
    except:
        id_entity = None

    if entity_type == None:
        if id_entity != None:
            indicateurs_all = Indicateur.objects.filter(m_enti=id_entity)
        else:
            indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution)
        nb_all = indicateurs_all.count()
        indicateurs_renseignes = list()
        nb_renseignes = 0

        for i in indicateurs_all:
            if i.actu_value != None:
                indicateurs_renseignes.append(i)
                nb_renseignes += 1

        indicateurs_values = list()
        cibles = list()
        for i in indicateurs_renseignes:
            cibles.append(i.get_cibles(actual_year))
            indicateurs_values.append(i.actu_value())
        data = {
            'all': nb_all,
            'nb_renseignes': nb_renseignes,
            'cibles': cibles,
            'indicateurs_values': indicateurs_values
        }
    elif type_indic == "F":
        if id_entity == None:
            eT = EntityType.objects.filter(id=entity_type).first()
            entities = eT.lines()
        else:
            eT = id_entity.m_type_entity
            entities = id_entity.sub_entities()
        resul1 = list()
        resul2 = list()
        for e in entities:
            try:  # it may be Operation
                operations = e.operations()
                if eT.is_tache == False:
                    taches = e.taches()
                else:
                    taches = [e]
                tmp = 0
                tmp2 = 0
                for t in taches:
                    if t.montant != None:
                        tmp += int(t.montant)
                for o in operations:
                    tmp2 += int(o.montant2)
                resul1.append(tmp)
                resul2.append(tmp2)
            except:
                pass

        data = {
            'list_montant1': resul1,
            'list_montant2': resul2
        }
        entq = list()
        entq_id = list()
        for e in entities:
            entq.append(str(e))
            entq_id.append(str(e.id))
        data['entities'] = entq
        data["entities_id"] = entq_id
    else:
        if id_entity == None:
            eT = EntityType.objects.filter(id=entity_type).first()
            entities = eT.lines()
        else:
            entities = [id_entity]
        indicateurs_all = Indicateur.objects.filter(m_enti__in=entities)
        ens = dict()
        ens_good = dict()
        ens_bad = dict()
        nbE = indicateurs_all.count()
        for i in entities:
            ens[str(i.id)] = 0
            ens_good[str(i.id)] = 0
            ens_bad[str(i.id)] = 0

        for i in indicateurs_all:
            ens[str(i.m_enti.id)] += 1
            try:
                if int(i.get_cibles(actual_year)) > int(i.actu_value()):
                    ens_bad[str(i.m_enti.id)] += 1
                else:
                    ens_good[str(i.m_enti.id)] += 1
            except:
                pass

        if nbE > 0:
            for i in entities:
                ens[str(i.id)] = ens[str(i.id)]  # *100/nbE
                ens_good[str(i.id)] = ens_good[str(i.id)]  # *100/nbE
                ens_bad[str(i.id)] = ens_bad[str(i.id)]  # *100/nbE

        list_ens = list()
        list_ens_good = list()
        list_ens_bad = list()
        for i in entities:
            list_ens.append(ens[str(i.id)])
            list_ens_good.append(ens_good[str(i.id)])
            list_ens_bad.append(ens_bad[str(i.id)])
        data = {
            'list_ens': list_ens,
            'list_ens_good': list_ens_good,
            'list_ens_bad': list_ens_bad
        }
        entq = list()
        entq_id = list()
        for e in entities:
            entq.append(str(e))
            entq_id.append(str(e.id))
        data['entities'] = entq
        data["entities_id"] = entq_id
    return JsonResponse(data, safe=False)


def institutions(request, search=None):
    template = "webpages/ctn_bpf/institution.html"
    context = basis(request)
    institutions1 = list()
    structures = Personnel_Structure.objects.filter(m_personnel=request.user.personnel)
    for s in structures:
        if s.m_structure.institution not in institutions1:
            institutions1.append(s.m_structure.institution)
    for i in Institution.objects.filter(owner__m_user__id=request.user.id):
        if i not in institutions1:
            institutions1.append(i)
    if search != None:
        tmp = institutions1
        institutions1 = list()
        for i in tmp:
            if search in i.nom or search in i.sigle:
                institutions1.append(i)
    institutions1 = sorted(institutions1, key=lambda t: t.sigle)
    paginator_o = Paginator(institutions1, 12)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['institutions1'] = elements_page
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    context['menu'] = 'i'
    return render(request, template, context)


def set_institution(request, institution_id):
    institution = Institution.objects.get(id=institution_id)
    request.user.personnel.actual_institution = institution
    request.user.personnel.save()
    return redirect("/")


def operations_details_list(request, operation_id):
    template = "webpages/ctn_bpf/operations_details_list.html"
    context = basis(request)
    operation = Operation.objects.get(id=operation_id)
    context["operation"] = operation
    return render(request, template, context)


def operations_details(request, operation_id):
    template = "webpages/ctn_bpf/operations_details.html"
    context = basis(request)
    operations_details_file=OperationFile.objects.all()
    context['operations_details_file']=operations_details_file
    dataset=DataSet.objects.filter(m_institution_id=context['actual_institution'])
    context['dataset'] = dataset
    periode=Periode.objects.all()
    context['periode']=periode
    periode_ok=PeriodeOk.objects.all()
    context['periode_ok']=periode_ok
    structure_s=Structure.objects.all()
    context['structure_s']=structure_s
    operation = Operation.objects.get(id=operation_id)
    actual_institution = context['actual_institution']
   
    linked_dataset = operation.dataset.all()
    context['linked_dataset'] = linked_dataset
    if operation.institution() != context['actual_institution']:
        request.user.personnel.actual_institution = operation.institution()
        request.user.personnel.save()
        context = basis(request)
    lines = list()

    tache = operation.tache
    if actual_institution.default_options != True:
        try:
            i = 0
            for th in actual_institution.operations_modules().fill_fields_rapp():
                a = th
                if a["type"] == "choix":
                    a["extras"] = operation.get_value(a["field"])
                lines.append(a)
            aggs2 = tache.aggregates2()
            for a in aggs2:
                lines[i]["field"] = a
                i += 1
        except:
            pass
    context["lines"] = lines

    tache = operation.tache
    context['operation'] = operation
    context['tache'] = tache
    context['institutions'] = Institution.objects.filter()
    context['menu'] = 'o'
    return render(request, template, context)


def history(request, dates="#"):
    template = "webpages/ctn_bpf/history.html"
    context = basis(request)
    operation_rapport=OperationRapport.objects.all()
    context['operation_rapport']=operation_rapport
    operation=Operation.objects.filter(m_institution_id=context['actual_institution'],etat="2")
    context['operation']=operation

    personnel=Personnel.objects.filter(actual_institution_id=context['actual_institution'])
    context['personnel']=personnel
    categorie = Categorie.objects.filter(institution_id=context['actual_institution'])
    context['categorie']=categorie

    sous_categorie= Sous_categorie.objects.filter(institution_id=context['actual_institution'])
    context['sous_categorie'] = sous_categorie
    entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
        'm_institution').last().m_entity_type
    tasks = entity.lines()
    if context['actual_institution'].default_options == True:
        context['fields'] = [entity.m_nom, 'Operation', 'Personnel', 'Rapport Technique', 'Date']
        unsorted_results = list()
        for t in tasks:
            for o in t.operations():
                aka = OperationRapport.objects.filter(operation__id=o.id)
                for o2 in aka:
                    unsorted_results.append(o2)
    else:
        if context["actual_institution"].repeat_mode == True:
            template = "webpages/ctn_bpf/history_rapport.html"
            tasks = context["actual_institution"].taches()
            context["taches"] = tasks

            context['menu'] = 'h'
            # context['dates'] = dates
            paginator_o = Paginator(tasks, 10)
            page_number_o = request.GET.get('page')
            elements_page = paginator_o.get_page(page_number_o)
            # oeuvres_date
            context['pages_o'] = elements_page
            context['num_pages'] = paginator_o.num_pages
            context['page_range'] = paginator_o.page_range
            """
			paginator_o = Paginator(sorted_result,10)
			page_number_o = request.GET.get('page')
			elements_page = paginator_o.get_page(page_number_o)
			#oeuvres_date
			context['pages_o']=elements_page
			context['num_pages']=paginator_o.num_pages
			context['page_range']=paginator_o.page_range
			"""
        else:
            tmpas = context['actual_institution'].operations_modules().fill_fields_rapp()
            aggregates = list()
            for t in tmpas:
                if t['type'] == 'choix':
                    aggregates.append(t['extras'])
                else:
                    aggregates.append(t['field'])
            context['fields'] = [entity.m_nom, context['actual_institution'].operations_name] + aggregates + [
                'Personnel', 'Date']

            unsorted_results = list()
            for t in tasks:
                for o in t.operations():
                    unsorted_results.append(o)

            sorted_result = sorted(unsorted_results, key=lambda t: t.date_creation)
            if dates != "#":
                start_date = request.POST['start_date']
                end_date = request.POST['end_date']
                context['start_date'] = start_date
                context['end_date'] = end_date

                start_date = start_date.split("-")
                end_date = end_date.split("-")
                start_date = [int(elt) for elt in start_date]
                end_date = [int(elt) for elt in end_date]

                result = list()
                for t in sorted_result:
                    start_date_cmp = start_date == list() or (
                                t.date_creation.year > start_date[0] or t.date_creation.year == start_date[
                            0] and t.date_creation.month > start_date[1] or t.date_creation.year == start_date[
                                    0] and t.date_creation.month == start_date[1] and t.date_creation.day >= start_date[
                                    2])
                    end_date_cmp = end_date == list() or (
                                t.date_creation.year < end_date[0] or t.date_creation.year == end_date[
                            0] and t.date_creation.month < end_date[1] or t.date_creation.year == end_date[
                                    0] and t.date_creation.month == end_date[1] and t.date_creation.day <= end_date[2])

                    if start_date_cmp and end_date_cmp:
                        result.append(t)
            sorted_result = result

            context['lines'] = sorted_result
            context['nb_lines'] = len(sorted_result)
            context['institutions'] = Institution.objects.filter()
            context['menu'] = 'h'
            context['dates'] = dates
            paginator_o = Paginator(sorted_result, 10)
            page_number_o = request.GET.get('page')
            elements_page = paginator_o.get_page(page_number_o)
            # oeuvres_date
            context['pages_o'] = elements_page
            context['num_pages'] = paginator_o.num_pages
            context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def calendar(request):
    template = "webpages/ctn_bpf/agenda_week.html"
    context = basis(request)
    return render(request, template, context)


def save_period(request):
    institution = request.POST['institution']
    periode = request.POST['periode']
    decoupage = request.POST['decoupage']
    edit_or_create = request.POST['edit_or_create']
    try:
        big_period = request.POST["big_periode"]
        sub_period = 0
    except:
        sub_period = None
    if sub_period != None:
        r_big_period = Periode.objects.get(id=int(big_period))
        sub_period = request.POST["sub_period"]
        details = request.POST["details"]
        if edit_or_create != 'e':
            r_sub_period = SubPeriode(m_periode=r_big_period, m_sub_value=periode, m_decoupage=decoupage,
                                      m_decoupage_description=details)
        else:
            edit_id = request.POST['edit_id']
            r_sub_period = SubPeriode.objects.get(id=int(edit_id))
            r_sub_period.m_periode = r_big_period
            r_sub_period.m_sub_value = periode
            r_sub_period.m_decoupage = decoupage
            r_sub_period.m_decoupage_description = details
        r_sub_period.save()
    else:
        if edit_or_create != 'e':
            r_period = Periode(m_value=periode, m_decoupage=decoupage)
        else:
            edit_id = request.POST['edit_id']
            r_period = Periode.objects.get(id=int(edit_id))
            r_period.m_value = periode
            r_period.m_decoupage = decoupage
        r_period.save()
        if edit_or_create != 'e':
            institution = Institution.objects.get(id=int(institution))
            i_periode = Institution_Periodes(m_institution=institution, m_periode=r_period)
            i_periode.save()
    return redirect("/configurations/")


def ajax_graphiques(request):
    data = dict()
    id_tache = int(request.GET.get('id_graph'))
    type_graph = request.GET.get('type_graph')
    nature_graph = int(request.GET.get('nature_graph'))
    inst_graph = Institution.objects.get(id=int(request.GET.get('inst_graph')))
    actual_config = inst_graph.default_options

    if nature_graph != -1:
        element = InsitutionEntities.objects.filter(m_institution=inst_graph,
                                                    m_hierachie=nature_graph).first().m_entity_type
    else:
        element = InsitutionEntities.objects.filter(m_institution=inst_graph).last().m_entity_type

    if element.is_tache:
        entity = Tache.objects.get(id=id_tache)
        operations = entity.operations()
        nb_operations = len(operations)
    else:
        entity = Entity.objects.get(id=id_tache)

    if type_graph == 'eT':
        if element.is_tache:
            tache_tmp = Tache.objects.get(id=entity.id)
            plansT = list()
            for p in tache_tmp.plannification().table():
                plansT.append(p)
            x_abcisses = list()
            for p in plansT:
                for xi in inst_graph.default_subperiod.decoup_desc_slip2():
                    x_abcisses.append(str(p) + "-" + str(xi))

            # Matrice des mois
            result = list()

            x_interval = tache_tmp.plannification().table()
            operations = tache_tmp.operations()
            nb_operations = operations.count()
            tmp_sum = 0
            nb_x_abcisses = 0
            tmp_dict = list()
            for x in x_interval:
                # tmp_sum = 0
                operations_2 = operations.filter(m_tache_plannification=x)
                all_dict = list()
                for op in operations_2:
                    x_dict = list()
                    for t in op.periodes().desc_split():
                        x_dict.append(0)
                    i_x_d = 0

                    for t in op.periodes().desc_split():
                        if actual_config == True:
                            if t == '2':
                                tmp_val = 100
                            else:
                                tmp_val = 0
                        else:
                            if t != '9':
                                ds = {'0': 0, '1': 0, '2': 100}
                                tmp_val = ds[op.etat]
                            else:
                                tmp_val = 0

                        x_dict[i_x_d] += tmp_val
                        i_x_d += 1
                    all_dict.append(x_dict)
                # all_dict contient la matrice d'un mois i)

                tmp_dict_result = list()
                if operations_2.first() != None:
                    for t in operations_2[0].periodes().desc_split():
                        tmp_dict_result.append(0)
                    for a_dict in all_dict:
                        ia = 0
                        for a in a_dict:
                            tmp_dict_result[ia] += a
                            ia += 1
                tmp_dict += tmp_dict_result
            result_tmp = 0
            result = list()
            for t in tmp_dict:
                result_tmp += t
                result.append((result_tmp / nb_operations))
        else:
            x_abcisses = inst_graph.default_period.decoup_slip()
            tmp = list()
            taches = entity.taches()
            discovered = list()
            index_tmp = 0
            nb_taches = len(taches)
            for x in x_abcisses:
                tmp.append(0)
                for t in taches:
                    if x in t.plannification().table() and t not in discovered:
                        tmp[index_tmp] += t.progression()
                        discovered.append(t)
                index_tmp += 1
            y_abcisses = list()
            for y in range(index_tmp):
                if nb_taches > 0:
                    y_abcisses.append((tmp[y] / nb_taches))
                else:
                    y_abcisses.append(0)
            result = list()
            rst = 0
            for y in y_abcisses:
                rst += y
                result.append(rst)
    elif type_graph == 'p':
        x_abcisses = set()
        result_x = list()
        y_abcisses = list()
        for o in operations:
            x_abcisses.add(o.personnel)
        for perso in x_abcisses:
            y_abcisses.append(perso.progression_taches(inst_graph))
        for x in x_abcisses:
            result_x.append(str(x))
        x_abcisses = result_x
        result = y_abcisses
    elif type_graph == 't':
        x_abcisses = list()
        result = list()
        subs = entity.sub_entities()
        try:
            sub_name = str(subs[0].m_type_entity)
        except:
            sub_name = " "
        i = 0
        for x in subs:
            result.append(x.progression())
            x_abcisses.append(str(x))
            i += 1
        data['nb_sub'] = i
        data['sub_names'] = sub_name
    data['x_abcisses'] = x_abcisses
    data['y_abcisses'] = result
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def decision(request, nature="#", operation_id=0, operation_rapport_id=None):
    context = basis(request)
    if nature == "o":
        template = "webpages/ctn_bpf/decision_rapport.html"
        operation = Operation.objects.get(id=operation_id)
      
        if operation.institution() != context["actual_institution"]:
            institution = operation.institution()
            request.user.personnel.actual_institution = institution
            request.user.personnel.save()
            context = basis(request)

        if context["actual_institution"].repeat_mode == True:
            template = "webpages/ctn_bpf/decision_rapport.html"
            operation_historic = HistoricRACI.objects.all()
            context['operation_historic'] = operation_historic
            dataset=DataSet.objects.all()
            context['dataset']=dataset
            data_operations=operation.dataset.all()
            context['data_operations'] = data_operations
            structure = Structure.objects.all()
            context['structure'] = structure
            periode = Periode.objects.all()
            context['periode'] = periode
            periode_ok = PeriodeOk.objects.all()
            nature_operation = NatureOperation.objects.filter(institution=context['actual_institution'])
            context['nature_operation'] = nature_operation
            categorie_operation = CategorieOperation.objects.filter(institution=context['actual_institution'])
            context['categorie_operation'] = categorie_operation
            context['periode_ok'] = periode_ok
            if operation_rapport_id == None:
                operation_rapport = operation.get_operation_details_invalid().last()
                context["operation_rapport"] = operation_rapport

        context['operation'] = operation
        context['tache'] = operation.tache
    else:
        context["entity"] = Entity.objects.get(id=int(element_id))
        template = "webpages/ctn_bpf/decision_plus.html"

    return render(request, template, context)


#
# def get_elements(request):
#     # Elements can be Entity, Forms
#     if True:  # try:
#         other_limk = request.GET.get("other")
#         institution = Institution.objects.get(id=int(request.GET.get('institution')))
#         if other_limk == "dS":
#             dSs = DataSet.objects.filter(m_institution=institution)
#             data = {
#                 "datasets": list(),
#                 "datasets_id": list()
#             }
#             for d in dSs:
#                 data["datasets"].append(str(d))
#                 data["datasets_id"].append(str(d.id))
#         elif other_limk == "dE_code":
#             data = dict()
#             codes = request.GET.get("codes").split("#")
#             result = list()
#             codes_replace = list()
#             for code in codes[:-1]:
#                 res = list()
#                 j = 0
#                 n = len(code)
#                 while j < n:
#                     if code[j] == "$":
#                         j += 1
#                         k = j
#                         while code[j] != "$":
#                             j += 1
#
#                         res.append(code[k:j])
#                         j += 2
#                     else:
#                         j += 1
#                 tmp_res = list()
#                 tmp_res2 = list()
#                 for r in res:
#                     tmp_res.append(str(DataElement.objects.get(id=int(r))))
#                     tmp_res2.append(r)
#                 result.append(tmp_res)
#                 codes_replace.append(tmp_res2)
#             data["data_elts"] = result
#             data["codes_replace"] = codes_replace
#         elif other_limk == "dI_formula":
#             values = request.GET.get("value").split("#")
#             data_elts = DataSet.objects.get(id=int(request.GET.get("dataset")))
#             result_formula = list()
#             for v in values[:-1]:
#                 ind = Indicateur.objects.get(id=int(v))
#                 result_formula.append(ind.m_numerateur)
#             data = dict()
#             data["data_elts"] = data_elts.join_dataelts()
#             data["formulas"] = result_formula
#     else:  # except:
#         value = int(request.GET.get('value'))
#         nature = int(request.GET.get('nature'))
#         institution = Institution.objects.get(id=int(request.GET.get('institution')))
#         entity_type = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=institution).select_related(
#             'm_institution').first().m_entity_type
#         # entity to upload
#         entity = Entity.objects.get(id=value)
#         default_fields = entity_type.fields()
#         default_fields_type = entity_type.type_fields()
#         default_fields_values = entity.values()
#         # Default Values to putt
#         expected_fields = entity_type.fields_rapported()
#         expected_types_type = entity_type.type_fields_rapported()
#         results = list()
#         data = {
#             'entity': str(entity),
#             'default_fields': default_fields,
#             'default_fields_type': default_fields_type,
#             'default_fields_values': default_fields_values,
#             'expected_fields': expected_fields,
#             'expected_types_type': expected_types_type
#         }
#     return JsonResponse(data, safe=False)


def get_elements_hierachy(request):
    nature = int(request.GET.get('nature'))
    institution = Institution.objects.get(id=int(request.GET.get('institution')))
    if nature == -100:
        type_entity = request.GET.get('type_entity')
        role = Role.objects.get(id=int(type_entity))
        entity_type = role.m_simple_auth
    elif nature != -1:
        entity_type = InsitutionEntities.objects.filter(m_hierachie=nature,
                                                        m_institution=institution).first().m_entity_type
    else:
        entity_type = InsitutionEntities.objects.filter(m_institution=institution).last().m_entity_type
    try:
        big_entity = int(request.GET.get('big_entity'))
        ent = Entity.objects.get(id=int(big_entity))
        lines = ent.sub_entities()
    except:
        lines = entity_type.lines()
    tmp = list()
    ids = list()
    for l in lines:
        tmp.append(str(l))
        ids.append(l.id)
    data = {
        'lines': tmp,
        'ids': ids
    }
    return JsonResponse(data, safe=False)


def get_entities_subsequency(request):
    pass


def get_elements_subsequency_true(request):
    nature = int(request.GET.get('nature'))
    entity = int(request.GET.get('entity'))
    report = int(request.GET.get('report'))
    try:
        institution = int(request.GET.get("institution"))
    except:
        institution = None
    if entity != -1:
        try:
            entity = Entity.objects.get(id=entity)
        except:
            entity = 0
        elts = entity.child_trees()
    else:
        elts = [Institution.objects.get(id=institution).top_entity().lines()]

    data_names = list()
    data_ids = list()
    for elt in elts:
        tmp_id = list()
        tmp_name = list()
        for e in elt:
            tmp_id.append(e.id)
            tmp_name.append(str(e))
        data_names.append(tmp_name)
        data_ids.append(tmp_id)

    data = {
        'data_ids': data_ids,
        'data_names': data_names
    }
    return JsonResponse(data, safe=False)


def get_elements_subsequency(request):
    nature = int(request.GET.get('nature'))
    entity = int(request.GET.get('entity'))
    report = int(request.GET.get('report'))
    try:
        institution = int(request.GET.get("institution"))
    except:
        institution = None
    try:
        entity = Entity.objects.get(id=entity)
    except:
        entity = 0

    if report == 0:
        operations = Operation.objects.filter(etat='0', personnel=request.user.personnel).values('code')
    elif report == 1:
        operations = Operation.objects.filter(etat='1', accountable=request.user.personnel).values('code')
    elif report == 2:
        operations = Operation.objects.filter(etat='1', consulted=request.user.personnel).values('code')
    elif report == 3:
        operations = Operation.objects.filter(etat='2', informed=request.user.personnel).values('code')
    else:
        operations = Operation.objects.filter().values('code')

    if institution != None:
        institution = Institution.objects.get(id=institution)
        operations = operations.filter(m_institution=institution)

    bool(operations)
    result = list()
    if entity != 0:
        for o in operations:
            try:
                if o['code'] not in ["", None] and o['code'].split("#")[nature] == str(entity.id):
                    result.append(o)
            except:
                pass
    else:
        pre_hierachie = int(request.GET.get("pre_hierachy"))
        if pre_hierachie not in [0, -1]:
            for o in operations:
                if o['code'] not in ["", None] and o['code'].split("#")[(nature - 1)] == str(pre_hierachie):
                    result.append(o)
        elif nature == 0:
            result = list(operations)
    steps = list()

    k = 0
    if True:
        if report != 100:
            for i in operations[0]['code'].split("#"):
                steps.append(set())
                k += 1
        else:
            for i in list(operations)[-1]['code'].split("#"):
                steps.append(set())
                k += 1
    else:
        pass

    # Recuperer les Operations
    i = 0
    for o in result:
        i = 0
        for j in range(k):
            if o['code'] not in [None, "", " "]:
                steps[i].add(o['code'].split("#")[j])
                i += 1

    # Transformer en Liste
    ajax_steps = list()
    for s in steps:
        ajax_steps.append("#".join(list(s)))

    ajax_steps2 = list()
    for s in steps:
        s3 = list(s)
        s2 = list()
        for t in s3:
            if t not in ['', None]:
                s2.append(int(t))
        a = Entity.objects.filter(id__in=list(s2))
        a2 = [str(t) for t in list(a)]
        ajax_steps2.append("#".join(a2))

    data = {
        'operations': result,
        'ajax_steps': ajax_steps,
        'ajax_steps2': ajax_steps2
    }
    return JsonResponse(data, safe=False)


def save_valid_rapport(request):
    nature = request.POST['nature']
    resultat = request.POST['resultat_realise']
    institution = Institution.objects.get(id=int(request.POST['institution']))
    entity_type = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=institution).first().m_entity_type
    entity = Entity.objects.get(id=int(request.POST['value']))
    entity.is_rapported = True
    entity.save()
    tR = EntityRapport(m_entity=entity, m_resultat_realise=resultat)
    tR.save()
    return redirect('/' + nature + '/')


def filter_entities(request):
    institution = Institution.objects.get(id=int(request.POST['institution']))
    sub_value = request.POST['sub_value']
    hierachie = int(request.POST['hierachie'])
    tmp_hierachie = hierachie - 1
    if hierachie <= 0:
        hierachie = 0
        value = '0'
    else:
        entity_type = InsitutionEntities.objects.filter(m_institution=institution,
                                                        m_hierachie=(hierachie - 1)).first().m_entity_type
        entity_type_actual = InsitutionEntities.objects.filter(m_institution=institution,
                                                               m_hierachie=(hierachie)).first().m_entity_type
        enums_list = list()
        enums = entity_type_actual.enum_fields()['result']
        if entity_type_actual.m_enum_values not in ['', None]:
            for val in enums:
                enums_list.append(request.POST["enum_" + val['name']])
        if enums_list != list():
            enums_list = "||".join(enums_list)
        value = request.POST[str(entity_type)]
    # gestionnaire(request,gest_val,gest_id=0,name=None,structure=None,periode=None)
    if value != '0':
        element = Entity.objects.get(id=int(value))
        if enums_list != list():
            response = redirect('/gestionnaire/' + str(tmp_hierachie) + '/' + str(element.id) + '/')
        else:
            response = gestionnaire(request, str(tmp_hierachie), str(element.id), None, None, None, enums_list)
    else:
        response = redirect('/gestionnaire/' + str(hierachie) + '/')
    return response


def search(request):
    if request.user.is_authenticated == True:
        template = "webpages/ctn_bpf/search.html"
        val = request.POST['search']
        context = basis(request)
        searches = list()
        entities = context['actual_institution'].get_entities()
        for e in entities:
            lines = e.m_entity_type.lines()
            hierachie = e.m_hierachie
            def_color = '#00a2c3'
            if e.m_entity_type.is_tache:
                def_color = 'orange'
            for l in lines:
                if val in str(l):
                    searches.append({'nature': 'e', 'label': e, 'value': l, 'hierachie': hierachie, 'color': def_color})

        for s in Structure.objects.filter(nom__contains=val, institution=context['actual_institution']):
            searches.append({'nature': 's', 'label': 'Structure', 'value': s, 'color': '#9012a1'})

        for s in Personnel.objects.filter(nom__contains=val):
            searches.append({'nature': 'p', 'label': 'Personnel', 'value': str(s), 'color': '#12c304'})

        context['searches'] = searches
    else:
        return redirect("/")
    return render(request, template, context)


def search2(request, menu):
    search = request.POST["search"]
    if menu == 'i':
        response = institutions(request, search)
    elif menu == 'p2':
        response = personnels(request, search)
    elif menu == 'p2_RACI':
        response = personnels_raci(request, search)
    elif menu == 'r':
        response = roles(request, search)
    elif menu == 'aN':
        response = alert_notifs(request, search)
    return response


@login_required(login_url='/log_account')
def messages(request):
    template = "webpages/ctn_bpf/search.html"
    context = basis(request)
    context['msg_view'] = True
    results = list()
    personnel = request.user.personnel
    accounted = personnel.operations_accounted()
    bool(accounted)
    """
	for o in Operation.objects.filter():
		if  o.rapported() not in [None,'0'] and o.progression()<100 and context['permissions'] > 0:
			results.append({'value':o,'name':'Operation','link':'o','nature':'r'})
	"""
    for o in accounted:
        if o.rapported() not in [None, '0'] and o.progression() < 100:
            # and context['permissions'] > 0
            results.append({'value': o, 'name': 'Operation', 'link': 'o', 'nature': 'r'})
    entities_type = context['actual_institution'].get_entities()
    nb_observations = 0
    """
	for e in entities_type:
		lines = e.m_entity_type.lines()
		for l in lines :
			if l.is_rapported != True and l.progression() == 100:
				results.append({'value':l,'name':str(l.m_type_entity),'link':'o','nature':'o'})
	"""
    context['msgs'] = True
    paginator_o = Paginator(results, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def bad_pass(request):
    mail = request.POST['mail']
    sent = False
    try:
        subject = "Restauration de Mot de Passe"
        code = ""
        
        for i in range(0, 6):
            code += str(random.randint(0, 9))
        # r_bd_user.set_password('User'+password)
        message = " Entrez ce code pour restaurer votre Compte "
        email = r_perso.mail
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [email, ]
        send_mail(subject, message, email_from, recipient_list, fail_silently=False)
        sent = True
    except:
        pass
    data = {
        'sent': sent
    }
    if sent == True:
        data['code'] = code
    return JsonResponse(data)


def notifs_rapp(request):
    user_id = request.GET.get('value')
    insti_id = request.GET.get('institution')
    insti_id = Institution.objects.get(id=int(insti_id))
    # perso = Personnel.objects.get(bd_user__id=int(user_id))
    operations = Operation.objects.filter(personnel=request.user.personnel)
    # General_Results
    nb_is_rapported = 0
    nb_have_to_report = 0
    nb_observations = 0

    nb_is_rapported2 = 0
    nb_have_to_report2 = 0
    nb_observations2 = 0

    actual_institution = insti_id

    context = basis(request)
    perso = request.user.personnel
    for o in operations:
        if o.etat == '0':
            nb_have_to_report += 1
            if o.institution() == actual_institution:
                nb_have_to_report2 += 1
        elif o.etat == '1':
            nb_is_rapported += 1
            if o.institution() == actual_institution:
                nb_is_rapported2 += 1
    entities_type = insti_id.get_entities()

    nb_observations = Operation.objects.filter(etat='1', accountable=perso).count()

    for e in entities_type:
        lines = e.m_entity_type.lines()
        for l in lines:
            if l.is_rapported != True and l.progression() == 100:
                nb_observations += 1

    personnel = request.user.personnel
    # for o in operations
    """
	for o in accounted:#o.institution() in context['personnel'].all_institutions() and
		if o.progression() < 100 and o.rapported() not in ['0',None]:
			# and context['permissions'] > 0
			nb_observations += 1
	"""
    data = {
        'nb_have_to_report': nb_have_to_report,
        'nb_is_rapported': nb_is_rapported,
        'nb_observations': nb_observations,
        'nb_have_to_report2': nb_have_to_report2,
        'nb_is_rapported2': nb_is_rapported2,
        'nb_observations2': nb_observations2
    }
    return JsonResponse(data)


def valid_observations(request):
    element_id = request.POST["element_id"]
    valid_attributes = request.POST['attributes']

    element = Entity.objects.get(id=int(element_id))
    is_tache = element.m_type_entity.is_tache
    if is_tache:
        element = Tache.objects.get(id=int(element_id))
    element.is_rapported = True
    element.m_reported_fields = valid_attributes
    element.save()
    return redirect('/operations/')


def print_mail_file(request):
    owners = Owner.objects.filter()
    mail_lists = list()
    for o in owners:
        mail_lists.append(o.m_user.email)
    context = {
        'mail_lists': mail_lists
    }
    template = "webpages/ctn_bpf/csv_template.html"
    return render(request, template, context)


def assistance(request):
    template = "webpages/ctn_bpf/assistance.html"
    context = basis(request)
    result = render(request, template, context)
    try:
        if request.session['assistance'] == 1:
            result = redirect('/')
    except:
        pass
    return result


def ajax_restore(request):
    
    r_mail = request.GET.get('mail')
    code = ""
    for i in range(6):
        code += str(random.randint(0, 9))
    message_context = {
        'code': code,
    }
    subject = " de Compte Opera +"
    message = render_to_string('webpages/ctn_bpf/mails/new_code.html', message_context)
    email = r_mail
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    msg = EmailMessage(subject, message, email_from, recipient_list)
    msg.content_subtype = 'html'
    try:
        msg.send()
        send = '0'
    except:
        send = '1'
    data = {
        'code': code,
        'send': send
    }
    return JsonResponse(data)


def restorepass(request):
    mail = request.POST['restore']
    password = request.POST['password']
    user = User.objects.filter(email=mail).first()
    user.set_password(password)
    user.save()
    login(request, user)
    return redirect('/')


def documentation(request):
    document = OperaFile.objects.filter(m_name="DOCU").first().m_file.url
    return redirect(document)


# New Updates
@login_required(login_url='/log_account')
def chaine_indicateurs(request):
    template = "webpages/ctn_bpf/chaine_resultat.html"
    context = basis(request)
    actual_institution = context['actual_institution']
    context['menu'] = 'l'
    context['top_entities'] = actual_institution.top_entity().lines()
    context['this_entities'] = actual_institution.get_entities()
    return render(request, template, context)


def get_indicateur_value(request):
    indicateur = Indicateur.objects.get(id=int(request.GET.get('id_indicateur')))
    fields = indicateur.m_fields
    periodicite = indicateur.m_periodicite
    final_cible = indicateur.m_final_cible
    if final_cible == None:
        final_cible = ""
    cibles = indicateur.m_cibles
    data_verification = indicateur.m_data_verification

    verification_indi = indicateur.m_verification_indi

    data = {
        'obj': indicateur.m_objectif_indi,
        'indicateur': indicateur.m_name,
        'fields': fields,
        'periodicite': periodicite,
        'final_cible': final_cible,
        'cibles': cibles,
        'verification_indi': verification_indi,
        'data_verification': data_verification,
        "data_verificationind": "#",
        'others': "#"
    }
    tmp_verifi = data_verification.split("#")
    if tmp_verifi[0] == "1":
        ind_ve = DataSet.objects.get(id=int(tmp_verifi[1]))
        data["data_verificationind"] = str(ind_ve)
        data["data_verificationind_url"] = "/data_form/" + str(ind_ve.id) + "/0/"
    if indicateur.m_others not in [None, ""]:
        data["others"] = indicateur.m_others
    return JsonResponse(data, safe=False)


def ajax_institution(request):
    sens = request.GET.get('sens')
    devise = request.GET.get('devise')
    institution = request.GET.get('institution')
    institution = Institution.objects.get(id=int(institution))
    if int(sens) == 1:
        institution.default_options = False
    elif int(sens) == 0:
        institution.default_options = True
    elif int(sens) == 3:
        institution.finan_options = None
    elif int(sens) == 2:
        institution.finan_options = devise
    institution.save()
    data = {
        'nada': True
    }
    return JsonResponse(data, safe=False)

from django.db import OperationalError, transaction  
from django.core.exceptions import ValidationError  

def save_indicateur(request):  
    edit_or_create = request.POST.get("edit_or_create", '')  
    gest_id = request.POST.get('gest_id', '')  
    gest_val = request.POST.get('gest_val', '')  
    name = request.POST.get("nature_indicateur", '')  
    type = request.POST.get('type', '')  
    nicename = request.POST.get('nicename','')
    fields = request.POST.get("indi_adds", '')  
    type_entity = request.POST.get("entity_id", '')  
    data_verification = request.POST.get("indi_srcs", '')  

    numerateur = request.POST.get("numerateur", '') 
 
    #return HttpResponse( numerateur)
    denominateur = request.POST.get("denominateur", '')  
    objectif_indi = request.POST.get("objectif_indi", '')  
    verification_moyen = request.POST.get("verification_moyen", '') + "#" + request.POST.get("veri_type", '')  

    sources_speci = request.POST.get("specig_form", '')  
    
    
    if sources_speci == "1":  
        dataSt = request.POST.get("dataSt", '')  
        if dataSt:  
            sources_speci += "#" + dataSt  

    codes_colors = request.POST.get("codes_colors", '')  
    cibles = request.POST.get("indi_cibls", '')  
    
    # Validation et conversion des coefficients  
    try:  
        coeficient = int(request.POST.get("coefficient", 0))  # Valeur par défaut 0 si vide  
    except ValueError:  
        coeficient = 0  # Gérer le cas où int() échoue  
    
    unite = request.POST.get("unite_indicateur", '')  

    default_calcul = request.POST.get("default_calcul", 1)  

    try:  
        with transaction.atomic():  
            if edit_or_create == "c":  
                if type_entity.isdigit():  
                    entity = Entity.objects.get(id=int(type_entity))  
                else:  
                    raise ValueError("Invalid entity ID")  

                indi = Indicateur(  
                    m_name=name, m_fields=fields,  
                    m_data_verification=data_verification,   
                    m_enti=entity,   
                    type_aggregation=type,
                    nicename=nicename,
                )  
            else:  
                edit_id = request.POST.get("edit_id", '')  
                if edit_id.isdigit():  
                    indi = Indicateur.objects.get(id=int(edit_id))  
                    indi.m_name = name  
                    indi.m_fields = fields  
                    indi.m_data_verification = data_verification  
                    indi.type_aggregation = type

                else:  
                    raise ValueError("Invalid edit ID")  

            indi.m_institution = basis(request)["actual_institution"]  
            indi.m_cibles = cibles  
            indi.m_numerateur = numerateur  
            indi.m_denominateur = denominateur  
            indi.m_coefficient = coeficient  
            indi.m_data_verification = sources_speci  
            indi.m_unite = unite  
            indi.objectif_indi = objectif_indi  
            indi.m_colors_code = codes_colors  
            indi.m_verification_indi = verification_moyen  
           
            
            try:  
                indi.m_secundo_options = request.POST.get("other_fields", '')  
            except KeyError:  
                pass  

            if int(default_calcul) == 1:  
                formula = f"${numerateur}$ * {coeficient} / ${denominateur}$"  
                indi.m_datalets_calcul = formula  

            indi.save()  
            messages.success(request, 'Indicateur Enregistre avec succes')  

    except OperationalError:  
        messages.error(request, 'Erreur de connexion. Veuillez réessayer plus tard.')  
    except ValueError as e:  
        messages.error(request, f"Erreur de validation : {e}")  
    except Exception as e:  
        messages.error(request, f"Une erreur inattendue est survenue : {e}")  

    return redirect('/evaluer/' + gest_val + '/' + gest_id)

# @login_required(login_url='/log_account')
# def evaluer(request, hierachie="0", gest_id=0, search=None, specifi_id=None):
#     context = basis(request)
#     hierachie = int(hierachie)
#     if specifi_id == None:
#         if hierachie != -1:
#             entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution=context[
#                 'actual_institution']).first().m_entity_type
#         else:
#             entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
#         context['entity'] = entity
#         context['hierachie'] = hierachie
#         context['hierachy'] = hierachie
#         if gest_id == 0:
#             elements = entity.lines()
#         else:
#             get_e = Entity.objects.get(id=int(gest_id))
#             context['base_val'] = get_e
#             elements = list(get_e.sub_entities())
#             context['sup_hierachy'] = list()
#             for t in get_e.sup_hierachie():
#                 context['sup_hierachy'].append(t)
#             context['sup_hierachy'].append(get_e)
#
#         if search != None:
#             tmp = elements
#             elements = list()
#             for t in tmp:
#                 if search in t.m_value_fields:
#                     elements.append(t)
#
#     else:
#         a_entity = Entity.objects.get(id=specifi_id)
#         entity = a_entity.m_type_entity
#         context['entity'] = entity
#         context['hierachie'] = hierachie
#         context['hierachy'] = hierachie
#         elements = [a_entity]
#     paginator_o = Paginator(elements, 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
#
#     context["indi_options"] = entity.indicateurs
#     try:
#         context["indi_options"][0] == None
#         context["no_secund"] = False
#     except:
#         context["no_secund"] = None
#
#     context['menu'] = 'g'
#     context['g_v'] = 'i2'
#     context['gest_id'] = gest_id
#     context['gest_val'] = hierachie
#     context['gest_val_1'] = hierachie + 1
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range
#     context['dataelts'] = dataelts
#     context['dataelts2'] = dataelts.exclude(m_default_value=None)
#
#     template = "webpages/ctn_bpf/evaluer.html"
#     return render(request, template, context)
from django.db.models import Sum
@login_required(login_url='/log_account')
def evaluer(request, hierachie="0", gest_id=0, search=None, specifi_id=None):
    context = basis(request)
    hierachie = int(hierachie)
    if specifi_id == None:
        if hierachie != -1:
            entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution=context[
                'actual_institution']).first().m_entity_type
        else:
            entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
        context['entity'] = entity
        context['hierachie'] = hierachie
        context['hierachy'] = hierachie
        if gest_id == 0:
            elements = entity.lines()
        else:
            get_e = Entity.objects.get(id=int(gest_id))
            context['base_val'] = get_e
            elements = list(get_e.sub_entities())
            context['sup_hierachy'] = list()
            for t in get_e.sup_hierachie():
                context['sup_hierachy'].append(t)
            context['sup_hierachy'].append(get_e)

        if search != None:
            tmp = elements
            elements = list()
            for t in tmp:
                if search in t.m_value_fields:
                    elements.append(t)

    else:
        a_entity = Entity.objects.get(id=specifi_id)
        entity = a_entity.m_type_entity
        context['entity'] = entity
        context['hierachie'] = hierachie
        context['hierachy'] = hierachie
        elements = [a_entity]
    paginator_o = Paginator(elements, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
    periode_ok=PeriodeOk.objects.all()
    context["indi_options"] = entity.indicateurs
    try:
        context["indi_options"][0] == None
        context["no_secund"] = False
    except:
        context["no_secund"] = None

    context['menu'] = 'g'
    context['g_v'] = 'i2'
    context['gest_id'] = gest_id
    context['gest_val'] = hierachie
    context['gest_val_1'] = hierachie + 1
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    context['dataelts'] = dataelts
    context['dataelts2'] = dataelts.exclude(m_default_value=None)
    context['periode_ok']=periode_ok
    periode = Periode.objects.all()
    context['periode']=periode
    actual_institution=context['actual_institution']
    structure=Structure.objects.filter(institution_id=actual_institution)
    context['structure']=structure

    indicateur_valeur = IndicateurValeur.objects.filter(institution_id=actual_institution,type_donnee='valeur_form')
    indicateur = Indicateur.objects.filter(m_institution_id=actual_institution)
    
    
   
    
    somme_valeurs = {}
    
    for indicateurs in indicateur:  
        # print(f"Traitement de l'indicateur ID: {indicateurs.id}")
        total = IndicateurValeur.objects.filter(  
            indicateur=indicateurs,  
            institution=actual_institution,  
            type_donnee='valeur_form',
           
        ).aggregate(total_valeur=Sum('valeur'))['total_valeur'] or 0  
        somme_valeurs[indicateurs.id] = total 
        # print(somme_valeurs)
    
    context['indicateur_valeur'] = indicateur_valeur
    context['somme_valeurs'] = somme_valeurs

    # nature = NatureIndicateur.objects.all()
    # context['nature'] = nature
        # Configuration de la pagination  
    paginator = Paginator(indicateur, 6)  # 10 objets par page
    page_number = request.GET.get('page')
    try:  
        indicateurs_page = paginator.page(page_number)  
    except PageNotAnInteger:  
        # Si `page` n'est pas un entier, renvoie la première page  
        indicateurs_page = paginator.page(1)  
    except EmptyPage:  
        # Si la page est hors limites (ex. 9999), renvoie la dernière page  
        indicateurs_page = paginator.page(paginator.num_pages)
    context['indicateur']= indicateurs_page
    groupe_indicateur = GroupeIndicateur.objects.only('libelle')
    context['groupe_indicateur'] = groupe_indicateur
  
    template = "webpages/ctn_bpf/evaluer.html"
    return render(request, template, context)
def evaluer_detail(request, gest_id=0):
    return evaluer(request, "0", 0, None, gest_id)


def indic_plus(request, indic_id):
    context = basis(request)
    entity = Entity.objects.get(id=int(indic_id))
    template = "webpages/ctn_bpf/indic_plus.html"
    context['entity'] = entity
    return render(request, template, context)


def data_elements(request):
    context = basis(request)
    entity = Entity.objects.get(id=int(indic_id))
    template = "webpages/ctn_bpf/indic_plus.html"
    context['entity'] = entity
    return render(request, template, context)


def duplicate(request):
    from .utilities2 import duplicate_entity_logic, duplicate_tache, duplicate_entity, duplicate_operation
    generator_d = request.POST['generator_d']
    response = ""
    if generator_d == 'e':
        value = request.POST['dup_id']
        entity = Entity.objects.get(id=int(value))
        link = request.POST['link']
        response = redirect(link)
        # new = int(request.POST['new_dup'])
        new = 0
        try:
            name = request.POST['nom_dup']
            if name in [None, '']:
                name = "#"
        except:
            name = "#"
        try:
            relogic_dup = int(request.POST['relogic_dup'])
        except:
            relogic_dup = 0

        if relogic_dup == 0:
            duplicate_entity(entity, name)
        else:
            duplicate_entity_logic(entity, name)

    elif generator_d == 'o':
        value = request.POST['dup_id']
        entity = Operation.objects.get(id=int(value))
        link = request.POST['link']
        response = redirect(link)  # redirect("/taches/"+str(operation.m_tache.id))
        try:
            name = request.POST['nom_dup']
            if name in [None, '']:
                name = "#"
        except:
            name = "#"
        o2 = duplicate_operation(entity, name)
        o2.tache = entity.tache
        try:
            relogic_dup = (request.POST['reraci_dup'])
            r_personnel = Personnel.objects.get(id=int(request.POST["perso"]))
            r_accountable = Personnel.objects.get(id=int(request.POST["accountable"]))
            r_consulted = Personnel.objects.get(id=int(request.POST["consulted"]))
            r_informed = Personnel.objects.get(id=int(request.POST["informed"]))
            o2.personnel = r_personnel
            o2.accountable = r_accountable
            o2.consulted = r_consulted
            o2.informed = r_informed
        except:
            relogic_dup = 0
        o2.save()

    elif generator_d == 'i':
        values = request.POST['values_d'].split("|")
        response = redirect("/institution/")
        try:
            entity_dup = request.POST['entity_dup']
        except:
            entity_dup = "0"
        for v in values[:-1]:
            ins = Institution.objects.get(id=int(v))
            tmp = ins
            tmp.id = None
            tmp.save()

            # entity Institutions
            ins_entities = InsitutionEntities.objects.filter(m_institution__id=int(v))
            for i in ins_entities:
                tmp11 = i.m_entity_type
                tmp11.id = None
                tmp11.save()
                tmp1 = InsitutionEntities(m_institution=tmp, m_hierachie=i.m_hierachie, m_entity_type=tmp11)
                tmp1.save()
                if entity_dup == '1':
                    for i2 in tmp11.lines():
                        tmp2 = i2
                        tmp2.m_type_entity = tmp11
                        if tmp11.is_tache:
                            tmp3 = Tache.objects.get(id=tmp2.id)
                            tmp3.m_type_entity = tmp11
                        tmp2.id = None
                        tmp3.id = None
                        tmp2.save()
                        tmp3.save()

            # structures
            structures = Structure.objects.filter(institution__id=int(v))
            for i in structures:
                tmp2 = i
                tmp2.id = None
                tmp2.institution = ins
                tmp2.save()

            # aggregates
            aggregates = Aggregate.objects.filter(m_institution__id=int(v)).first()
            if aggregates != None:
                tmp3 = aggregates
                tmp3.id = None
                tmp3.m_institution = ins
                tmp3.save()

            # roles
            roles = Role.objects.filter(actual_institution__id=int(v))
            for r in roles:
                tmp4 = r
                tmp4.id = None
                tmp4.actual_institution = ins
                tmp4.save()
        request.session['new_ins'] = 1
    return response


def print_pdf(request):
    ind = int(request.GET.get('ind'))

    context = basis(request)
    operations = list()
    if ind == 1:
        tmp_ops = Operation.objects.filter()
    elif ind == 2:
        p = request.user.personnel
        tmp_ops = Operation.objects.filter(personnel=p)
    if ind in [1, 2]:
        for t in tmp_ops:
            if t.institution() == context['actual_institution']:
                operations.append(t)
        lines = list()
        taches_lines = list()
        for o in operations:
            tmp_line = str(
                o.tache) + "" + str(
                o) + "" + str(
                o.personnel)
            if o.periodes() != None:
                tmp_line += "" + str(
                    o.periodes().details_periode())
            else:
                tmp_line += "" + " "
            if context['actual_institution'].default_options != True:
                values = o.value_split()
                agr_fields = o.agr_fields()
                i = 0
                for v in agr_fields:
                    if v != 'file':
                        try:
                            tmp_line += "" + str(
                                values[i])
                        except:
                            tmp_line += "" + " "
                    else:
                        tmp_line += "" + " -- "
                    i += 1
                tmp_line += "" + o.status_op()
            lines.append(tmp_line)
    elif ind == 4:
        taches = context['actual_institution'].last_entity().lines()
        lines = list()
        for t in taches:
            hierachie = ""
            for h in t.sup_hierachie():
                hierachie += str(
                    h.get_name()) + ""
            fields = ""
            for f in t.values():
                fields += str(
                    f) + ""
            lines.append(hierachie + fields + str(
                t.progression()) + "" + str(
                t.m_date_modif))
    data = {
        'lines': lines
    }
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def dataelts(request, elt_id=0, elt_str=0):
    context = basis(request)
    context['g_v'] = 'eD'
    if elt_id == 0:
        template = "webpages/ctn_bpf/dataelts.html"
        indicateurs = Indicateur.objects.filter()
        dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
        context['indicateurs'] = indicateurs
        context['dataelts'] = dataelts
    else:
        template = "webpages/ctn_bpf/data_element_id.html"
        dataelt = DataElement.objects.get(id=int(elt_id))
        context["dataelt"] = dataelt
        context["structures"] = Structure.objects.filter(institution=context["actual_institution"])
        if elt_str == 0:
            context["actu_struc"] = context["structures"].first()
        else:
            context["actu_struc"] = Structure.objects.get(id=int(elt_str))
        # lines = dataelt
        tmps = dataelt.element_values(context["actu_struc"])
        periods_tmp = dict()
        p_tmps = list()

        class DEL:
            def __init__(self, e1, e2, e3=0):
                self.sup_period = e1
                self.period = e2
                self.value = e3

            def __repr__(self):
                return self.sup_period

        for t in tmps:
            a = t.m_dataset_value.m_period_value + "-" + t.m_dataset_value.m_sub_period_value
            if a in p_tmps:
                if t.m_value not in ["", None]:
                    periods_tmp[a].value += float(t.m_value)
            else:
                elts = DEL(t.m_dataset_value.m_sub_period_value, t.m_dataset_value.m_period_value, 0)
                if t.m_value not in ["", None]:
                    elts.value = float(t.m_value)
                else:
                    elts.value = 0
                periods_tmp[a] = elts
                p_tmps.append(a)
        context["values"] = list()
        for p in p_tmps:
            context["values"].append(periods_tmp[p])
    # context["values"].group_by = ['designation']
    return render(request, template, context)


@login_required(login_url='/log_account')
def dataelts_edit(request, elt_id):
    template = "webpages/ctn_bpf/dataelts_edit.html"
    context = basis(request)
    indicateurs = Indicateur.objects.filter()
    dataelts = DataElement.objects.filter(id=elt_id).first()
    context['indicateurs'] = indicateurs
    context['dataelts'] = dataelts
    return render(request, template, context)


@login_required(login_url='/log_account')
def dataelts_indic(request):
    template = "webpages/ctn_bpf/dataelts_indic.html"
    context = basis(request)
    context['is_indi'] = True
    context['indicateurs'] = list()
    tmps_is = Indicateur.objects.filter()
    dataelts = DataElement.objects.filter()
    for i in tmps_is:
        enti = i.m_enti
        if enti != None:
            if enti.m_type_entity.get_institution(context['actual_institution']) != None:
                context['indicateurs'].append(i)
    context['dataelts'] = dataelts
    return render(request, template, context)


def ajax_progression(request):
    plannify = request.GET.get("plannify")
    periode = Periode.objects.get(id=int(request.GET.get("periode")))

    year = request.GET.get("year")
    institution = request.GET.get("institution")
    institution = Institution.objects.get(id=int(institution))
    sub_period = institution.default_subperiod

    try:
        mods = request.GET.get("mods")
    except:
        mods = None

    try:
        entity = request.GET.get("entity")
    # entity_type =  request.GET.get("entity_type")
    except:
        entity = None

    progression = 0
    t_plannify = list()

    """
	for t in taches:
		t_plannify.append(t.plannification())
	"""
    result = list()
    if plannify != "#":
        cumulate = int(request.GET.get("cumul1"))  # 1 #Mettre une variable
        nb_ops = 0
        ops = list()
        if entity == None:
            operations = Operation.objects.filter(m_institution=institution)
        else:
            operations = Entity.objects.get(id=int(entity)).operations()
        bool(operations)
        for o in operations:
            ops.append(o)

        try:
            tmp_val = get_period_values(periode, plannify + "_")[0]
        except:
            tmp_val = None

        if tmp_val != None:
            result.append(tmp_val)
            for o in ops:
                if o.m_tache_plannification != None:
                    v = get_period_values(periode, o.m_tache_plannification + "_")
                    cond1 = (cumulate == 0) and int(v[0]) == int(tmp_val)
                    cond2 = (cumulate == 1) and int(v[0]) <= int(tmp_val)
                    if len(v) > 0:
                        if cond1 or cond2:
                            progression += o.progression()
                            nb_ops += 1
                else:
                    pass
        glob_ops = int(request.GET.get("cumul2"))  # 1
        if glob_ops == 1:
            nb_ops = operations.count()
        if nb_ops > 0:
            progression /= nb_ops
    else:
        if mods in [None, "0"]:
            prs = list()
            tops = institution.top_entity().lines()
            plannify_all = request.GET.get("plannify_all")
            plannify_all = plannify_all.split("#")[:-1]
            t_plannify2 = t_plannify
            t_plannify = subperiods_value(periode, year)
            mrd_t = list()
            i_t = 0
            for t in tops:
                mrd_t.append(list())
                for p in t_plannify:
                    mrd_t[i_t].append(0)
                i_t += 1

            i_t = 0

            for to in tops:
                nb_jT = 0
                if to.m_type_entity.is_tache == False:
                    tach = to.taches()
                else:
                    tach = [to]
                ops = list()
                for t in tach:
                    ops += t.operations()
                t_plannify2 = list()
                for a in tach:
                    a = Tache.objects.get(id=a.id)
                    t_plannify2.append(a.plannification())
                j_t = 0
                for p in t_plannify:
                    progression = 0
                    nb_jT = 0
                    nb_ops = 0
                    if p != None:
                        for o in ops:
                            try:
                                v = get_period_values(periode, o.m_tache_plannification + "_")
                                if len(v) > 0:
                                    if int(v[0]) == int(p):
                                        progression += o.progression()
                                    nb_ops += 1
                            except:
                                pass
                        if nb_ops != 0:
                            mrd_t[i_t][j_t] = round(progression / nb_ops, 2)
                        j_t += 1
                i_t += 1
            prs = list()
            j = 0
            for t in mrd_t:
                tmp = ""
                for s in t:
                    tmp += str(s) + "#"
                prs.append(tmp)
        else:
            prs = list()
            tops = institution.top_entity().lines()
            for t in tops:
                result = list()
                operations = t.operations()
                nb_x = len(institution.default_period.decoup_slip()) * len(
                    institution.default_subperiod.decoup_desc_slip())
                if institution.default_period.m_logic_type == 3:
                    chronogrs = ["0_9_9_9_9_", "9_0_9_9_9_", "9_9_0_9_9_", "9_9_9_0_9_", "9_9_9_9_0_"]
                    year = request.GET.get("year")
                    TP1 = subperiods_value(institution.default_period, int(year))
                    TP2 = list()
                    dic_ops = dict()
                    for t in TP1:
                        a = transform_to_plannify(t)
                        TP2.append(a)
                        for c in chronogrs:
                            dic_ops[a + "-" + c] = {
                                "progress": 0,
                                "nb_ops": 0
                            }
                    # operations = operations.filter(m_tache_plannification__in=TP2)

                    for o in operations:
                        dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation][
                            "progress"] += o.progression()
                        dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation]["nb_ops"] += 1
                    for a in TP2:
                        for c in chronogrs:
                            if dic_ops[a + "-" + c]["nb_ops"] > 0:
                                tmp = str(dic_ops[a + "-" + c]["progress"] / dic_ops[a + "-" + c]["nb_ops"])
                            else:
                                tmp = "0"
                            result.append(tmp)
                    prs.append("#".join(result))
    # progression /= len(taches)
    data = {
        'plannify': plannify,
        'result': result,
        'progression': round(progression, 2)
    }
    if plannify == "#":
        data['progressions'] = prs
    return JsonResponse(data)


def ajax_calcul_date(request):
    plannify = request.GET.get('plannify')
    periode = Periode.objects.get(id=int(request.GET.get("periode")))
    tmp_val = get_period_values(periode, plannify + "_")[0]

    ta1 = datetime.date(int(tmp_val[:4]), int(tmp_val[4:6]), int(tmp_val[6:8]))
    ta2 = datetime.date(int(tmp_val[8:12]), int(tmp_val[12:14]), int(tmp_val[14:16]))
    ta3 = ta2
    test = ta2.isoweekday()
    if test > 1:
        ta2 -= datetime.timedelta(test - 1)
        ta3 += datetime.timedelta(7 - test)
    test_dates = list()
    for i in range(5):
        test_dates.append("Du " + str(ta2) + " Au " + str(ta3))
        ta2 += datetime.timedelta(7)
        ta3 += datetime.timedelta(7)
    bumps1 = [int(tmp_val[:4]), int(tmp_val[4:6]) - 1, int(tmp_val[6:8])]
    bumps2 = [int(tmp_val[8:12]), int(tmp_val[12:14]) - 1, int(tmp_val[14:16])]
    data = {
        'tmp_val': tmp_val,
        'test_dates': test_dates,
        'ta1': str(ta2),
        'result': tmp_val
    }
    return JsonResponse(data)


def delete_mul(request):
    entities = request.POST["multi_values"]
    hierachy = int(request.POST['hierachy'])
    g_v = request.POST['g_v']
    try:
        g_v_2 = request.POST['g_v_2']
    except:
        g_v_2 = None

    from .utilities2 import delete_entities, delete_operations
    if g_v != "o":
        delete_entities(entities)
        response = '/gestionnaire/' + str(hierachy)
        if g_v_2 is not None:
            response = '/gestionnaire/' + str(hierachy - 1)
            response += '/' + str(g_v_2) + '/'
    else:
        a = delete_operations(entities)
        response = '/taches/' + str(a.id) + '/'
    return redirect(response)


@login_required(login_url='/log_account')
def data_form(request, nature=-1, elt_id=0):
    template = "webpages/ctn_bpf/data_form.html"
    context = basis(request)
    nature = int(nature)
    context["nature"] = nature
    context["elt_id"] = elt_id
    periode_ok = PeriodeOk.objects.all().distinct('annee')
    context['periode_ok'] = periode_ok
    if nature != -1:
        template = "webpages/ctn_bpf/data_form_plus.html"
        dataform = DataSet.objects.filter(id=nature, m_institution=context["actual_institution"]).first()
        context["element"] = dataform
        if dataform != None:
            next_nature = nature + 1
            lines = dataform.dS_values()
        else:
            lines = list()
    else:
        next_nature = 1
        lines = DataSet.objects.filter(m_institution=context["actual_institution"])
        try:
            if context["permissions"] == 0 or context["no_simple_user"] == False:
                # role
                role = request.user.personnel.get_function(context["actual_institution"].id).m_role
                lines = lines.filter(m_roles=role)
        except:
            pass
    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context["g_v"] = "dSV"
    context["menu"] = "h"
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    return render(request, template, context)


def error_404(request, exception):
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/errors.html"
        context = basis(request)
    else:
        template = "webpages/ctn_bpf/errors_zero.html"
        context = dict()
    context['error'] = 404
    context['exception'] = exception
    return render(request, template, context)


def error_500(request):
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/errors.html"
        context = basis(request)
    else:
        template = "webpages/ctn_bpf/errors_zero.html"
        context = dict()
    return render(request, template, context)


def extra(request, name=""):
    context = basis(request)
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/extra.html"
        files = OperaFile.objects.filter(m_institution=context["actual_institution"]).select_related("m_institution")
        bool(files)
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None
    else:
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None
        template = "webpages/ctn_bpf/extra.html"
        files = OperaFile.objects.filter(is_public=1)
        bool(files)
    if name != None:
        tmp1 = files.filter(m_name__contains=name)
        tmp2 = list()  # files.filter(m_file__url__contains=name)
        files = list()
        for t in tmp1:
            files.append(t)
        for t in tmp2:
            files.append(t)
    paginator_o = Paginator(files, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context["g_v"] = "ex"
    context["menu"] = "x"
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def get_progressions(request):
    list_ids = request.GET.get('list_ids').split("#")[:-1]
    list_ids = [int(i) for i in list_ids]
    entities = Entity.objects.filter(id__in=list_ids)

    result = list()
    data_ids = list()
    type_Progression = request.GET.get("type_progression")
    if type_Progression == "P":
        for i in entities:
            result.append(i.progression())
            data_ids.append(str(i.id))
    elif type_Progression == "T":
        for i in entities:
            result.append(i.technical_progression())
            data_ids.append(str(i.id))
    elif type_Progression == "F":
        for i in entities:
            result.append(i.finan_progression())
            data_ids.append(str(i.id))
    data = {
        'result': result,
        'ids': data_ids
    }
    return JsonResponse(data, safe=False)


def get_indi_data(request):
    data_id = request.GET.get('indi_id')
    ind = Indicateur.objects.get(id=int(data_id))
    nums = list()
    ids = list()
    for i in ind.indi_numerateur():
        nums.append(str(i))
        ids.append(i.id)
    denums = list()
    for i in ind.indi_denum():
        denums.append(str(i))

    period = ind.m_periodicite
    sub_period = ind.m_sub_periodicite
    cibles = ind.m_cibles
    data = {
        'nom': str(ind),
        'nums': nums,
        'denums': denums,
        'ids': ids
    }
    return JsonResponse(data, safe=False)


def consult_oper(request):
    operation = Operation.objects.get(id=int(request.POST["operation"]))


    request.session['new_rapport'] = 2
    observations = request.POST["observations"]
    file = request.FILES['file']
    oC = OperationConsulted(m_operation=operation, m_observations=observations, file=file)

    oC.save()
    if request.method == "POST":
        m_commentaire = request.POST.get('observations')
        file = request.FILES['file']
        save_avis = HistoricRACI.objects.create(m_commentaire=m_commentaire, m_role="C",
                                                m_operation_id=request.POST["operation"], file=file)
        save_avis.save()
    return redirect("/operations/")


@login_required(login_url='/log_account')
def personnels_raci(request, name=None):
    template = "webpages/ctn_bpf/persos_raci.html"
    context = basis(request)
    context['g_vs'] = 'p2'
    context['g_v'] = 'p2_RACI'

    context['searches'] = []
    context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
        actual_institution=context['actual_institution']).select_related('actual_institution')})
    context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
        institution=context['actual_institution']).select_related('institution')})

    ents = list()
    ieS = list(context['actual_institution'].get_entities())
    bool(ieS)
    # n = ieS.count()
    j = 0

    for i in ieS[:-2]:
        if True:
            tmp = {
                "hierachie": i.m_hierachie,
                "label": str(i),
                'entities': list()
            }
            if j == 0:
                tmp["entities"] = ieS[0].m_entity_type.lines()
            ents.append(tmp)
            j += 1
        else:
            pass
    context['ents'] = ents

    # context['matieres'] = ies[-2].lines()

    elements = list()
    tmps = Personnel.objects.filter()
    for t in tmps:
        if context['actual_institution'] in t.all_institutions():
            elements.append(t)

    akas = list()
    tmp_perso = Personnel.objects.filter()
    # pFs = Personnel_Function.objects.filter(m_institution=context["actual_institution"]).values("m_personnel")

    if True:
        for t in tmp_perso:
            if context['actual_institution'] in t.all_institutions():
                atmp = {
                    'id': t.id,
                    'prenom': t.prenom,
                    'nom': t.nom,
                    'photo': t.photo,
                    'get_function': t.get_function(context['actual_institution'].id),
                    'RACI_entities': t.RACI_entities()
                }
                akas.append(atmp)
            # lines2.add(t)
    else:
        context['lines'] = lis_peros

    if name != None:
        name = name.lower()
        tmps = akas
        akas = list()
        context['lines'] = list()
        for tt in tmps:
            ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
            for t in ta:
                if name in str(t):
                    akas.append(tt)
                    break

    paginator_o = Paginator(akas, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date

    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def data_sets(request, indi_id=0):
    context = basis(request)
    # data_set = DataSet.objects.get(id=indi_id)
    # context['data_set']=data_set
    indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
    template = "webpages/ctn_bpf/data_sets.html"
    periode = Periode.objects.all()
    context['periode'] = periode
    context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
    context["indicateurs"] = indicateurs
    context["menu"] = "h"
    # if indi_id != 0:
    # 	dataset = DataSet.objects.get(id=int(indi_id))
    # 	context["dataset"] = dataset
    """
	context["indicateur"] = indicateur
	context["element"]= indicateur.m_enti
	context["indi_id"] = indi_id
	"""
    return render(request, template, context)


def data_sets_design(request, dS_id):
    data_set = DataSet.objects.get(id=dS_id)
    template = "webpages/ctn_bpf/data_sets_design.html"
    context = basis(request)
    context["dataset"] = data_set
    context["design"] = 1
    return render(request, template, context)


def ajax_form(request):
    dF = DataSet.objects.get(id=int(request.GET.get("id_dataset")))
    # dF = indicateur.dataset()
    structures = list()
    structure_id = list()
    for s in dF.m_structures.filter():
        structures.append(str(s))
        structure_id.append(s.id)
    data = {
        'periode': dF.periodicite_id,
        'subperiode': dF.m_sub_periode,
        'structures': structures,
        'structures_id': structure_id,
        'form': dF.m_formulaire,
        'm_start_date': dF.m_start_date
        
    }
    return JsonResponse(data, safe=False)


def ajax_hiera_struc(request):
    institution = request.GET.get("institution")
    logic_strc = request.GET.get("logic_strc")
    m_institution = Institution.objects.get(id=int(institution))
    elt_logic = ""
    for e in logic_strc.split("|")[:-1]:
        a = e.split("#")
        if len(a) > 1:
            elt_logic += a[1] + "|"
        else:
            elt_logic += a[0] + "|"
    structures = Structure.objects.filter(institution=m_institution, values_hierachy__contains=elt_logic)
    data = {
        'ids': list(),
        'names': list()
    }
    data["nb_s"] = elt_logic
    for s in structures:
        data["ids"].append(s.id)
        data["names"].append(str(s))
    return JsonResponse(data, safe=False)


def ajax_RACI_user(request):
    type_RACI = request.GET.get("type_RACI")
    perso = request.GET.get("perso")
    institution = request.GET.get("institution")
    entity_filter = request.GET.get("entity_filter")

    data = dict()
    if type_RACI == "1":
        personnel = Personnel.objects.get(id=int(perso))
        rEL = list()
        data["elts"] = list()
        data["elts_id"] = list()
        data["elts_hierachy"] = list()

        if entity_filter not in ["0", None]:
            entity_filter = int(entity_filter)
            pR = PersonnelRACI.objects.get(id=entity_filter)
            data["elt_actu_id"] = str(pR.m_entity)
            data["elt_actu"] = pR.m_entity.id
        else:
            data["elt_actu_id"] = "#"
            data["elt_actu"] = "#"

        for p in personnel.get_function(institution).m_role.entity_levels():
            rEL.append(str(p))
            data["elts_hierachy"].append(p.m_hierachie)
            tmp_elt = list()
            tmp_id = list()
            for p2 in p.m_entity_type.lines():
                tmp_elt.append(str(p2))
                tmp_id.append(int(p2.id))
            data["elts"].append(tmp_elt)
            data["elts_id"].append(tmp_id)
        data["roles"] = rEL
    # data["test_rEL"] = rEL
    return JsonResponse(data, safe=False)


def ajax_RACI_user_manage(request):
    menu = request.GET.get("menu")
    # entity = Entity.objects.get(id=int(request.GET.get("entity")))
    if menu == "o":
        tache = Tache.objects.get(id=int(request.GET.get("entity")))
        perRACI = tache.personnelRACI()
        data = {
            "responsable": perRACI["responsable"],
            "accounted": perRACI["accounted"],
            "consulted": perRACI["consulted"],
            "informed": perRACI["informed"],
            "test": ""
        }
        allis = ["responsable", "accounted", "consulted", "informed"]
        for s in tache.sup_hierachie():
            all_none = False
            perRACI = s.personnelRACI()
            for al in allis:
                data["test"] += str(perRACI[al]) + "#"
                if data[al] == [None]:
                    all_none = True
                    if perRACI[al] != [None]:
                        data[al] = perRACI[al][1].id
                if all_none == False:
                    break
    return JsonResponse(data, safe=False)


def assign_RACI(request):
    personnel = Personnel.objects.get(id=int(request.POST["perso_assign"]))
    values_assign = request.POST["values_assign"].split("$")
    try:
        operations_check = request.POST["operations_recursive"]
    except:
        operations_check = None
    for v in values_assign[:-1]:
        # entity = Entity.objects.get(id=int(v.split("#")[0]))
        entity = int(v.split("#")[0].replace("'", ""))
        entity = Entity.objects.get(id=entity)
        raci_role = v.split("#")[1]
        if "1" in raci_role:
            if operations_check != None:
                operations = entity.operations()
                rs = raci_role.split("|")
                for o in operations:
                    if rs[0] == "1":
                        o.personnel = personnel
                    if rs[1] == "1":
                        o.accountable = personnel
                    if rs[2] == "1":
                        o.consulted = personnel
                    if rs[3] == "1":
                        o.informed = personnel
                    o.save()
            pR = PersonnelRACI(m_personnel=personnel, m_entity=entity, m_roles=raci_role)

            pR.save()
    return redirect("/personnels_raci/")


def print_pdf(request):
    name_pdf = request.GET.get("name_pdf")
    html = request.GET.get("html")
    html = html.replace("<table", "<table border='1' width='100%' cellpadding='5px'")
    html = html.replace("<td", "<td width='100' ")
    html = html.replace("<th", "<th width='100' ")

    data = dict()

    class MyFPDF(FPDF, HTMLMixin):
        pass

    pdf = MyFPDF()
    pdf.add_page()
    pdf.write_html(html)
    pdf.output('html3.pdf', 'F')
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def List(request):
    template = "webpages/ctn_bpf/tache_non.html"
    context['actual_institution']=actual_institution
    personnel=Personnel.objects.filter(m_institution_id=actual_institution)
    context['personnel']=personnel
    operation = Operation.objects.all()
    count = Operation.objects.count()
    context = basis(request)
    context["operation"] = operation
    context["count"] = count
    return render(request, template, context)


def taches_effectuee(request):
    template = "webpages/ctn_bpf/tache_effectuee.html"
    operation_detail = OperationDetails.objects.all()
    operation_rapport=OperationRapport.objects.all()
    context['operation_rapport']=operation_rapport
    context = basis(request)
    context['operation_detail'] = operation_detail
    personnel=Personnel.objets.all()
    context['personnel']=personnel
    return render(request, template, context)


def Avis(request, id):
    context = basis(request)
    operation_historic = HistoricRACI.objects.all()
    operation = Operation.objects.get(id=id)
    context['operation_historic'] = operation_historic
    operation_rapport = operation.get_operation_details_invalid().last()
    context["operation_rapport"] = operation_rapport

    try:
        operation = Operation.objects.get(id=id)
        context['operation'] = operation

        if operation.institution() != context["actual_institution"]:
            institution = operation.institution()
            request.user.personnel.actual_institution = institution
            request.user.personnel.save()
            context = basis(request)

    except Operation.DoesNotExist:
        context['error_message'] = "n'existe pas."

    return render(request, "webpages/ctn_bpf/avis_raci.html", context)


def recuperer_personnel(request):
    result = Personnel.objects.filter(id=request.POST.get('mail')).values('nom', 'prenom', 'tel').first()
    if result is not None:
        return JsonResponse(result)
    else:
        return JsonResponse({'error': ''})


def design_form(request):
    context = basis(request)
    if request.method == "POST":
        form_name = request.POST['form_name']
        elements = request.POST.getlist('element')
        indicateurs = request.POST.getlist('indicateur')
        periode = request.POST['periode']
        sub_periode = request.POST['sub_periode']
        actual_institution = context['actual_institution'].id
        role = request.POST.getlist('role')
        structure = request.POST.getlist('structure')
        # print("role:",role)
        # print("structure:",structure)
        # print("indicateur:",indicateurs)
        dS = DataSet.objects.create(m_name=form_name, m_periode=periode, m_sub_periode=sub_periode,
                                    m_institution_id=actual_institution)

        dS.save()
        dS.m_indicateurs.set(indicateurs)
        dS.m_dataelements.set(elements)
        dS.m_roles.set(role)
        dS.m_indicateurs.set(indicateurs)
        dS.m_structures.set(structure)
        responsemndjn = "/data_sets/design/" + str(dS.id) + "/"
        return redirect(responsemndjn)


# def edit_dataset(request, id=0):
#     context = basis(request)
#     data_set = DataSet.objects.get(id=id)
#     context['data_set'] = data_set
#     indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
#     template = "webpages/ctn_bpf/data_sets_edit.html"
#     context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
#     context["indicateurs"] = indicateurs
#     context["menu"] = "h"
#     if id != 0:
#         dataset = DataSet.objects.get(id=int(id))
#         context["dataset"] = dataset

#     return render(request, template, context)


def count_operations(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    count = Operation.objects.filter(m_institution_id=actual_institution, etat="0").count()
    return JsonResponse({'count': count})


def count_tache_consulted(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    count_tache_consulted = Operation.objects.filter(perso=personnel_id, etat="0").count()
    return JsonResponse({'count_tache_consulted': count_tache_consulted})


def count_informed(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    count_informed = OperationDetails.objects.filter(request.user.personnel == personnel.id, etat="2").count()

    return JsonResponse({'count_informed': count_informed})


def Avis_informed(request, id=0):
    context = basis(request)
    template = "webpages/ctn_bpf/avis_informed.html"
    operation = Operation.objects.get(id=int(id))
    context['operation'] = operation
    operation_historic = HistoricRACI.objects.all()
    context['operation_historic'] = operation_historic
    operation_rapport = OperationRapport.objects.all()

    context["operation_rapport"] = operation_rapport
    return render(request, template, context)


def tache_consulted(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    operation = Operation.objects.filter(etat=0, consulted=request.user.personnel) | Operation.objects.filter(etat=1, consulted=request.user.personnel)
    context['operation'] = operation
    personnel=Personnel.objects.filter(actual_institution=actual_institution.id)
    context['personnel']=personnel
    template = "webpages/ctn_bpf/tache_consulted.html"
    return render(request, template, context)


def edit_data(request, id):
    if request.method == "POST":
        nom_donnee = request.POST['nom_donne']
        data_eltype = request.POST['data_eltype']

        aggregation = request.POST['aggregation']
        comment = request.POST['comment']
        default_value = request.POST['default_value']
        nature_donne = request.POST['nature_donne']
        data_element = DataElement.objects.filter(pk=id)

        data_element.update(m_name=nom_donnee, m_value_type=data_eltype, m_aggregation_type=aggregation,
                            m_description=comment, m_default_value=default_value, m_domain_type=nature_donne)
        # save_data.update()
        return redirect('../dataelts')


def count_persos(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id

    count_persos = Operation.objects.filter(m_institution_id=actual_institution, etat="2",is_deleted=False).count()
    return JsonResponse({'count_persos': count_persos})


def count_accountable(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    operation = Operation.objects.all()
    m_operation_consulted = Operation.objects.filter(m_institution_id=actual_institution, etat="1").count()
    return JsonResponse({'m_operation_consulted': m_operation_consulted})


def count_effectuee(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    operation = Operation.objects.all()
    count_effect = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="1").count()
    return JsonResponse({'count_effect': count_effect})

    # -*- coding: utf-8 -*-
    from asgiref.sync import sync_to_async

    from django.http import FileResponse, HttpResponse, HttpResponseRedirect, JsonResponse
    from django.shortcuts import render, redirect, get_object_or_404
    from django.core.paginator import Paginator
    from django.contrib.auth import authenticate, login, logout

    from django.core.mail import send_mail, send_mass_mail
    
    from django.core.mail import EmailMessage, EmailMultiAlternatives
    from django.core.cache import cache
    from django.views.decorators.cache import cache_page

    from django.template.loader import render_to_string
    from django.utils.html import strip_tags
    from django.db.models import ProtectedError
    from django.contrib.auth.decorators import login_required
    from .utilities import get_period_values, set_pv_tp, subperiods_value, transform_to_plannify
    from .utilities2 import split_extras1
    import os
    import datetime

    @login_required(login_url='/log_account')
    def admin_institution(request):
        template = "webpages/ctn_bpf/institution_admin.html"
        context = {
            'edit': 0
        }
        return render(request, template, context)

    @login_required(login_url='/log_account')
    def contact(request):
        template = "webpages/ctn_bpf/contact.html"
        context = {
            'edit': 0
        }
        return render(request, template, context)

    def edit_institution(request, institution_id):
        template = "webpages/ctn_bpf/institution_admin.html"
        context = {
            'edit': 1,
            'institution': Institution.objects.get(id=int(institution_id))
        }
        return render(request, template, context)

    def save_edit_institution(request):
        nom = request.POST["nom"]
        code = request.POST["code"]
        try:
            file = request.FILES["file"]
        except:
            file = None

        insti_id = int(request.POST['insti_id'])
        institution = Institution.objects.get(id=insti_id)
        institution.sigle = code
        institution.nom = nom
        if file != None:
            institution.img = file
        institution.save()
        return redirect('/')

    # def save_institution(request):
    #     url = request.POST['url']
    #     nom = request.POST["nom"]
    #     response = redirect("/")
    #     try:
    #         code = request.POST["code"]
    #     except:
    #         code = nom
    #     try:
    #         image = request.FILES["file"]
    #     except:
    #         image = OperaFile.objects.filter(m_name="IDF").first().m_file  # Instituti Defaut FIle
    #     try:
    #         desc = request.POST['desc']
    #     except:
    #         desc = " "
    #     try:
    #         app_code = request.POST['app_code']
    #     except:
    #         app_code = "#"
    #     # Informations Savers
    #
    #     owner = Owner.objects.filter(m_code=app_code).first()
    #     if owner == None:
    #         response = specific_log(request, 2)
    #     else:
    #         nb_institutions = owner.nb_institutions()
    #         if (owner.m_bought == False and nb_institutions == 0) or (
    #                 owner.m_bought == True and nb_institutions <= owner.m_type):
    #             institution = Institution(sigle=code, nom=nom, img=image,url=url)
    #             institution.owner = owner
    #             institution.save()
    #             owner.m_user.personnel.actual_institution = institution
    #             owner.m_user.personnel.save()
    #             try:
    #                 check_mail = request.POST['check_mail']
    #             except:
    #                 check_mail = False
    #             if check_mail == True:
    #                 owner.m_mail_notified = True
    #                 owner.save()
    #             # owner.save()
    #             if request.user.is_authenticated == False:
    #                 user = owner.m_user
    #                 login(request, user)
    #
    #             # tache hierachy modifier
    #             entity = EntityType(m_nom="Projet")
    #             entity.m_fields = "Nom du Projet|Objectif du Projet|"
    #             entity.m_type_fields = "text|text|"
    #             entity.m_fields_rapported = "Commentaires|"
    #             entity.m_type_fields_rapp = "text|"
    #             entity.save()
    #             type_entity = InsitutionEntities(m_hierachie=0)
    #             type_entity.m_entity_type = entity
    #             type_entity.m_institution = institution
    #             type_entity.save()
    #
    #             # Tache Launcher
    #             entity = EntityType(m_nom="Tache")
    #             entity.is_tache = True
    #             entity.m_fields = "Nom de la Tache|Objectif de la Tache|"
    #             entity.m_type_fields = "text|text|"
    #             entity.m_fields_rapported = "Commentaires|"
    #             entity.m_type_fields_rapp = "text|"
    #             entity.save()
    #             type_entity = InsitutionEntities(m_hierachie=1)
    #             type_entity.m_entity_type = entity
    #             type_entity.m_institution = institution
    #             type_entity.save()
    #
    #             personnel = Personnel.objects.get(bd_user__id=request.user.id)
    #             role = Role(nom="Administrateur " + str(institution), description="Supervise la Plateforme",
    #                         actual_institution=institution, permissions=100)
    #             role.save()
    #             function = Personnel_Function(m_institution=institution, m_personnel=personnel, m_role=role)
    #             function.save()
    #             role = Role(
    #                 nom=" " + str(
    #                     institution),
    #                 description="",
    #                 actual_institution=institution, permissions=0)
    #             role.save()
    #
    #             # Initialisation des Structures
    #             structure = Structure(nom=institution.sigle, designation=institution.nom)
    #             structure.institution = institution
    #             structure.save()
    #             pers_struc = Personnel_Structure(m_personnel=personnel, m_structure=structure)
    #             pers_struc.save()
    #
    #             # Initialisation des Periodes
    #             configurations_periodes = Periode.objects.filter(m_initial=True)
    #             for p in configurations_periodes:
    #                 per = Institution_Periodes(m_periode=p, m_institution=institution, m_default=True)
    #                 per.save()
    #             institution.default_period = configurations_periodes.last()
    #             institution.default_subperiod = institution.default_period.sub_periods().first()
    #             institution.save()
    #         else:
    #             request.session['too_much_ins'] = 1
    #             response = redirect('/log_account/')
    #     return response

    def set_default_period(request, period=0, sub_period="#"):
        # r_institution = request.COOKIES['institution']
        r_institution = request.user.personnel.actual_institution
        if int(period) != 0:
            r_periode = Periode.objects.get(id=int(period))
            r_institution.default_period = r_periode
            r_institution.default_subperiod = r_periode.sub_periods().last()
        if sub_period != "#":
            r_sub_period = SubPeriode.objects.get(id=int(sub_period))
            r_institution.default_subperiod = r_sub_period
        r_institution.save()
        return redirect('/configurations/')

    def authorized_institutions(request):
        if request.user.is_staff:
            institutions = Institution.objects.filter()
        else:
            institutions = [request.user.personnel.get_institution]
        return institutions

    def basis(request):
        permissions = list()
        actual_institution = None
        animate = None
        animate2 = None
        context = dict()
        user = request.user
        try:
            if request.session['logged'] == 1:
                request.session['logged'] = 0
                animate = 0
        except:
            pass
        try:
            if request.session['new_rapport'] == 1:
                request.session['new_rapport'] = 0
                animate2 = 0
            elif request.session['new_rapport'] == 2:
                request.session['new_rapport'] = 0
                animate2 = 1
        except:
            pass

        if request != None and user.is_authenticated:
            actual_institution = user.personnel.actual_institution
            bool(actual_institution)

            programmes = list()  # request.user.personnel.get_programmes()
            nb_programmes = 0

            personnel = request.user.personnel
            bool(personnel)

            prenom = personnel.prenom
            nom = personnel.nom
            role = personnel.get_function(actual_institution.id)
            picture = personnel.photo
            functi = role
            entity_manage = None
            if actual_institution.owner != None and actual_institution.owner.m_user == request.user:
                permissions = 100
            elif functi == None:
                permissions = 10
            else:
                permissions = functi.m_role.permissions
                if functi.m_role.m_nature == "1":
                    # enti = funxti
                    eRACI = personnel.RACI_manage()
                    if eRACI != None:
                        if eRACI[0] != None:
                            entity_manage = eRACI[0]
                elif permissions < 0:
                    entity_manage = functi.m_entity
            context = {
                'actual_institution': actual_institution,
                'animate': animate,
                'animate2': animate2,
                'prenom': prenom,
                'role': role,
                'nom': nom,
                'picture': picture,
                'permissions': permissions,
                'programmes': programmes,
                'nb_programmes': nb_programmes,
                'entity_manage': entity_manage
            }
            if entity_manage != None:
                context["my_entities"] = personnel.RACI_list()
                context["no_simple_user"] = context["my_entities"] != []
                context["type_ents"] = entity_manage.m_type_entity
                context["hierachie_ent"] = entity_manage.m_type_entity.hierachie()

            context['default_struc_name'] = actual_institution.default_struc_name
            context['this_period'] = datetime.datetime.now()
            context['operations_name'] = actual_institution.operations_name
            context['insti_structures'] = actual_institution.structures()
            context['default_period'] = context['actual_institution'].default_period

            get_entities = actual_institution.get_entities()

            context['get_entities'] = get_entities
            context['get_entities2'] = list(get_entities)[:-1]

            top_entity = context['actual_institution'].top_entity()
            bool(top_entity)
            context['top_entity'] = top_entity

            last_entity = context['actual_institution'].last_entity()
            bool(last_entity)
            context['last_entity'] = last_entity

            if actual_institution.finan_options != None:
                context["finances"] = actual_institution.finances()
                context["real_finances"] = 0
                context["finan_options"] = actual_institution.finan_options
                context["depenses_eff"] = actual_institution.depenses_eff

            tmp_week = int(max(1, context['this_period'].day / 7))
            if context['this_period'].day > context['this_period'].isoweekday() * tmp_week:
                tmp_week += 1
            context['this_week'] = tmp_week
            context['operations_modules'] = Aggregate.objects.filter(
                m_institution__id=context['actual_institution'].id).select_related('m_institution').first()


        else:
            actual_institution = None
            context["institution"] = None
        return context

    def agenda(request):
        template = "webpages/ctn_bpf/agenda_week.html"
        context = basis(request)
        return render(request, template, context)

    def log_account(request):
        template = "webpages/ctn_bpf/login.html"
        context = dict()
        try:
            if request.session['too_much_ins'] == 1:
                context['too_much_ins'] = True
                request.session['too_much_ins'] = None
        except:
            pass
        try:
            if request.session['new_user'] == 1:
                # request.session['new_user'] = 0
                animate = 1
                context['new_user'] = animate
                request.session['new_user'] = 0
        except:
            pass
        try:
            context['bad_log'] = (request.session['bad_log'] != None and request.session['try_log'] != None)
            request.session['try_log'] = None
        except:
            pass
        return render(request, template, context)

    # @cache_page(60 * 15)
    def index_log(request, nature):

        if True:
            context = basis(request)
            operation_m = Operation.objects.all()
            context['operation_m'] = operation_m
            operation_details = OperationDetails.objects.all()
            context['operation_details'] = operation_details
            context['menu'] = 'i'
            elements = list()
            top_entity = context['top_entity']

            tops = top_entity.lines()
            bool(tops)

            context['lvl'] = nature

            if nature == -1 and context['permissions'] >= 0:
                nature = 0

            if context['permissions'] == 0:
                nature = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
                    'm_institution').last().m_hierachie
                bool(nature)

            context['nature'] = nature
            context['next_nature'] = nature + 1
            # If any Tops have been created, redirection

            if tops.first() == None:
                template = "webpages/ctn_bpf/index_empty.html"
                context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                    'actual_institution']).select_related('m_institution').first().m_entity_type
                tmp_lines = list()
            else:
                if context["entity_manage"] != None:
                    hierachy = context["entity_manage"].m_type_entity.hierachie()
                    hierachi_id = context["entity_manage"].id
                    return redirect("gestionnaire/" + str(hierachy) + "/" + str(hierachi_id) + "/")
                else:
                    template = "webpages/ctn_bpf/operations_home.html"
                nb_elements = 0
                for t in tops:
                    elements.append({'entity': t, 'values': t.levels(nature, context['actual_institution'])})

                context['elements'] = elements
                context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                    'actual_institution']).select_related('m_institution').first()
                if context['type_entity'] != None:
                    context["type_entity"] = context["type_entity"].m_entity_type
                    tmp_lines = context['type_entity'].lines()
                else:
                    tmp_lines = list()
            # Moyenne de Progression
            nb_elt = 0
            progress = 0
            """
    		for elt in tmp_lines:
    			progress += elt.progression()
    			nb_elt += 1
    		if nb_elt > 0:
    			progress /= nb_elt
    		"""

            progress = context['actual_institution'].progression()
            context['actual_progression'] = round(progress, 2)
            paginator_o = Paginator(elements, 6)
            page_number_o = request.GET.get('page')
            elements_page = paginator_o.get_page(page_number_o)
            # oeuvres_date
            context['pages_o'] = elements_page
            context['num_pages'] = paginator_o.num_pages
            context['page_range'] = paginator_o.page_range

        return render(request, template, context)

    def index(request, nature=-1):
        if request.user.is_authenticated:

            return index_log(request, nature)
        else:
            context = dict()
            try:
                personnel_opera = settings.PERSONNAL_OPERA
                context["personnel_opera"] = personnel_opera
                if personnel_opera:
                    context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
            except:
                personnel_opera = None

            template = "webpages/ctn_bpf/presentation.html"
            # context['temoignages'] = Temoignage.objects.filter()[:3]
            context['institution_count'] = Institution.objects.count()
            context['projet_count'] = 0
            tmp1 = InsitutionEntities.objects.filter(m_hierachie=1)
            for t in tmp1:
                context['projet_count'] += t.m_entity_type.lines().count()
            context['operations_count'] = Operation.objects.count()
            context['personnel_count'] = Personnel.objects.count()
        try:
            if request.session['too_much_ins'] == 1:
                context['too_much_ins'] = True
            # request.session['too_much_ins'] = None
        except:
            pass
        try:
            if request.session['assistance'] == 1:
                context['assist_send'] = True
                request.session['assistance'] = None
        except:
            pass
        return render(request, template, context)

    def bad_auth(request):
        template = "webpages/ctn_bpf/bad_auth.html"
        context = {
            'error': "Erreur au niveau de l'Adresse/Mot de Passe"
        }
        return render(request, template, context)

    def main(request, menu_main=0):
        template = "webpages/ctn_bpf/main.html"
        if menu_main == 1:
            template = "webpages/ctn_bpf/presentation_framework.html"
        elif menu_main == 2:
            template = "webpages/ctn_bpf/presentation_documentation.html"
        docus = OperaFile.objects.filter(m_category="DOC")
        apps = OperaApp.objects.filter()
        context = {
            "docus": docus,
            "apps": apps
        }
        return render(request, template, context)

    def gestionnaire_search(request):
        generator = request.POST['generator']
        name = request.POST['search']
        if generator == '0':
            hierachy = int(request.POST['hierachy'])
            gest = int(request.POST['gest'])
            response = gestionnaire(request, hierachy, gest, name)
        elif generator == 'o':
            gest = int(request.POST['gest'])
            response = ges_taches(request, gest, None, name)
        elif generator == 's':
            response = structures(request, name)
        elif generator == 'r':
            response = roles(request)
        elif generator == 'p':
            response = personnels(request, name)
        elif generator == 'i2':
            hierachy = int(request.POST['hierachy'])
            gest = int(request.POST['gest'])
            response = evaluer(request, hierachy, gest, name)
        elif generator == "ex":
            response = extra(request, name)
        elif generator == "dSV":
            pass
        return response

    # @cache_page(60 * 15)
    # @login_required(login_url='/log_account')
    # def gestionnaire(request, gest_val, gest_id=0, name=None, structure=None, periode=None, enums="#"):
    #     tmp_gest_val = gest_val
    #     context = basis(request)
    #     actual_institution = context['actual_institution']
    #     bool(actual_institution)

    #     context['base_img_val'] = context['actual_institution'].img.url

    #     if int(gest_val) == -1:
    #         gest_val = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
    #             'm_institution').last().m_hierachie
    #         bool(gest_val)
    #         tmp_gest_val = gest_val
    #     try:
    #         entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,
    #                                                    m_institution=actual_institution).select_related(
    #             'm_institution').first().m_entity_type
    #     except:
    #         entity = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
    #             'm_institution').last().m_entity_type

    #     is_tache = False
    #     context['is_sub_tache'] = False
    #     context['detail_g_v'] = False
    #     context['sup_hierachy'] = list()
    #     if gest_id != 0:
    #         # gest_val = str(int(gest_val) + 1)
    #         # entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,m_institution=context['actual_institution']).first().m_entity_type
    #         sup_entity = Entity.objects.filter(id=gest_id).first()
    #         if sup_entity != None:
    #             lines = sup_entity.sub_entities()
    #         else:
    #             lines = list()
    #         tmp_gest_val = str(int(gest_val) + 1)
    #         sub_type = InsitutionEntities.objects.filter(m_hierachie=tmp_gest_val,
    #                                                      m_institution=context['actual_institution']).select_related(
    #             'm_institution').first()

    #         if context["permissions"] <= 0 and sup_entity in context["my_entities"]:
    #             context["autoE"] = 1
    #         elif context["permissions"] <= 0:
    #             for t in sup_entity.sup_hierachie():
    #                 if t in context["my_entities"]:
    #                     context["autoE"] = 1
    #                     break
    #         if sub_type != None:  # Ce n'est pas une tache
    #             sub_type = sub_type.m_entity_type
    #             fields = sub_type.fields()
    #             context['is_sub_tache'] = sub_type.is_tache
    #             context['sub_entity'] = sub_type
    #             context['base_val'] = sup_entity
    #             context['sub_entities'] = sup_entity.sub_entities()
    #             context['gest_id'] = gest_id
    #             context['objects_field'] = sub_type.objects_field()
    #             context['calculates_field'] = sub_type.calculates_field()
    #             if sup_entity != None:
    #                 if sup_entity.m_type_entity.is_pic_represented == True and sup_entity.m_pic_represented != None:
    #                     try:
    #                         context['base_img_val'] = sup_entity.m_pic_represented.url
    #                     except:
    #                         pass
    #             actu_entity = sub_type
    #         else:
    #             is_tache = True
    #             fields = list()
    #             actu_entity = entity
    #         context['detail_g_v'] = True
    #     else:
    #         actu_entity = entity
    #         enmPT = actu_entity.enum_fields()['result']
    #         """
    # 		test_PT = dict()
    # 		for e in enmPT:
    # 			test_PT[e['name']] = e['lines']
    # 		"""
    #         lines = entity.lines()
    #         is_tache = entity.is_tache
    #         fields = entity.fields()
    #         context['objects_field'] = entity.objects_field()
    #         context['calculates_field'] = entity.calculates_field()

    #     if name != None:
    #         tmp = list()
    #         for l in lines:
    #             if name in l.get_name():
    #                 tmp.append(l)
    #         lines = tmp

    #     if structure != None:
    #         tmp = list()
    #         for l in lines:
    #             if l.structure == structure:
    #                 tmp.append(l)
    #         lines = tmp

    #     if periode != None:
    #         tmp = list()
    #         for l in lines:
    #             if periode in l.plannification():
    #                 tmp.append(l)
    #         lines = tmp

    #     context['is_tache'] = is_tache
    #     context['hierachy'] = int(tmp_gest_val)
    #     context['next_hierachy'] = int(tmp_gest_val) + 1
    #     context['gest_val'] = int(gest_val)
    #     context['entity'] = entity
    #     context['actu_entity'] = actu_entity
    #     context['sup_zone'] = entity.sup_entity(actual_institution.id)
    #     context['fields'] = fields
    #     # context['lines'] = lines
    #     context['menu'] = 'g'
    #     paginator_o = Paginator(list(lines), 10)
    #     page_number_o = request.GET.get('page')
    #     elements_page = paginator_o.get_page(page_number_o)
    #     # oeuvres_date
    #     context['pages_o'] = elements_page
    #     context['num_pages'] = paginator_o.num_pages
    #     context['page_range'] = paginator_o.page_range

    #     if int(tmp_gest_val) > 0 and gest_id != 0:
    #         context['sup_hierachy'] = sup_entity.sup_hierachie()

    #     if (int(tmp_gest_val) - 1 > 0) and InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
    #                                                                          m_institution=context[
    #                                                                              'actual_institution']).select_related(
    #             'm_institution').first() == None:
    #         context['none_search'] = True
    #     else:
    #         context['first_sup_search'] = True

    #     if tmp_gest_val == '0' and entity.m_enum_values in ["", None]:
    #         context['none_search'] = True
    #     context['searches'] = list(InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
    #                                                                  m_institution=context[
    #                                                                      'actual_institution']).select_related(
    #         'm_institution'))
    #     """
    # 	if is_tache or context['is_sub_tache']:
    # 		context['searches'].append({'label':'Structure','code':'s','values':context['structures']})
    # 	"""
    #     try:
    #         if context['base_val'] != None:
    #             taches = list()  # context['base_val'].taches()
    #             struc = set()
    #             for t in taches:
    #                 struc.add(t.structure)

    #             context['structures_not_null'] = struc
    #     except:
    #         pass
    #     try:

    #         if context["entity_manage"] != None:
    #             context["not_add"] = 1
    #             entityd = Entity.objects.get(id=context['base_val'].id)
    #             if entityd in context["my_entities"]:

    #                 if context["role"].m_role.permissions >= 0:
    #                     context["permissions"] = 0
    #                 if context["permissions"] >= 0:
    #                     request.session["permissions_valider"] = True
    #             else:
    #                 if request.session["permissions_valider"] == True:
    #                     pass  # context["permissions"] = -100
    #     except:
    #         pass
    #     if context['permissions'] < 0:
    #         template = "webpages/ctn_bpf/entities_simple_user.html"
    #         try:
    #             if context['base_val'].id == context['entity_manage'].id:
    #                 context["auto_simple"] = 1
    #         except:
    #             pass
    #     else:
    #         if is_tache or context['is_sub_tache'] == True:
    #             template = "webpages/ctn_bpf/taches.html"
    #             context['structures'] = Structure.objects.filter(
    #                 institution=context['actual_institution']).select_related('institution')
    #         else:
    #             template = "webpages/ctn_bpf/entities.html"

    #     if enums != "#":
    #         context['da_enums'] = enums
    #     if is_tache and gest_id != 0:
    #         response = redirect('/taches/' + str(gest_id) + '/')
    #     else:
    #         response = render(request, template, context)
    #     return response

    @login_required(login_url='/log_account')
    def messengers(request):
        context = basis(request)
        template = "webpages/ctn_bpf/messengers.html"
        return render(request, template, context)

    # @cache_page(60 * 15)
    def ges_taches(request, tache_id, arg_period=None, search=None):
        context = basis(request)
        base_val = Tache.objects.get(id=int(tache_id))
        lines = Operation.objects.filter(tache=base_val).select_related('tache')
        lines_tache = lines
        context['sup_hierachy'] = base_val.sup_hierachie()

        if search != None:
            tmp = lines
            lines = list()
            for l in tmp:
                if search in str(l):
                    lines.append(l)
        context['arg_period'] = arg_period
        if arg_period != None:
            periodes = base_val.plan_months()
            prd = periodes[(arg_period - 1)]
            context['periodes'] = prd
            lines = lines.filter(m_tache_plannification=prd)
            context['test'] = list()
            actual_institution = context['actual_institution']
            week = list()
            for t in actual_institution.default_subperiod.decoup_desc_slip2():
                week.append({'per': t, 'val': list()})
            for l in lines:
                ps = l.periodes()
                t_ps = ps.desc_split()
                i_p = 0
                for t in t_ps:
                    if int(t) == 0:
                        week[i_p]['val'].append(l)
                        break
                    i_p += 1
            context['test'] = week

        context['none_search'] = True
        context['entity'] = base_val.m_type_entity
        context['base_val'] = base_val
        context['sub_entity'] = context['actual_institution'].operations_name
        tmp_perso = Personnel.objects.filter()
        context['personnels'] = set()
        for t in tmp_perso:
            if context['actual_institution'] in t.all_institutions():
                context['personnels'].add(t)
        context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
            'actual_institution')
        plan = base_val.plannification()
        if plan != None:
            context['searches'] = [{'label': '', 'values': base_val.plannification().table(), 'not_filter': True}]
        else:
            context['searches'] = [{'label': '', 'values': ["Aucune Valeur"], 'not_filter': True}]
        context['g_v'] = 'o'
        context['menu'] = 'go'
        base_valE = Entity.objects.get(id=base_val.id)

        if context["permissions"] <= 0 and base_valE in context["my_entities"]:
            context["autoE"] = 1
        elif context["permissions"] <= 0:
            for t in base_val.sup_hierachie():
                if t in context["my_entities"]:
                    context["autoE"] = 1
                    break

        if context['permissions'] < 0:
            template = "webpages/ctn_bpf/operations_simple_user.html"
            if context['base_val'].id == context['entity_manage'].id:
                context["auto_simple"] = 1
                lines = lines_tache
        else:
            if arg_period is None:
                template = "webpages/ctn_bpf/operations.html"
            else:
                template = "webpages/ctn_bpf/operations_periodes.html"

        paginator_o = Paginator(lines, 12)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        context['lines'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range
        # context['roles_RACI'] =
        try:
            if request.session["permissions_valider"] == True:
                context["permissions"] = 0
                context["not_add"] = 1
        except:
            pass
        return render(request, template, context)

    def structure_hie(request):
        return structures(request, None, 1)

    # def structures(request, name=None, hierachie=None):
    #     template = "webpages/ctn_bpf/structure.html"
    #     context = basis(request)
    #     context['entity'] = str(context['actual_institution'].default_struc_name)
    #     context['lines'] = Structure.objects.filter(institution=context['actual_institution']).select_related(
    #         'institution')
    #     if name != None:
    #         context['lines'] = context['lines'].filter(nom__contains=name)
    #     context['fields'] = ['Logo', 'Nom',
    #                          'Designation',
    #                          'Responsable', 'Total : ' + str(context['actual_institution'].last_entity())]
    #     context['menu'] = 's'
    #     context['personnels'] = Personnel.objects.filter(
    #         actual_institution=context['actual_institution']).select_related('actual_institution')
    #     context['g_v'] = 's'
    #     context['none_search'] = True
    #     if hierachie != None:
    #         stH = context["actual_institution"].Structure_Hierachy()
    #         vals = ""
    #         for s2 in stH:
    #             s3 = s2.m_levels_fields.split("|")[:-1]
    #             for s in s3:
    #                 vals += str(request.POST[s]) + "|"
    #         tmp = vals.split("#")
    #         re = ""
    #         for tm in tmp:
    #             re += tm.split("|")[0] + "|"
    #         vals = re
    #         context['vals'] = vals
    #         context['lines'] = context['lines'].filter(values_hierachy__contains=vals)
    #         context["stH"] = stH[0].m_levels_fields
    #     return render(request, template, context)

    def structure_details(request, structure_id=0):
        template = "webpages/ctn_bpf/structure_details.html"
        context = basis(request)
        structure = Structure.objects.get(id=int(structure_id))
        entity = context['actual_institution'].last_entity()
        lines = Tache.objects.filter(structure=structure).select_related('structure')

        paginator_o = Paginator(lines, 10)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range
        fields = entity.fields()

        context['structure'] = structure
        context['base_val'] = structure
        # context['gest_id']=gest_id
        context['entity'] = entity
        context['sub_entity'] = entity
        context['objects_field'] = entity.objects_field()
        context['fields'] = fields
        context['is_tache'] = True
        return render(request, template, context)

    def users_simples(request, search=None):
        template = "webpages/ctn_bpf/roles.html"
        fields_personnel = ['photos', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', '']
        fields_roles = ['Role', 'Description', 'Entite']
        personnel = Personnel.objects.filter()
        context = basis(request)
        roles = Role.objects.filter(actual_institution=context['actual_institution'], is_simple_user=1).select_related(
            'actual_institution')

        if search != None:
            roles = roles.filter(nom__contains=search)
        context['entity'] = 'Utilisateur Simple'
        context['fields1'] = fields_personnel
        context['personnel'] = personnel
        context['fields'] = fields_roles
        context['lines'] = roles
        context['g_v'] = 'r'
        context['g_vs'] = 'u2'
        return render(request, template, context)

    def personnels(request, name=None, lis_peros=None):
        template = "webpages/ctn_bpf/roles.html"
        context = basis(request)
        context['entity'] = 'Personnel'
        context['fields'] = ['Photos', 'Nom', 'Prenom', 'Telephone', 'Email', 'Fonction', 'Structures','sexe']
        context['lines'] = list()
        lines2 = set()
        tmp_perso = Personnel.objects.filter()
        if lis_peros == None:
            for t in tmp_perso:
                if context['actual_institution'] in t.all_institutions():
                    atmp = {
                        'id': t.id,
                        'photo': t.photo,
                        'prenom': t.prenom,
                        'nom': t.nom,
                        'tel': t.tel,
                        'mail': t.mail,
                        'sexe':t.sexe,
                        'get_function': t.get_function(context['actual_institution'].id),
                        'get_structure': t.get_structure(context['actual_institution'].id)
                    }
                    context['lines'].append(atmp)
                    lines2.add(t)
        else:
            context['lines'] = lis_peros
        # context['lines'] = Personnel.objects.filter(actual_institution=context['actual_institution'])
        if name != None:
            name = name.lower()
            tmps = context['lines']
            context['lines'] = list()
            for tt in tmps:
                ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
                for t in ta:
                    if name in str(t):
                        context['lines'].append(tt)
                        break
        paginator_o = Paginator(context['lines'], 10)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)

        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range

        context['menu'] = 'g'
        context['g_v'] = 'p2'
        context['g_vs'] = 'p2'
        context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
            'actual_institution')
        context['searches'] = []
        context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
            actual_institution=context['actual_institution']).select_related('actual_institution')})
        context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
            institution=context['actual_institution']).select_related('institution')})
        context['functions'] = list()
        context['structures'] = list()
        for p in lines2:
            context['functions'].append(p.get_function(context['actual_institution'].id))
            context['structures'].append(p.get_structure(context['actual_institution']))
        try:
            if request.session['perso_saved'] > 0:
                context['perso_saved'] = True
                tmp_user = Personnel.objects.get(id=request.session['perso_saved'])
                context['perso_get'] = tmp_user
                request.session['perso_saved'] = None
        except:
            pass
        return render(request, template, context)

    # def personnel_id(request, perso_id):
    #     context = basis(request)
    #     template = "webpages/ctn_bpf/profile.html"
    #     personnel = Personnel.objects.get(id=perso_id)
    #     context["personnel"] = personnel
    #     context["prenom"] = personnel.prenom
    #     context["nom"] = personnel.nom
    #     context["role"] = personnel.get_function(context["actual_institution"].id)
    #     return render(request, template, context)

    """
    def roles(request):
    	template = "webpages/ctn_bpf/personnel_roles.html"
    	context = basis(request)
    	context['lines'] = Role.objects.filter(institution=context['actual_institution'])
    	context['menu'] = 'g'
    	return render(request,template,context)
    """

    def filter_perso(request, structure_id=0, role_id=0):
        if structure_id == 0:
            structure = request.POST["Structure"]
            tds = structure
            if str(structure) != '0':
                structure = Structure.objects.get(id=int(structure))
        else:
            structure = Structure.objects.get(id=structure_id)

        if role_id == 0:
            role = int(request.POST["Fonction"])
            if str(role) != '0':
                role = Role.objects.get(id=role)
        else:
            role = Role.objects.get(id=role_id)
        personnel = Personnel.objects.filter()
        context = basis(request)
        result = list()
        if structure != '0':
            for p in personnel:
                if p.get_structure() != None and p.get_structure().m_structure == structure:
                    result.append(p)
        if role != '0':

            if structure == '0':
                tmp = personnel
            else:
                tmp = result
            result = list()
            for p in tmp:

                if p.get_function() != None and p.get_function().m_role == role:
                    result.append(p)
        return personnels(request, None, result)

    def gestionnaire_id(request, gest_val, gest_id):
        pass

    # def log(request, out=False):
    #     if out == False:
    #         response = "/log_account/"
    #         result = False
    #         try:
    #             request.session['bad_log'] += 1
    #             if request.session['bad_log'] > 0:
    #                 response = "/bad_auth/"
    #         except:
    #             request.session['bad_log'] = 1
    #             request.session['try_log'] = True
    #         r_email = request.POST['email']
    #         r_password = request.POST['password']
    #         users = User.objects.filter(email=r_email)
    #         r_username = User.objects.filter(email=r_email).last()
    #         if r_username != None:
    #             r_username = r_username.username
    #             user = authenticate(username=r_username, password=r_password)
    #             if user:
    #                 login(request, user)
    #                 result = True
    #                 response = "/"
    #             else:
    #                 if users.count() > 2:
    #                     for u in users:
    #                         r_username = u.username
    #                         u_tmp = authenticate(username=r_username, password=r_password)
    #                         if u_tmp:
    #                             login(request, u_tmp)
    #                             result = True
    #                             response = "/"
    #             request.session['logged'] = 1
    #             request.session['bad_log'] = None
    #     else:
    #         logout(request)
    #         response = "/"
    #     return redirect(response)

    def specific_log(request, type_view=0):
        template = "webpages/ctn_bpf/specific_log.html"
        context = {

        }
        if type_view == 2:
            context['specific'] = 0  # Not Code
        return render(request, template, context)

    def save_entity(request):
        try:
            institution = Institution.objects.get(id=int(request.POST['institution']))
        except:
            institution = basis(request)['actual_institution']
        try:
            operation_aggregate = request.POST['ope_aggregate']
        except:
            entity_nom = request.POST['entity_nom']
            entity_hierachy = request.POST['entity_hierachy']
            fields_name = request.POST['fields_name']
            fields_type = request.POST['fields_type']
            rapp_fields_name = request.POST['fields_name2']
            rapp_fields_type = request.POST['fields_type2']
            if request.POST['entity_image'] == '0':
                entity_image = False
            else:
                entity_image = True
            edit_or_create = request.POST['edit_or_create']
            operation_aggregate = None
            enum_fields = request.POST['enum_fields']
        if operation_aggregate is None:
            if edit_or_create == 'e':
                edit_id = request.POST['edit_id']
                institutionEntity = InsitutionEntities.objects.get(id=int(edit_id))
                entity = institutionEntity.m_entity_type
                actual_fields = entity.fields()
                actual_values = entity.lines()
                for l in actual_values:
                    value = l.m_value_fields
                    tmp = ""
                    for f in fields_name.split("|")[:-1]:
                        if f not in actual_fields:
                            tmp += " |"
                        else:
                            tmp += str(l.get_value(f)) + "|"
                    l.m_value_fields = tmp
                    l.save()
            else:
                entity = EntityType(m_nom=entity_nom)
            entity.is_pic_represented = entity_image
            entity.m_nom = entity_nom
            entity.m_fields = fields_name
            entity.m_type_fields = fields_type
            entity.m_fields_rapported = rapp_fields_name
            entity.m_type_fields_rapp = rapp_fields_type
            entity.m_enum_values = enum_fields
            entity.indicateur_fields = request.POST['indicateurs_field']
            entity.save()
            # tache hierachy modifier
            hierachie = int(entity_hierachy) + 1

            # Decalage des Relations
            if edit_or_create != 'e':

                to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
                for d in to_decaler:
                    d.m_hierachie += 1
                    d.save()
                institutionEntity = InsitutionEntities(m_hierachie=hierachie, m_entity_type=entity,
                                                       m_institution=institution)
                if to_decaler.first() == None:
                    institutionEntity.m_entity_type.is_tache = True
                    institutionEntity.m_entity_type.save()
            else:
                institutionEntity.m_hierachie = hierachie
            institutionEntity.save()
        else:
            edit_or_create = request.POST['edit_or_create_O']
            aggregate_name = request.POST['aggregate_name']
            aggregate_fields_name = request.POST['aggregate_fields_name']
            aggregate_fields_type = request.POST['aggregate_fields_type']
            aggregate_rap_fields_name = request.POST['aggregate_rap_fields_name']
            aggregate_rap_fields_type = request.POST['aggregate_rap_fields_type']

            # Aggregates launching
            aggregates = institution.operations_modules()
            # Aggregates launching

            if aggregates == None:
                aggregates = Aggregate(m_institution=institution)

            aggregates.m_nom = aggregate_name
            aggregates.m_fields = aggregate_fields_name
            aggregates.m_type_fields = aggregate_fields_type
            aggregates.m_fields_rapported = aggregate_rap_fields_name
            aggregates.m_type_fields_rapp = aggregate_rap_fields_type
            aggregates.save()
        return redirect('/configurations/')

    # def save_entity_value(request):
    #     institution = int(request.POST['institution'])
    #     hierachie = int(request.POST['hierachie'])
    #     if hierachie != -1:
    #         type_entity = InsitutionEntities.objects.filter(m_hierachie=hierachie,
    #                                                         m_institution__id=institution).first()
    #     else:
    #         type_entity = InsitutionEntities.objects.filter(m_institution__id=institution).last()
    #     type_entity = type_entity.m_entity_type
    #     fields_value = request.POST['fields']
    #     edit_or_create = request.POST['edit_or_create']

    #     is_tache = request.POST['is_tache']
    #     if is_tache == 'True':
    #         if edit_or_create == 'e':
    #             edit_id = request.POST['edit_id']
    #             entity = Tache.objects.get(id=int(edit_id))
    #             entity.m_value_fields = fields_value
    #             entity.m_type_entity = type_entity
    #         else:
    #             entity = Tache(m_value_fields=fields_value, m_type_entity=type_entity)
    #         structures_list = request.POST['structures_list']  # getFieldValues()
    #         structures_roles = request.POST['structures_roles']
    #         try:
    #             entity.montant = float(request.POST["finances"])
    #         except:
    #             pass
    #         entity.save()
    #         r_struc = list()
    #         tmp_struc = list()
    #         r_roles = structures_roles
    #         r_roles = r_roles.split('\n')
    #         i = 0

    #         for s in structures_list.split('|')[:-1]:
    #             if s not in tmp_struc:
    #                 tmp_struc.append(s)
    #         for s in tmp_struc:
    #             r_struc.append(Structure.objects.get(id=int(s)))
    #         r_struc.sort(key=lambda x: x.nom)
    #         try:
    #             if edit_or_create == 'e':
    #                 for s in entity.structures.filter():
    #                     s.delete()
    #             for s in r_struc:
    #                 if s == 0:
    #                     pass
    #                 else:
    #                     r_str = StructureRole(m_structure=s, m_role=r_roles[i])
    #                     r_str.save()
    #                     entity.structures.add(r_str)
    #                     i += 1
    #             entity.structure = entity.structures.first().m_structure  # next(iter(r_struc)).m_structure
    #         except:
    #             pass

    #         entity.save()
    #         calendar = request.POST['calendar_selected']
    #         periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
    #         if edit_or_create == 'e' and calendar != "#":
    #             plani_tche = TachePlannify.objects.filter(m_tache=entity)
    #             for p in plani_tche:
    #                 p.delete()
    #         if calendar != "#":
    #             plani_tche = TachePlannify(m_tache=entity, m_planify=calendar, m_periode=periode)
    #             plani_tche.save()
    #             set_pv_tp(plani_tche)
    #     else:
    #         if edit_or_create == 'e':
    #             edit_id = request.POST['edit_id']
    #             entity = Entity.objects.get(id=int(edit_id))
    #             entity.m_value_fields = fields_value
    #             entity.m_type_entity = type_entity
    #         else:
    #             entity = Entity(m_value_fields=fields_value, m_type_entity=type_entity)
    #         entity.save()
    #     try:
    #         sup_entity = request.POST['sup_entity']
    #     except:
    #         sup_entity = None
    #     # relations_entities
    #     if sup_entity != None:
    #         sup_entity = Entity.objects.get(id=int(sup_entity))

    #         if edit_or_create == 'e':
    #             delete_hierachie = EntityHierachie.objects.filter(m_sub_entity=entity).first()
    #             if delete_hierachie != None:
    #                 delete_hierachie.delete()
    #         entity_hierachie = EntityHierachie(m_sub_entity=entity, m_sup_entity=sup_entity)
    #         entity_hierachie.save()

    #     # Image de Couverture
    #     try:
    #         entity.m_pic_represented = request.FILES["cover_img"]
    #         entity.save()
    #     except:
    #         pass

    #     i_f = 0
    #     fields_name = entity.m_type_entity.fields()
    #     for f in entity.m_type_entity.type_fields():
    #         if f in ['file', 'image']:
    #             try:
    #                 eF = EntityFile(m_entity=entity, m_field=f, m_file=request.FILES[fields_name[i_f]])
    #                 eF.save()
    #                 entity.set_value(fields_name[i_f], str(eF.id))
    #             except:
    #                 entity.set_value(fields_name[i_f], str("Aucun Fichier"))
    #             entity.save()
    #         i_f += 1
    #     base_val = request.POST["base_val"]

    #     # Enumerations Values
    #     split_extras1(entity)  # Clean the Error Files

    #     if base_val not in ['', ' ', '0', None]:
    #         response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
    #     else:
    #         response = "/gestionnaire/" + str(hierachie) + "/"
    #     response = redirect(response)
    #     return response

    # def save_gestion(request):
    #     context = basis(request)
    #     generator = request.POST['generator']
    #     edit_or_create = request.POST['edit_or_create']
    #     try:
    #         r_redirect = request.POST['redirect']
    #     except:
    #         pass
    #     if generator == 'i':
    #         r_sigle = request.POST['sigle']
    #         r_nom = request.POST['nom']
    #         r_image = request.FILES['image']
    #         institution = Institution(sigle=r_sigle, nom=r_nom, img=r_image)
    #         institution.save()
    #         response = "/gestionnaire/i/"
    #     elif generator == 'eD':
    #         r_nom = request.POST['nom']
    #         # r_fields_type = request.POST['fields_type']
    #         # r_fields = request.POST['fields']
    #         r_domain_type = request.POST['domain_type']
    #         r_value_type = request.POST['value_type']
    #         r_aggregation_type = request.POST['aggregation_type']
    #         r_description = request.POST['description']
    #         try:
    #             r_null_conserv = request.POST['null_conserv']
    #         except:
    #             r_null_conserv = 0
    #         try:
    #             r_fill_valid = request.POST['fill_valid']
    #         except:
    #             r_fill_valid = 0
    #         try:
    #             r_logo = request.FILES['logo']
    #         except:
    #             r_logo = None
    #         r_default_value = request.POST["default_value"]

    #         dE = DataElement(m_name=r_nom)
    #         if r_logo != None:
    #             m_logo = r_logo
    #         dE.m_domain_type = r_domain_type
    #         dE.m_value_type = r_value_type
    #         dE.m_aggregation_type = r_aggregation_type
    #         dE.m_description = r_description

    #         try:
    #             if int(r_null_conserv) == 1:
    #                 dE.is_zero_collect = True
    #         except:
    #             dE.is_zero_collect = False
    #         try:
    #             if int(r_fill_valid) == 1:
    #                 if request.POST['default_value'] == None:
    #                     tmp = 0
    #                 else:
    #                     tmp = request.POST['default_value']
    #                 dE.m_default_value = int(tmp)
    #         except:
    #             dE.m_default_value = None
    #         actual_institution = context['actual_institution']
    #         dE.m_institution = actual_institution
    #         dE.save()
    #         response = "/dataelts/"
    #     elif generator == 'a0':
    #         r_user = User.objects.get(id=int(request.POST['user']))
    #         r_message = request.POST['message']
    #         a = Assistance(m_user=r_user, m_message=r_message)
    #         a.save()
    #         request.session['assistance'] = 1
    #         response = "/assistance/"
    #     elif generator == "str":
    #         actual_institution = context['actual_institution']
    #         r_value = request.POST['value']
    #         actual_institution.default_struc_name = r_value
    #         actual_institution.save()
    #         response = "/structures/"
    #     elif generator == "p2":
    #         r_nom = request.POST['nom']
    #         r_prenom = request.POST['prenom']
    #         r_mail = request.POST['mail']
    #         r_tel = request.POST['tel']
    #         personnel_saved = Personnel.objects.filter(mail=r_mail).first()
    #         try:
    #             r_img = request.FILES['photo']
    #         except:
    #             if edit_or_create != 'e':
    #                 r_img = OperaFile.objects.filter(m_name="USR").first().m_file
    #             else:
    #                 r_img = None
    #         if personnel_saved == None:
    #             tes_none = (User.objects.filter(email=r_mail).first())
    #             if tes_none != None:
    #                 try:
    #                     personnel_saved = tes_none.personnel
    #                 except:
    #                     personnel_saved = Personnel(bd_user=tes_none, nom=r_nom, prenom=r_prenom, mail=r_mail,
    #                                                 photo=r_img, actual_institution=context['actual_institution'],tel=r_tel)
    #                     personnel_saved.save()

    #         try:
    #             r_structure = request.POST['Structure']
    #         except:
    #             r_structure = '0'
    #         if r_structure != '0':
    #             r_structure = Structure.objects.get(id=int(r_structure))
    #         else:
    #             r_structure = None
    #         r_role = request.POST['Fonction']
    #         r_role = Role.objects.get(id=int(r_role))
    #         edit_or_create = request.POST['edit_or_create']
    #         if edit_or_create != 'e':
    #             if personnel_saved == None:
    #                 
    #                 password = ""
    #                 for i in range(0, 8):
    #                     password += str(random.randint(0, 9))
    #                 usn = str(password) + str(User.objects.count() + 2)
    #                 r_bd_user = User(username=usn, email=r_mail)
    #                 subject = "Nouveau Compte Opera +"
    #                 message_context = {
    #                     'password': password,
    #                     'name': r_nom + "" + r_prenom
    #                 }
    #                 message = render_to_string('webpages/ctn_bpf/mails/new_personnel.html', message_context)
    #                 email = r_mail
    #                 email_from = settings.EMAIL_HOST_USER
    #                 recipient_list = [email, ]
    #                 msg = EmailMessage(subject, message, email_from, recipient_list)
    #                 msg.content_subtype = 'html'
    #                 try:
    #                     msg.send()
    #                     r_bd_user.set_password(password)
    #                 except:
    #                     r_bd_user.set_password("user1234")
    #                 # r_bd_user.set_password('User'+password)
    #                 r_bd_user.save()
    #                 personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, photo=r_img,
    #                                       actual_institution=context['actual_institution'],tel=r_tel)
    #                 personnel.bd_user = r_bd_user
    #             else:
    #                 personnel = personnel_saved
    #         else:
    #             edit_id = request.POST['edit_id']
    #             if personnel_saved == None:
    #                 personnel = Personnel.objects.get(id=int(edit_id))
    #             else:
    #                 personnel = personnel_saved
    #             personnel.nom = r_nom
    #             personnel.prenom = r_prenom
    #             personnel.mail = r_mail
    #             personnel.bd_user.email = r_mail
    #             personnel.m_tel = r_tel
    #             personnel.bd_user.save()
    #             if r_img != None:
    #                 personnel.photo = r_img
    #         if personnel_saved == None:
    #             personnel.save()
    #         else:
    #             request.session['perso_saved'] = personnel_saved.id
    #         try:
    #             simple_user = request.POST['simple_user']
    #         except:
    #             simple_user = '0'
    #         if simple_user == '0':
    #             ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
    #             ps.save()
    #             pf = Personnel_Function.objects.filter(m_personnel=personnel,
    #                                                    m_institution=context['actual_institution']).first()
    #             if pf == None:
    #                 pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
    #                                         m_institution=context['actual_institution'])
    #             else:
    #                 pf.m_role = r_role
    #             pf.save()
    #         else:
    #             entity = Entity.objects.get(id=int(simple_user))
    #             pf = Personnel_Function.objects.filter(m_personnel=personnel,
    #                                                    m_institution=context['actual_institution']).first()
    #             if pf == None:
    #                 pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
    #                                         m_institution=context['actual_institution'])
    #             pf.m_entity = entity
    #             pf.save()

    #             ps = Personnel_Function.objects.filter(m_personnel=personnel,
    #                                                    m_institution=context['actual_institution']).first()
    #             ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
    #             ps.save()
    #         response = "/personnels/"
    #     elif generator == "r":  # Role
    #         r_nom = request.POST['nom']
    #         r_description = request.POST['description']
    #         r_permission = request.POST['permission']
    #         r_institution = Institution.objects.get(id=int(request.POST['institution']))
    #         r_ros_click = request.POST["ros_click"]

    #         if int(r_ros_click) in [1, 2]:
    #             r_permission = "-1"

    #         if r_permission == '-1':
    #             r_permission = 0
    #         else:
    #             permissions_hierachie = InsitutionEntities.objects.filter(
    #                 m_institution=r_institution).last().m_hierachie
    #             if (permissions_hierachie + 1) >= int(r_permission):
    #                 r_permission = 0  # (permissions_hierachie+1) - int(r_permission)
    #             else:
    #                 r_permission = int(r_permission)
    #         if edit_or_create == 'c':
    #             role = Role(actual_institution=r_institution, nom=r_nom, description=r_description,
    #                         permissions=r_permission)
    #         else:
    #             edit_id = request.POST['edit_id']
    #             role = Role.objects.get(id=int(edit_id))
    #             role.nom = r_nom
    #             role.description = r_description
    #             role.permissions = r_permission
    #         if int(r_ros_click) == 1:
    #             r_entity_administr = request.POST["permission_entity"]
    #             eH = InsitutionEntities.objects.filter(id=int(r_entity_administr)).first().m_entity_type
    #             role.m_simple_auth = eH
    #             entities = list()
    #             """
    # 			for e in r_entity_administr.split("#")[:-1]:
    # 				entities.append(Entity.objects.get(id=int(e)))
    # 			"""
    #             role.save()
    #             # role.m_entities.set(entities)
    #             role.m_nature = "1"
    #         elif int(r_ros_click) == 2:
    #             role.permissions = -100
    #             user_simple_entity = request.POST['user_simple_entity']
    #             role.is_simple_user = 1
    #             role.m_simple_auth = EntityType.objects.get(id=int(user_simple_entity))
    #         role.save()
    #         response = "/roles/"
    #     elif generator == "s":
    #         try:
    #             r_pic = request.FILES["logo"]
    #         except:
    #             r_pic = None
    #         r_nom = request.POST['nom']
    #         r_designation = request.POST['designation']
    #         r_institution = request.POST['Institution']
    #         r_institution = Institution.objects.filter(id=int(r_institution)).first()
    #         try:
    #             r_responsable = Personnel.objects.filter(id=int(request.POST['responsable'])).first()
    #         except:
    #             r_responsable = None
    #         if edit_or_create == 'e':
    #             edit_id = int(request.POST['edit_id'])
    #             structure = Structure.objects.get(id=int(edit_id))
    #             structure.photo = r_pic
    #             structure.nom = r_nom
    #             structure.designation = r_designation
    #             structure.institution = r_institution
    #         else:
    #             structure = Structure(nom=r_nom, designation=r_designation,
    #                                   institution=r_institution)  # ,responsable=r_responsable
    #             if r_pic != None:
    #                 structure.photo = r_pic
    #         structure.save()

    #         if r_responsable != None:
    #             if edit_or_create == 'c':
    #                 sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
    #             else:
    #                 edit_id = int(request.POST['edit_id'])
    #                 structure = Structure.objects.get(id=int(edit_id))
    #                 sR = StructureResponsable.objects.filter(m_structure=structure).first()
    #                 if sR == None:
    #                     sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
    #                 else:
    #                     sR.m_responsable = r_responsable
    #             sR.save()
    #         response = "/structures/"
    #     elif generator == 'd_s_1':
    #         if edit_or_create == "c":
    #             dS = DataSet()
    #             dS.save()
    #             response = "/data_sets/design/" + str(dS.id) + "/"
    #             form_part = False
    #         else:
    #             edit_id = request.POST["edit_id"]
    #             dS = DataSet.objects.get(id=int(edit_id))

    #             try:
    #                 form_html = request.POST["form_design"]
    #                 response = "/data_form/-1/0/"
    #                 form_part = True
    #                 for v in dS.m_dataelements.filter():
    #                     form_html = form_html.replace("dE$" + str(v.id) + "$",
    #                                                   "<div class='variableSelector'>  <div><input class='form-control' name='D0elt" + str(
    #                                                       v.id) + "' type='text'></div> </div>")  # <div><label><small>"+str(v)+"</small></label></div>
    #                 for v in dS.m_indicateurs.filter():
    #                     form_html = form_html.replace("dI$" + str(v.id) + "$",
    #                                                   "<div class='indicSelector' data-id='" + str(v.id) + "'> </div>")
    #                 dS.m_formulaire = form_html
    #             except:
    #                 response = "/data_sets/design/" + str(dS.id) + "/"
    #                 form_part = False
    #         if not form_part:
    #             form_name = request.POST["form_name"]
    #             if form_name not in [None, ""]:
    #                 dS.m_name = form_name
    #             dS.m_periode = request.POST["periode"]
    #             dS.m_sub_periode = request.POST["sub_periode"]

    #             """
    # 			r_indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
    # 			dS.m_indicateur = r_indicateur
    # 			"""
    #             dS.m_institution = context["actual_institution"]
    #             # ephoxVariables_input = request.POST["ephoxVariables_input"]
    #             variables_list = request.POST["variables_list"].split("#")
    #             indicateurs_list = request.POST["indicateurs_list"].split("#")
    #             variables_set = set()
    #             indicateurs_set = set()

    #             for v in variables_list[:-1]:
    #                 dE = DataElement.objects.get(id=int(v))
    #                 variables_set.add(dE)

    #             for v in indicateurs_list[:-1]:
    #                 dI = Indicateur.objects.get(id=int(v))
    #                 indicateurs_set.add(dI)

    #             """
    # 			if ephoxVariables_input != "#":
    # 				id_insert = 1
    # 				ephoxVar = ephoxVariables_input.split("#")
    # 				for v in ephoxVar[1:-1]:
    # 					dE = DataElement.objects.get(id=int(v))
    # 					dS.m_formulaire = dS.m_formulaire.replace("de$"+str(v)+"$","<div class='variableSelector'> <div><label><small>"+str(dE)+"</small></label></div> <div><input class='form-control' name='"+str(id_insert)+"' type='text'></div> </div>")
    # 					id_insert += 1
    # 					variables_set.add(dE)
    # 				dS.save()
    # 			"""
    #             variables_set = list(variables_set)
    #             indicateurs_set = list(indicateurs_set)
    #             dS.m_dataelements.set(variables_set)
    #             dS.m_indicateurs.set(indicateurs_set)

    #             r_structure = request.POST["structures_list"].split("$")
    #             structures_set = list()
    #             for r in r_structure[:-1]:
    #                 structures_set.append(Structure.objects.get(id=int(r)))
    #             dS.m_structures.set(structures_set)

    #             r_role = request.POST["roles_list"].split("$")
    #             roles_set = list()
    #             for r in r_role[:-1]:
    #                 roles_set.append(Role.objects.get(id=int(r)))
    #             dS.m_roles.set(roles_set)

    #         dS.save()
    #     elif generator == 'o':
    #         r_m_tache_plannification = request.POST['tache_periode']
    #         r_tache = request.POST['tache']
    #         response = "/taches/" + r_tache + "/"
    #         r_tache = Tache.objects.get(id=int(r_tache))

    #         # r_code = request.POST['code']

    #         r_nom = request.POST['nom']
    #         r_perso = request.POST['perso']
    #         r_accountable = request.POST['accountable']
    #         r_consulted = request.POST['consulted']
    #         r_informed = request.POST['informed']
    #         date_echeance_str = request.POST['date_echeance']
    #         try:
    #             r_role = request.POST['role']
    #         except:
    #             pass
    #         if r_perso != "0":
    #             r_perso = Personnel.objects.get(id=int(r_perso))
    #         else:
    #             r_perso = None
    #         if r_accountable != "0":
    #             r_accountable = Personnel.objects.get(id=int(r_accountable))
    #         else:
    #             r_accountable = None
    #         if r_consulted != "0":
    #             r_consulted = Personnel.objects.get(id=int(r_consulted))
    #         else:
    #             r_consulted = None
    #         if r_informed != "0":
    #             r_informed = Personnel.objects.get(id=int(r_informed))
    #         else:
    #             r_informed = None

    #         """		try:
    # 			r_perso = Personnel.objects.get(id=int(r_perso))
    # 			r_accountable = Personnel.objects.get(id=int(r_accountable))
    # 			r_consulted = Personnel.objects.get(id=int(r_consulted))
    # 			r_informed	 = Personnel.objects.get(id=int(r_informed))
    # 		except:
    # 			pass"""
    #         try:
    #             r_montant = int(request.POST['montant'])
    #         except:
    #             r_montant = 0
    #         file_oko = None
    #         r_chronogr = request.POST['chronogr']
    #         r_who_assign = int(request.POST['who_assign'])
    #         r_sub_period = request.POST['sub_period']
    #         r_notification = request.POST['notification']
    #         r_priorite = request.POST['priorite']
    #         try:
    #             r_operation_aggregates = request.POST['operation_aggregates']
    #         except:
    #             r_operation_aggregates = None
    #         if edit_or_create == 'c':
    #             operation = Operation(tache=r_tache, nom=r_nom, montant=r_montant, notification=r_notification,
    #                                   priorite=r_priorite, date_echeance=date_echeance_str)
    #             operation.m_value = ""
    #             t2 = r_tache.sup_entity()
    #             tmp = str(r_tache.id) + "#"
    #             while t2 != None:
    #                 tmp = str(t2.id) + "#" + tmp
    #                 t2 = t2.sup_entity()
    #             operation.code = tmp

    #             if context['actual_institution'].default_options != True:
    #                 try:
    #                     if r_operation_aggregates is not None:
    #                         operations_values = r_operation_aggregates.split("|")
    #                         i_val = 0
    #                         for val in context['actual_institution'].operations_modules().fill_fields():
    #                             if val["type"] in ['file', 'image']:
    #                                 try:
    #                                     oF = OperationFile(operation=operation, m_field=val['field'],
    #                                                        m_file=request.FILES[val['field'] + '_nam'])
    #                                     operation.save()
    #                                     oF.save()
    #                                 except:
    #                                     pass
    #                             operation.m_value += str(
    #                                 operations_values[i_val]) + "|"  # str(operations_values[i_val]) + "|"
    #                             i_val += 1
    #                     else:
    #                         operation.m_value = r_operation_aggregates
    #                 except:
    #                     pass
    #                 operation.m_value += " "
    #             else:
    #                 try:
    #                     file_oko = request.FILES['file_oko']
    #                     operation.fichier_joint = file_oko
    #                 except:
    #                     pass
    #         else:

    #             edit_id = request.POST['edit_id']
    #             operation = Operation.objects.get(id=int(edit_id))
    #             operation.nom = r_nom
    #             operation.montant = r_montant
    #             operation.notification = r_notification
    #             operation.priorite = r_priorite
    #             if r_operation_aggregates is None:
    #                 for val in context['actual_institution'].operations_modules().fields_rapported()[:-1]:
    #                     operation.m_value += " " + "|"
    #             else:
    #                 operation.m_value = r_operation_aggregates
    #         operation.m_tache_plannification = r_m_tache_plannification
    #         # Add Institution to Operation
    #         operation.m_institution = context["actual_institution"]

    #         list_operations = list()
    #         if r_who_assign == 0:
    #             if r_perso != "0":
    #                 operation.personnel = r_perso
    #             if r_accountable != "0":
    #                 operation.accountable = r_accountable
    #             if r_consulted != "0":
    #                 operation.consulted = r_consulted
    #             if r_informed != "0":
    #                 operation.informed = r_informed
    #             list_operations.append(operation)
    #         elif r_who_assign == 1:
    #             role = Role.objects.get(id=int(r_role))
    #             for perso in role.persos():
    #                 operation.personnel = perso.m_personnel
    #                 list_operations.append(operation)
    #         else:
    #             list_operations.append(operation)

    #         for o in list_operations:
    #             o.save()
    #             if edit_or_create == 'e':
    #                 op = OperationPeriode.objects.filter(m_operation=o).first()
    #                 if op != None:
    #                     tmp_chrono = SubPeriode.objects.filter(id=int(r_sub_period)).first()
    #                     if tmp_chrono != None:
    #                         op.m_chronogramme = tmp_chrono
    #                     op.m_desc_realisation = r_chronogr
    #                     op.save()
    #                 else:
    #                     op = OperationPeriode(m_operation=o,
    #                                           m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
    #                                           m_desc_realisation=r_chronogr)
    #                     op.save()
    #             else:
    #                 op = OperationPeriode(m_operation=o, m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
    #                                       m_desc_realisation=r_chronogr)
    #                 op.save()
    #         subject = "Attribution - " + str(operation.institution().operations_name())
    #         email_from = settings.EMAIL_HOST_USER
    #         try:
    #             raci_roles = [operation.personnel, operation.accountable, operation.consulted, operation.informed]
    #             all_emails = list()
    #             msg_emails = list()
    #             i_r = 0
    #             for r in raci_roles:
    #                 i_r += 1
    #                 if r is not None:
    #                     tmp_context = {
    #                         'operation': operation,
    #                         'personnel': r,
    #                         'tache': operation.tache,
    #                         'institution': operation.institution()
    #                     }
    #                     if i_r == 2:
    #                         tmp_context['role'] = 'A'
    #                     elif i_r == 3:
    #                         tmp_context['role'] = 'C'

    #                     elif i_r == 4:
    #                         tmp_context['role'] = 'I'
    #                     else:
    #                         tmp_context['role'] = 'Responsable'
    #                     message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', tmp_context)
    #                     # message2 = (subject, message, email_from, [r_role.m_personnel.mail])
    #                     message2 = EmailMessage(subject, message, email_from, [r.mail, ])
    #                     message2.content_subtype = 'html'

    #                     msg_emails.append(message2)
    #                     try:
    #                         message2.send()
    #                     except:
    #                         pass
    #         # recipient_list = all_emails
    #         # send_mass_mail((msg_emails), fail_silently=False)
    #         except:
    #             message_context = {
    #                 'operation': operation,
    #                 'personnel': operation.personnel,
    #                 'tache': operation.tache,
    #                 'institution': operation.institution()
    #             }
    #             message = "<html><head></heady><body><b>Vous avez une</b></body></html>"
    #             message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', message_context)
    #             if r_perso != '0':
    #                 email = r_perso.mail
    #                 recipient_list = [email, ]
    #                 msg = EmailMessage(subject, message, email_from, recipient_list)
    #                 msg.content_subtype = 'html'
    #                 try:
    #                     if file_oko != None:
    #                         msg.attach(file_oko.name, file_oko.read(), file_oko.content_type)
    #                     msg.send()
    #                 except:
    #                     pass
    #         """
    # 		try:
    # 			send_mail( subject, message, email_from, recipient_list, fail_silently=False)
    # 			msg = EmailMessage(subject, message, email_from, recipient_list)
    # 			msg.content_subtype = 'html'
    # 			msg.send()
    # 		except:
    # 			pass
    # 		"""
    #     elif generator == 'w':
    #         r_nom = request.POST['nom']
    #         r_prenom = request.POST['prenom']
    #         r_mail = request.POST['mail']
    #         r_password = request.POST['password']
    #         r_username = User.objects.count() + 1
    #         try:
    #             r_user = User(username=r_username, email=r_mail)
    #             r_user.set_password(r_password)
    #             r_user.save()
    #         except:
    #             r_user = User(username='ngb' + str(r_username + 1000), email=r_mail)
    #             r_user.set_password(r_password)
    #             r_user.save()

    #         # Code generator
    #         code = ""
    #         
    #         for i in range(6):
    #             code += str(random.randint(0, 9))
    #         # code = "000111"
    #         owner = Owner(m_user=r_user, m_code=code)
    #         owner.save()
    #         personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, bd_user=r_user)
    #         personnel.photo = OperaFile.objects.filter(m_name="USR").first().m_file
    #         personnel.save()
    #         subject = "Institution Opera +"
    #         message = " Bonjour, utilisez ce code pour renseigner une Institution au sein d'Opera " + str(code)
    #         email = r_mail
    #         email_from = settings.EMAIL_HOST_USER
    #         recipient_list = [email, ]
    #         try:
    #             send_mail(subject, message, email_from, recipient_list, fail_silently=False)
    #         except:
    #             pass  # No cconnexion
    #         response = "/log_account/"
    #         request.session['new_user'] = 1
    #     elif generator == "i2":
    #         id_e = int(request.POST["entity_id"])
    #         entity = Entity.objects.get(id=id_e)
    #         for i in entity.get_indicateurs():
    #             tmp_per = request.POST["period" + str(i.id)]
    #             tmp_num = request.POST["numer" + str(i.id)]
    #             tmp_field = request.POST["id" + str(i.id)]
    #             tmp_field = DataElement.objects.filter(id=int(tmp_field)).first()
    #             # i.m_values = str(tmp_per)+"#"+str(tmp_num)+"\n" + str(i.m_values)
    #             iV = IndicateurVal(m_indicateur=i, m_periode=tmp_per, m_valeur=tmp_num, m_numerateur=tmp_field)
    #             iV.save()

    #         entity.is_rapported = True
    #         entity.save()
    #         response = "/chaine_indicateurs/"
    #         context['indique'] = True
    #     elif generator == "dSv":
    #         r_dataset = DataSet.objects.get(id=int(request.POST["dSv_id"]))
    #         r_user = request.user.personnel
    #         r_variables = r_dataset.m_dataelements
    #         r_values = request.POST["variables_value"].split("#")
    #         r_values_names = request.POST["variables_names"].split("#")
    #         r_values_dict = dict()

    #         for v in r_variables.filter():
    #             r_values_dict["D0elt" + str(v.id)] = None

    #         for i in range(len(r_values)):
    #             r_values_dict[r_values_names[i]] = r_values[i]

    #         r_structures = [request.POST["struc_selec"]]
    #         r_period1 = request.POST["period1_saisie"]
    #         r_period2 = request.POST["period2_saisie"]
    #         entity = DataSetValue(m_dataset=r_dataset, m_user=r_user, m_period_value=r_period1,
    #                               m_sub_period_value=r_period2)
    #         entity.save()

    #         i = 0
    #         for v in r_variables.filter():
    #             dt = DSet_DElt(m_dataelement=v, m_dataset_value=entity,
    #                            m_value=r_values_dict["D0elt" + str(v.id)])  # r_values[i])
    #             dt.save()
    #             i += 1
    #         for v in r_structures:
    #             stru = Structure.objects.get(id=int(v))
    #             entity.m_structures.add(stru)
    #         entity.save()
    #         response = "/data_form/" + str(r_dataset.id) + "/" + str(0) + "/"
    #     elif generator == "ieD":
    #         formula = request.POST["formule"]
    #         indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
    #         indicateur.m_datalets_calcul = formula
    #         indicateur.save()
    #         response = "/dataelts/indic/"
    #     elif generator == "pass":
    #         password = request.POST["password"]
    #         user = request.user
    #         user.set_password(password)
    #         user.save()
    #         response = "/profile/"
    #     elif generator == "ind_va":
    #         entity = EntityType.objects.get(id=int(request.POST["entity_ind_id"]))
    #         entity.indicateur_fields = request.POST["ind_val"]
    #         entity.save()
    #         response = "/configurations/"
    #     elif generator == "cOi":
    #         entity = Tache.objects.get(id=request.POST["configOp_id"])
    #         tA = TacheAggregate.objects.filter(m_tache=entity).first()
    #         if tA == None:
    #             tA = TacheAggregate(m_tache=entity)
    #         i = 1
    #         for i1 in context["actual_institution"].operations_modules().fields():
    #             if request.POST["fiel1" + str(i)] not in ["#", "", " "]:
    #                 tA.m_values1 += request.POST["fiel1" + str(
    #                     i)] + ""
    #             else:
    #                 tA.m_values1 += "#" + ""
    #         i = 1
    #         for i1 in context["actual_institution"].operations_modules().fill_fields_rapp():
    #             if request.POST["fiel2" + str(i)] not in ["#", "", " "]:
    #                 tA.m_values2 += request.POST["fiel2" + str(
    #                     i)] + ""
    #             else:
    #                 tA.m_values2 += "#" + ""
    #             i += 1
    #         tA.save()
    #         response = "/taches/" + str(entity.id)
    #     return redirect(response)

    def planifier2(request, period_id=0):
        template = "webpages/ctn_bpf/plannifier.html"
        annees = set()
        context = basis(request)
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
        tasks = entity.lines()

        # actual_period =

        context['searches'] = list()
        context['g_v'] = '1'
        context['institution'] = Institution.objects.last()
        if period_id != 0:
            context['actual_period'] = Institution_Periodes.objects.get(id=int(period_id))
        else:
            period = request.user.personnel.actual_institution.default_period
            institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                                m_periode=period).first()
            context['actual_period'] = institutionPe
        context['taches'] = tasks
        context['ranges'] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
        return render(request, template, context)

    def roles(request, search=None):
        template = "webpages/ctn_bpf/roles.html"
        fields_personnel = ['Photos', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', '']
        fields_roles = ['Role', 'Description', 'Permissions',
                        'Entite']
        personnel = Personnel.objects.filter()
        context = basis(request)
        roles = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
            'actual_institution')
        if search != None:
            roles = roles.filter(nom__contains=search)
        context[
            'entity'] = 'Role'
        context['fields1'] = fields_personnel
        context['personnel'] = personnel
        context['fields'] = fields_roles
        context['lines'] = roles
        context['g_v'] = 'r'
        context['g_vs'] = 'r2'
        return render(request, template, context)

    def repartir_tache(request):
        r_tache = request.POST['tache']
        r_roles_tache = request.POST['roles_tache']
        r_personnel_tache = request.POST['personnel_tache']
        roles = r_roles_tache.split("_")
        personnels = r_personnel_tache.split("_")
        r_roles = list()
        r_persos = list()
        for r in roles:
            if r != '':
                r_roles.append(Role.objects.get(id=int(r)))
        for p in personnels:
            if p != '':
                r_persos.append(Personnel.objects.get(id=int(p)))
        tache = Tache.objects.get(id=int(r_tache))
        subject = "Attribution de la Tache"
        message = " "
        email = r_persos[0].mail
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [email, ]
        # send_mail( subject, message, email_from, recipient_list, fail_silently=False)

        repartition = TacheRepartition(m_tache=tache)
        repartition.save()
        repartition.m_personnels.set(r_persos)
        repartition.m_roles.set(r_roles)
        repartition.save()
        return redirect("/gestionnaire/t/")

    def modify(request, arg_val=""):
        r_personnel_id = request.POST['personnel']
        r_role_id = request.POST['role']
        personnel = Personnel.objects.get(id=int(r_personnel_id))
        role = Role.objects.get(id=int(r_role_id))
        r_institution = Institution.objects.get(id=int(request.POST['institution']))
        p_f = Personnel_Function(m_personnel=personnel, m_role=role, m_institution=r_institution)
        p_f.save()
        return redirect('/personnels/')

    def save_plannify(request):
        tache_id = request.POST['calendar_tache']
        calendar = request.POST['calendar_selected']
        periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
        tache = Tache.objects.get(id=int(tache_id))
        try:
            plani_tche = TachePlannify.objects.filter(m_tache__id=int(tache_id)).first()
            plani_tche.m_planify = calendar
            plani_tche.m_periode = periode
        except:
            plani_tche = TachePlannify(m_tache=tache, m_planify=calendar, m_periode=periode)
        plani_tche.save()
        institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                            m_periode=periode)
        return redirect("/planifier/" + str(institutionPe.first().id) + "/")

    # @cache_page(60 * 15)
    def operations_home(request, lvl=-1, arg_structure="#", periode="#", search="#", only_not=0):
        template = "webpages/ctn_bpf/index.html"
        context = basis(request)
        if lvl == -1:
            entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
        else:
            entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution'],
                                                       m_hierachie=lvl).last().m_entity_type
        lines = entity.lines()
        tache_lvl = entity.is_tache
        if arg_structure not in ["#", '0']:
            tmp_structure = Structure.objects.get(id=int(arg_structure))
            try:
                tmp = list()
                for l in lines:
                    if l.structure == tmp_structure:
                        tmp.append(l)
                    else:
                        pass
                lines = tmp
                context['arg_structure'] = int(arg_structure)
            except:
                pass
        if periode not in ["#", '0']:
            try:
                tmp = list()
                for t in lines:
                    if periode in t.plannification().table():
                        tmp.append(t)
                lines = tmp
            except:
                pass
        if search != "#":
            tmp = list()
            for t in lines:
                if search in t.get_name():
                    tmp.append(t)
            lines = tmp
        context['entity'] = entity
        context['sup_entity'] = entity.sup_entity(context['actual_institution'].id)
        context['lines'] = lines
        context['fields'] = entity.fields()
        context['operation'] = 1
        context['personnel'] = Personnel.objects.filter()
        context['menu'] = 'o'
        context['lvl'] = lvl
        context['g_v'] = 'o'
        context['periode'] = periode
        context["tache_lvl"] = tache_lvl

        paginator_o = Paginator(lines, 10)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range
        return render(request, template, context)

    @login_required(login_url='/log_account')
    def notifications(request):
        template = "webpages/ctn_bpf/index.html"
        context = basis(request)
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
            'm_institution').last().m_entity_type
        lines = list()
        for l in entity.lines():
            if l.progression() < 100:
                operations = l.operations()
                appd = False
                for o in operations:
                    if o.personnel == request.user.personnel:
                        lines.append(l)
                        break
        context['notif'] = True
        context['entity'] = entity

        # context['lines'] = lines
        paginator_o = Paginator(lines, 10)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range

        context['fields'] = entity.fields()
        context['personnel'] = Personnel.objects.filter()
        context['menu'] = 'o'
        context['g_v'] = 'o'
        return render(request, template, context)

    # @login_required(login_url='/log_account')
    # def alert_notifs(request, search=None, tree=None, report=0):

    #     context = basis(request)
    #     template = "webpages/ctn_bpf/alert_notifs.html"
    #     operation_historic = HistoricRACI.objects.all()
    #     perso = request.user.personnel
    #     context['report'] = report
    #     context['operation_historic'] = operation_historic
    #     repeat_mode = context["actual_institution"].repeat_mode
    #     if repeat_mode:
    #         na_class = OperationDetails
    #         if report == 0:
    #             main_operations = Operation.objects.filter(personnel=perso.id,
    #                                                        etat='0')  # .values('m_institution','code','nom','id','date_creation')
    #         elif report == 1:
    #             main_operations = na_class.objects.filter(m_operation__accountable=perso.id,
    #                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
    #         elif report == 2:
    #             main_operations = na_class.objects.filter(m_operation__consulted=perso.id,
    #                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
    #         elif report == 3:
    #             main_operations = na_class.objects.filter(m_operation__informed=perso.id,
    #                                                       etat='2')  # .values('m_institution','code','nom','id','date_creation')
    #         elif report == 100:
    #             main_operations = na_class.objects.filter()
    #     else:
    #         na_class = Operation
    #         if report == 0:
    #             main_operations = na_class.objects.filter(personnel=perso.id,
    #                                                       etat='0')  # .values('m_institution','code','nom','id','date_creation')
    #         elif report == 1:
    #             main_operations = na_class.objects.filter(accountable=perso.id,
    #                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
    #         elif report == 2:
    #             main_operations = na_class.objects.filter(consulted=perso.id,
    #                                                       etat='0')  # .values('m_institution','code','nom','id','date_creation')
    #         elif report == 3:
    #             main_operations = na_class.objects.filter(informed=perso.id,
    #                                                       etat='2')  # .values('m_institution','code','nom','id','date_creation')
    #         elif report == 100:
    #             main_operations = na_class.objects.filter()
    #     bool(main_operations)
    #     if repeat_mode and report != 0:
    #         tmp = list()
    #         for n in main_operations:
    #             tmp.append(n.m_operation.id)
    #         main_operations = Operation.objects.filter(id__in=tmp)

    #     main_operations = main_operations.order_by('-date_creation')
    #     if tree == '1':
    #         entHidden = request.POST["entHidden"]
    #         context["entHidden"] = entHidden.split("#")
    #         main_operations = main_operations.filter(code__contains=entHidden)
    #     tmp = list()
    #     try:
    #         n = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).count()
    #     except:
    #         n = 0

    #     for i in range(n):
    #         tmp.append(set())

    #     for o in main_operations:
    #         if o.code != None:
    #             o2 = o.code.split("#")
    #             try:
    #                 for i in range(n):
    #                     tmp[i].add(o2[i])
    #             except:
    #                 pass

    #     ents = list()
    #     for i in range(n):
    #         try:
    #             ents.append({
    #                 "hierachie": i,
    #                 'entities': Entity.objects.filter(id__in=list(tmp[i]))
    #             })
    #         except:
    #             pass
    #     context['ents'] = ents
    #     context['n'] = n

    #     main_operations2 = OperationRole.objects.filter(m_personnel=perso.id).values('m_operation')
    #     context['main_operations2'] = main_operations2
    #     # operations = perso.get_taches() #get_operations()

    #     results = list()
    #     results = list(main_operations)
    #     """
    # 	for o in operations:
    # 		if o.progression() == 0 and o.rapported() in ['0',None] :
    # 			results.append(o)
    # 	"""
    #     paginator_o = Paginator(results, 10)
    #     page_number_o = request.GET.get('page')
    #     elements_page = paginator_o.get_page(page_number_o)
    #     # oeuvres_date
    #     context['menu'] = 'aN'
    #     context['pages_o'] = elements_page
    #     context['num_pages'] = paginator_o.num_pages
    #     context['page_range'] = paginator_o.page_range
    #     context['lines'] = context['pages_o']
    #     return render(request, template, context)

    # def save_rapport(request):
    #     context = basis(request)
    #     r_operation = Operation.objects.get(id=int(request.POST['operation_id']))
    #     actual_institution = context['actual_institution']

    #     r_operation.etat = "1"
    #     r_operation.save()
    #     if request.method == "POST":
    #         operation_comm = request.POST.get('operation_comm')
    #         operation_raci = HistoricRACI.objects.create(m_commentaire=operation_comm,
    #                                                      m_operation_id=request.POST['operation_id'], m_role="R")
    #         operation_raci.save()
    #         if context["actual_institution"].repeat_mode == True:
    #             r_operation = OperationDetails(m_operation=r_operation)
    #             r_operation.personnel = request.user.personnel
    #             r_operation.m_institution_id = actual_institution
    #             r_operation.save()
    #             fil_class = OperationDetailsFile
    #     else:
    #         fil_class = OperationFile
    #     try:
    #         r_commentaire = request.POST['operation_comm']
    #     except:
    #         r_commentaire = None
    #     try:
    #         r_fichier = request.FILES['operation _fichier']
    #     except:
    #         r_fichier = None
    #     if context['actual_institution'].default_options != True:
    #         rapport_input = request.POST['rapport_input']
    #         rapport_values = request.POST['rapport_values']
    #         try:
    #             aggregates = context['actual_institution'].operations_modules().type_fields_rapported()
    #             aggs_fields = context['actual_institution'].operations_modules().fields_rapported()
    #         except:
    #             aggregates = list()
    #         i = 1
    #         for a in aggregates:
    #             if a == 'file':
    #                 delet = fil_class.objects.filter(m_field=aggs_fields[(i - 1)], operation=r_operation)
    #                 delet.delete()
    #                 oF = fil_class.objects.create(m_field=aggs_fields[(i - 1)], operation=r_operation)
    #                 try:
    #                     oF.m_file = request.FILES['file_r' + str(i)]
    #                 except:
    #                     pass
    #                 oF.save()
    #             i += 1
    #         r_operation.m_value_reported = rapport_values
    #         r_operation.etat = '1'
    #         r_operation.date_rapported = datetime.datetime.now()
    #         r_operation.m_commentaire = r_commentaire
    #         r_operation.save()
    #     else:
    #         r_operation.etat = '1'
    #         rapport_input = request.POST['rapport_input']
    #         if rapport_input != 'c':
    #             rapport = OperationRapport(operation=r_operation, commentaire=r_commentaire)
    #         else:
    #             # r_nom = request.POST['operation_nom']
    #             rapport = OperationRapport(piece_jointe=r_fichier, operation=r_operation, commentaire=r_commentaire)
    #             # r_operation.etat = '1' #nom_piece_jointe=r_nom
    #             periode = r_operation.periodes()
    #             desc_tmp = periode.desc_split()
    #             desc_tmp.append("")
    #             index = 0
    #             for i in desc_tmp:
    #                 if i == '9':
    #                     pass
    #                 elif i == '0':
    #                     desc_tmp[index] = '1'
    #                     rapport.period = index
    #                     rapport.save()
    #                     request.session['new_rapport'] = 1
    #                     break
    #                 elif i == '1':
    #                     request.session['have_to_done'] = 1
    #                     break
    #                 index += 1
    #             desc_tmp = "_".join(desc_tmp)

    #             periode.m_desc_realisation = desc_tmp
    #             periode.save()
    #     try:
    #         finances = request.POST["finances"]
    #         r_operation.montant2 = int(finances)
    #     except:
    #         r_operation.montant2 = 0
    #     r_operation.save()
    #     request.session['new_rapport'] = 1
    #     try:
    #         operation = r_operation
    #         peA = None
    #         tmps = [operation.accountable, operation.consulted]
    #         message_context1 = {
    #             'operation': operation,
    #             'role': 'A',
    #             'commentaires': r_commentaire,
    #             'lien': "/decision/o/" + str(operation.id) + "/",
    #             'institution': operation.institution()
    #         }
    #         message_context2 = {
    #             'operation': operation,
    #             'role': 'C',
    #             'commentaires': r_commentaire,
    #             'lien': "/decision/o/" + str(operation.id) + "/",
    #             'institution': operation.institution()
    #         }

    #         subject = str(operation) + " - attente de validation"
    #         message1 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context1)
    #         message2 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context2)
    #         recipient_list1 = [operation.accountable.bd_user.email, ]
    #         if operation.consulted != None:
    #             recipient_list2 = [operation.consulted.bd_user.email, ]
    #         else:
    #             recipient_list2 = list()
    #         email_from = settings.EMAIL_HOST_USER
    #         msg1 = EmailMessage(subject, message1, email_from, recipient_list1)
    #         msg1.content_subtype = 'html'
    #         msg2 = EmailMessage(subject, message2, email_from, recipient_list2)
    #         msg2.content_subtype = 'html'
    #         try:
    #             if r_fichier != None:
    #                 msg1.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
    #                 msg2.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
    #             msg1.send()
    #             msg2.send()
    #         except:
    #             pass
    #     except:
    #         pass
    #     response = redirect('/operations/')
        # return response

    def assign_supervisor(request):
        tache = Tache.objects.get(id=int(request.POST["assign"]))
        supervisor = Personnel.objects.get(id=int(request.POST['perso']))
        tache.superviseur = supervisor
        tache.save()
        return redirect('/gestionnaire/t/')

    # def valid_rapport(request):
    #     opera_valider_id = request.POST['opera_valider_id']
    #     operation = Operation.objects.get(id=int(opera_valider_id))
    #     context = basis(request)
    #     actual_institution = context['actual_institution']
    #     try:
    #         operation_rapport = request.POST["operation_rapport"]
    #         operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
    #         operation_rapport.etat = "2"
    #         operation_rapport.m_institution_id = actual_institution
    #         operation_rapport.save()
    #     except:
    #         operation.etat = '2'

    #     index = 0
    #     if request.method == "POST":
    #         m_commentaire = request.POST.get('opera_valider_comment')
    #         # date_realisation = date.today()
    #         # date_realisation = datetime.today().date()
    #         save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
    #                                                     m_operation_id=request.POST['opera_valider_id'], m_role='A')
    #         save_historic.save()
    #     # if defaulted configurations
    #     try:
    #         periode = operation.periodes()
    #         desc_tmp = periode.desc_split()
    #         desc_tmp.append("")
    #         for i in desc_tmp:
    #             if i in ['9', '0']:
    #                 pass
    #             elif i == '1':
    #                 desc_tmp[index] = '2'
    #                 request.session['validation_done'] = 1
    #                 break
    #             index += 1
    #         desc_tmp = "_".join(desc_tmp)
    #         periode.m_desc_realisation = desc_tmp
    #         periode.save()
    #     except:
    #         pass
    #     operation.save()

    #     subject = " Evolution " + str(operation)
    #     message_context = {
    #         'operation': operation,
    #     }
    #     message = render_to_string('webpages/ctn_bpf/mails/inform_evolution.html', message_context)

    #     email_from = settings.EMAIL_HOST_USER
    #     recipient_list = [operation.personnel.bd_user.email, ]
    #     if operation.informed != None:
    #         recipient_list.append(operation.informed.bd_user.email)
    #     msg = EmailMessage(subject, message, email_from, recipient_list)
    #     msg.content_subtype = 'html'
    #     try:
    #         msg.send()
    #         send = '0'
    #     except:
    #         send = '1'

    #     return redirect('/operations/')

    def in_valid_rapport(request):
        opera_invalider_id = request.POST['opera_invalider_id']
        commentaire = request.POST["opera_invalider_comment"]
        operation = Operation.objects.get(id=int(opera_invalider_id))
        operation.etat = '0'
        periode = operation.periodes()
        desc_tmp = periode.desc_split()
        desc_tmp.append("")
        try:
            operation_rapport = request.POST["operation_rapport"]
            operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
            operation_rapport.etat = 0
            operation_rapport.save()  #:save()
        except:
            operation_rapport.etat = 0
            pass
        index = 0
        if request.method == "POST":
            m_commentaire = request.POST.get('opera_invalider_comment')
            # date_realisation = date.today()
            # date_realisation = datetime.today().date()
            save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
                                                        m_operation_id=request.POST['opera_invalider_id'], m_role='A')
            save_historic.save()
        for i in desc_tmp:
            if i in ['1']:
                desc_tmp[index] = '0'
                request.session['validation_done'] = 1
            index += 1
        desc_tmp = "_".join(desc_tmp)
        periode.m_desc_realisation = desc_tmp
        periode.save()
        operation.save()
        message_context = {
            'operation': operation,
            'commentaire': commentaire
        }

        subject = " Rapport non Valide"
        message = render_to_string('webpages/ctn_bpf/mails/operation_invalid.html', message_context)
        email = operation.personnel.bd_user.email
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [email, ]
        msg = EmailMessage(subject, message, email_from, recipient_list)
        msg.content_subtype = 'html'
        try:
            msg.send()
            send = '0'
        except:
            send = '1'

        return redirect('/operations/')

    def delete(request):
        id_entity = request.POST['id_entity']
        generator = request.POST['generator']
        try:
            force = False
            if generator == 'o':
                entity = Operation.objects.get(id=int(id_entity))
                response = redirect('/taches/' + str(entity.tache.id) + '/')
            elif generator == 'eD':
                entity = DataElement.objects.get(id=int(id_entity))
                response = redirect('/dataelts/')
            elif generator == 'p2':
                entity = Personnel.objects.get(id=int(id_entity))
                response = redirect('/personnels/')
            elif generator == 'r':
                entity = Role.objects.get(id=int(id_entity))
                response = redirect('/roles/')
            elif generator == 's':
                entity = Structure.objects.get(id=int(id_entity))
                response = redirect('/structures/')
            elif generator == 'e':
                entity = InsitutionEntities.objects.get(id=int(id_entity))
                hierachie = entity.m_hierachie
                institution = entity.m_institution
                to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
                for d in to_decaler:
                    d.m_hierachie -= 1
                    d.save()
                response = redirect('/configurations/')
                entity = entity.m_entity_type
            elif generator == 'i2':
                entity = Indicateur.objects.get(id=int(id_entity))
                response = redirect('/evaluer/' + str(entity.m_enti.m_type_entity.hierachie()))
            elif generator == 'iF3':
                entity = IndicateurVal.objects.get(id=int(id_entity))
                sup = entity.m_indicateur.m_enti
                try:
                    s_sup = sup.sup_entity().id
                    sup_hierachie = sup.m_type_entity.hierachie()

                    response = redirect('/data_form/' + str(sup_hierachie) + '/' + str(s_sup) + '/')
                except:
                    response = redirect('/data_form/-1/0/')
            elif generator == 'y':
                entity = Institution_Periodes.objects.get(id=int(id_entity))
                response = redirect('/configurations/')
            elif generator == 'z':
                entity = SubPeriode.objects.get(id=int(id_entity))
                response = redirect('/configurations/')
            elif generator == 'p2_RACI':
                entity = PersonnelRACI.objects.get(id=int(id_entity))
                response = redirect('/personnels_raci/')
            elif generator == "dSV":
                entity = DataSet.objects.get(id=int(id_entity))
                response = redirect("/data_form/-1/0/")
            else:
                hierachie = int(request.POST['hierachy'])
                try:
                    base_val = int(request.POST["base_val"])
                except:
                    base_val = "0"
                if base_val not in ['', '0', None]:
                    response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
                else:
                    response = "/gestionnaire/" + str(hierachie) + "/"

                entity = Entity.objects.get(id=int(id_entity))
                response = redirect(response)
            entity.delete()
        except ProtectedError:
            # render the template with your message in the context
            # or you can use the messages framework to send the message:
            template = "webpages/ctn_bpf/error_delete.html"
            context = basis(request)
            entity = Entity.objects.filter(id=int(id_entity)).first()
            if entity != None:
                context["entity"] = entity
                tmp_hierachie = entity.m_type_entity.hierachie()
                context['hierachie'] = tmp_hierachie
                if entity.m_type_entity.is_tache == True:
                    subs = context["actual_institution"].operations_name
                else:
                    tmp_hierachie += 1
                    subs = InsitutionEntities.objects.filter(m_institution=context["actual_institution"],
                                                             m_hierachie=tmp_hierachie).first()
                context['subs'] = subs
                context['element'] = 1
            response = render(request, template, context)
        return response

    def ajax_lines(request):
        type_search = request.GET.get('type_search')
        value_search = request.GET.get('value_search')
        sub_search = request.GET.get('sub_search')
        results = list()
        lines = list()
        progressions = list()
        lines_count = 0

        if value_search != "|":
            results = objets[type_search].objects.filter(nom__contains=value_search)
        else:
            pass

        if type_search == 'o':
            for r in results:
                progressions.append(r.progression())
                lines.append(r.nom + "|" + str(r.personnel) + "|" + str(r.montant) + "|" + r.semaines + "|")

        lines_count = results.count()
        data = {
            'progressions': progressions,
            'lines': lines,
            'lines_count': lines_count
        }
        return JsonResponse(data, safe=False)

    @login_required(login_url='/log_account')
    def configurations(request):
        template = "webpages/ctn_bpf/configurations.html"
        context = basis(request)
        context['institution'] = request.user.personnel.actual_institution
        context['menu'] = 'c'
        context['g_v'] = 'e'
        context['basis_periodes'] = Periode.objects.filter(m_initial=True)
        return render(request, template, context)

    # def profile(request):
    #     template = "webpages/ctn_bpf/profile.html"
    #     context = basis(request)
    #     context['institution'] = context['actual_institution']
    #     context["personnel"] = request.user.personnel
    #     return render(request, template, context)

    def filter_op_search(request):
        search = request.POST['search']
        return filter_op(request, search)

    def filter_op(request, search="#"):
        try:
            niveau = int(request.POST['niveau'])
            periode = request.POST['periode']
            structure = request.POST['structure']
        except:
            niveau = -1
            periode = "#"
            structure = "#"
        try:
            only_not = int(request.POST["only_not"])
        except:
            only_not = 0
        return operations_home(request, niveau, structure, periode, search, only_not)

    # def notifs(request):
    #     user_id = request.GET.get('value')
    #     insti_id = request.GET.get('institution')
    #     actual_institution = Institution.objects.get(id=int(insti_id))
    #     perso = Personnel.objects.get(bd_user__id=int(user_id))
    #     if actual_institution.repeat_mode == False:
    #         operations1 = list()
    #         operations = Operation.objects.filter(personnel=perso)
    #         operations_report = Operation.objects.filter(accountable=perso, etat='1')
    #         count_is_consulted = Operation.objects.filter(consulted=perso, etat='1').count()
    #         count_is_informed = Operation.objects.filter(informed=perso, etat='2').count()


    #     else:
    #         operations1 = Operation.objects.filter(personnel=perso)
    #         operations = OperationDetails.objects.filter(m_operation__personnel=perso)
    #         operations_report = OperationDetails.objects.filter(m_operation__accountable=perso, etat='1')
    #         count_is_consulted = OperationDetails.objects.filter(m_operation__consulted=perso, etat='1').count()
    #         count_is_informed = OperationDetails.objects.filter(m_operation__informed=perso, etat='2').count()

    #     # General_Results
    #     nb_taches = 0
    #     nb_have_rapported = 0
    #     nb_is_done = 0
    #     nb_have_to_do = 0
    #     nb_observations = 0

    #     nb_have_rapported2 = 0
    #     nb_is_done2 = 0
    #     nb_have_to_do2 = 0
    #     nb_observations2 = 0
    #     if True:
    #         for o in operations1:
    #             if o.etat == '0':
    #                 nb_have_to_do += 1
    #                 nb_taches += 1
    #                 if o.institution() == actual_institution:
    #                     nb_have_to_do2 += 1
    #         for o in operations:
    #             if o.etat == '1':
    #                 nb_have_rapported += 1
    #                 if o.institution() == actual_institution:
    #                     nb_have_rapported2 += 1
    #             else:
    #                 nb_is_done += 1
    #                 if o.institution() == actual_institution:
    #                     nb_is_done2 += 1

    #         for o in operations_report:
    #             nb_observations += 1
    #             if o.institution() == actual_institution:
    #                 nb_observations2 += 1

    #     data = {
    #         'result': nb_taches,
    #         'have_to_done': nb_have_to_do,
    #         'is_done': nb_is_done,
    #         'have_rapported': nb_have_rapported,
    #         'have_to_done2': nb_have_to_do2,
    #         'is_done2': nb_is_done2,
    #         'have_rapported2': nb_have_rapported2,
    #         'nb_observations': nb_observations,
    #         'nb_observations2': nb_observations2,
    #         'count_is_consulted': count_is_consulted,
    #         'count_is_informed': count_is_informed
    #     }
    #     # entities = institution.get_entities()
    #     indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution).count()
    #     data["indi_total"] = indicateurs_all
    #     return JsonResponse(data)

    def indicateurs_ajax(request):
        actual_institution = request.GET.get("institution")
        actual_year = request.GET.get("actual_year")

        try:
            entity_type = int(request.GET.get("entity_type"))
            type_indic = request.GET.get("type_indic")
        except:
            entity_type = None

        try:
            id_entity = int(request.GET.get("id_entity"))
            id_entity = Entity.objects.get(id=id_entity)
        except:
            id_entity = None

        if entity_type == None:
            if id_entity != None:
                indicateurs_all = Indicateur.objects.filter(m_enti=id_entity)
            else:
                indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution)
            nb_all = indicateurs_all.count()
            indicateurs_renseignes = list()
            nb_renseignes = 0

            for i in indicateurs_all:
                if i.actu_value != None:
                    indicateurs_renseignes.append(i)
                    nb_renseignes += 1

            indicateurs_values = list()
            cibles = list()
            for i in indicateurs_renseignes:
                cibles.append(i.get_cibles(actual_year))
                indicateurs_values.append(i.actu_value())
            data = {
                'all': nb_all,
                'nb_renseignes': nb_renseignes,
                'cibles': cibles,
                'indicateurs_values': indicateurs_values
            }
        elif type_indic == "F":
            if id_entity == None:
                eT = EntityType.objects.filter(id=entity_type).first()
                entities = eT.lines()
            else:
                eT = id_entity.m_type_entity
                entities = id_entity.sub_entities()
            resul1 = list()
            resul2 = list()
            for e in entities:
                try:  # it may be Operation
                    operations = e.operations()
                    if eT.is_tache == False:
                        taches = e.taches()
                    else:
                        taches = [e]
                    tmp = 0
                    tmp2 = 0
                    for t in taches:
                        if t.montant != None:
                            tmp += int(t.montant)
                    for o in operations:
                        tmp2 += int(o.montant2)
                    resul1.append(tmp)
                    resul2.append(tmp2)
                except:
                    pass

            data = {
                'list_montant1': resul1,
                'list_montant2': resul2
            }
            entq = list()
            entq_id = list()
            for e in entities:
                entq.append(str(e))
                entq_id.append(str(e.id))
            data['entities'] = entq
            data["entities_id"] = entq_id
        else:
            if id_entity == None:
                eT = EntityType.objects.filter(id=entity_type).first()
                entities = eT.lines()
            else:
                entities = [id_entity]
            indicateurs_all = Indicateur.objects.filter(m_enti__in=entities)
            ens = dict()
            ens_good = dict()
            ens_bad = dict()
            nbE = indicateurs_all.count()
            for i in entities:
                ens[str(i.id)] = 0
                ens_good[str(i.id)] = 0
                ens_bad[str(i.id)] = 0

            for i in indicateurs_all:
                ens[str(i.m_enti.id)] += 1
                try:
                    if int(i.get_cibles(actual_year)) > int(i.actu_value()):
                        ens_bad[str(i.m_enti.id)] += 1
                    else:
                        ens_good[str(i.m_enti.id)] += 1
                except:
                    pass

            if nbE > 0:
                for i in entities:
                    ens[str(i.id)] = ens[str(i.id)]  # *100/nbE
                    ens_good[str(i.id)] = ens_good[str(i.id)]  # *100/nbE
                    ens_bad[str(i.id)] = ens_bad[str(i.id)]  # *100/nbE

            list_ens = list()
            list_ens_good = list()
            list_ens_bad = list()
            for i in entities:
                list_ens.append(ens[str(i.id)])
                list_ens_good.append(ens_good[str(i.id)])
                list_ens_bad.append(ens_bad[str(i.id)])
            data = {
                'list_ens': list_ens,
                'list_ens_good': list_ens_good,
                'list_ens_bad': list_ens_bad
            }
            entq = list()
            entq_id = list()
            for e in entities:
                entq.append(str(e))
                entq_id.append(str(e.id))
            data['entities'] = entq
            data["entities_id"] = entq_id
        return JsonResponse(data, safe=False)

    def institutions(request, search=None):
        template = "webpages/ctn_bpf/institution.html"
        context = basis(request)
        institutions1 = list()
        structures = Personnel_Structure.objects.filter(m_personnel=request.user.personnel)
        for s in structures:
            if s.m_structure.institution not in institutions1:
                institutions1.append(s.m_structure.institution)
        for i in Institution.objects.filter(owner__m_user__id=request.user.id):
            if i not in institutions1:
                institutions1.append(i)
        if search != None:
            tmp = institutions1
            institutions1 = list()
            for i in tmp:
                if search in i.nom or search in i.sigle:
                    institutions1.append(i)
        institutions1 = sorted(institutions1, key=lambda t: t.sigle)
        paginator_o = Paginator(institutions1, 12)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date
        context['institutions1'] = elements_page
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range
        context['menu'] = 'i'
        return render(request, template, context)

    def set_institution(request, institution_id):
        institution = Institution.objects.get(id=institution_id)
        request.user.personnel.actual_institution = institution
        request.user.personnel.save()
        return redirect("/")

    def operations_details_list(request, operation_id):
        template = "webpages/ctn_bpf/operations_details_list.html"
        context = basis(request)
        operation = Operation.objects.get(id=operation_id)
        context["operation"] = operation
        return render(request, template, context)

    # def operations_details(request, operation_id):
    #     template = "webpages/ctn_bpf/operations_details.html"
    #     context = basis(request)
    #     operation = Operation.objects.get(id=operation_id)
    #     actual_institution = context['actual_institution']
    #     if operation.institution() != context['actual_institution']:
    #         request.user.personnel.actual_institution = operation.institution()
    #         request.user.personnel.save()
    #         context = basis(request)
    #     lines = list()

    #     tache = operation.tache
    #     if actual_institution.default_options != True:
    #         try:
    #             i = 0
    #             for th in actual_institution.operations_modules().fill_fields_rapp():
    #                 a = th
    #                 if a["type"] == "choix":
    #                     a["extras"] = operation.get_value(a["field"])
    #                 lines.append(a)
    #             aggs2 = tache.aggregates2()
    #             for a in aggs2:
    #                 lines[i]["field"] = a
    #                 i += 1
    #         except:
    #             pass
    #     context["lines"] = lines

    #     tache = operation.tache
    #     context['operation'] = operation
    #     context['tache'] = tache
    #     context['institutions'] = Institution.objects.filter()
    #     context['menu'] = 'o'
    #     return render(request, template, context)

    # def history(request, dates="#"):

    #     template = "webpages/ctn_bpf/history.html"
    #     context = basis(request)
    #     entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
    #         'm_institution').last().m_entity_type
    #     tasks = entity.lines()
    #     if context['actual_institution'].default_options == True:
    #         context['fields'] = [entity.m_nom, 'Operation', 'Personnel', 'Rapport Technique', 'Date']
    #         unsorted_results = list()
    #         for t in tasks:
    #             for o in t.operations():
    #                 aka = OperationRapport.objects.filter(operation__id=o.id)
    #                 for o2 in aka:
    #                     unsorted_results.append(o2)
    #     else:
    #         if context["actual_institution"].repeat_mode == True:
    #             template = "webpages/ctn_bpf/history_rapport.html"
    #             tasks = context["actual_institution"].taches()
    #             context["taches"] = tasks

    #             context['menu'] = 'h'
    #             # context['dates'] = dates
    #             paginator_o = Paginator(tasks, 10)
    #             page_number_o = request.GET.get('page')
    #             elements_page = paginator_o.get_page(page_number_o)
    #             # oeuvres_date
    #             context['pages_o'] = elements_page
    #             context['num_pages'] = paginator_o.num_pages
    #             context['page_range'] = paginator_o.page_range
    #             """
    # 			paginator_o = Paginator(sorted_result,10)
    # 			page_number_o = request.GET.get('page')
    # 			elements_page = paginator_o.get_page(page_number_o)
    # 			#oeuvres_date
    # 			context['pages_o']=elements_page
    # 			context['num_pages']=paginator_o.num_pages
    # 			context['page_range']=paginator_o.page_range
    # 			"""
    #         else:
    #             tmpas = context['actual_institution'].operations_modules().fill_fields_rapp()
    #             aggregates = list()
    #             for t in tmpas:
    #                 if t['type'] == 'choix':
    #                     aggregates.append(t['extras'])
    #                 else:
    #                     aggregates.append(t['field'])
    #             context['fields'] = [entity.m_nom, context['actual_institution'].operations_name] + aggregates + [
    #                 'Personnel', 'Date']

    #             unsorted_results = list()
    #             for t in tasks:
    #                 for o in t.operations():
    #                     unsorted_results.append(o)

    #             sorted_result = sorted(unsorted_results, key=lambda t: t.date_creation)
    #             if dates != "#":
    #                 start_date = request.POST['start_date']
    #                 end_date = request.POST['end_date']
    #                 context['start_date'] = start_date
    #                 context['end_date'] = end_date

    #                 start_date = start_date.split("-")
    #                 end_date = end_date.split("-")
    #                 start_date = [int(elt) for elt in start_date]
    #                 end_date = [int(elt) for elt in end_date]

    #                 result = list()
    #                 for t in sorted_result:
    #                     start_date_cmp = start_date == list() or (
    #                                 t.date_creation.year > start_date[0] or t.date_creation.year == start_date[
    #                             0] and t.date_creation.month > start_date[1] or t.date_creation.year == start_date[
    #                                     0] and t.date_creation.month == start_date[1] and t.date_creation.day >=
    #                                 start_date[2])
    #                     end_date_cmp = end_date == list() or (
    #                                 t.date_creation.year < end_date[0] or t.date_creation.year == end_date[
    #                             0] and t.date_creation.month < end_date[1] or t.date_creation.year == end_date[
    #                                     0] and t.date_creation.month == end_date[1] and t.date_creation.day <= end_date[
    #                                     2])

    #                     if start_date_cmp and end_date_cmp:
    #                         result.append(t)
    #             sorted_result = result

    #             context['lines'] = sorted_result
    #             context['nb_lines'] = len(sorted_result)
    #             context['institutions'] = Institution.objects.filter()
    #             context['menu'] = 'h'
    #             context['dates'] = dates
    #             paginator_o = Paginator(sorted_result, 10)
    #             page_number_o = request.GET.get('page')
    #             elements_page = paginator_o.get_page(page_number_o)
    #             # oeuvres_date
    #             context['pages_o'] = elements_page
    #             context['num_pages'] = paginator_o.num_pages
    #             context['page_range'] = paginator_o.page_range
    #     return render(request, template, context)

    def calendar(request):
        template = "webpages/ctn_bpf/agenda_week.html"
        context = basis(request)
        return render(request, template, context)

    def save_period(request):
        institution = request.POST['institution']
        periode = request.POST['periode']
        decoupage = request.POST['decoupage']
        edit_or_create = request.POST['edit_or_create']
        try:
            big_period = request.POST["big_periode"]
            sub_period = 0
        except:
            sub_period = None
        if sub_period != None:
            r_big_period = Periode.objects.get(id=int(big_period))
            sub_period = request.POST["sub_period"]
            details = request.POST["details"]
            if edit_or_create != 'e':
                r_sub_period = SubPeriode(m_periode=r_big_period, m_sub_value=periode, m_decoupage=decoupage,
                                          m_decoupage_description=details)
            else:
                edit_id = request.POST['edit_id']
                r_sub_period = SubPeriode.objects.get(id=int(edit_id))
                r_sub_period.m_periode = r_big_period
                r_sub_period.m_sub_value = periode
                r_sub_period.m_decoupage = decoupage
                r_sub_period.m_decoupage_description = details
            r_sub_period.save()
        else:
            if edit_or_create != 'e':
                r_period = Periode(m_value=periode, m_decoupage=decoupage)
            else:
                edit_id = request.POST['edit_id']
                r_period = Periode.objects.get(id=int(edit_id))
                r_period.m_value = periode
                r_period.m_decoupage = decoupage
            r_period.save()
            if edit_or_create != 'e':
                institution = Institution.objects.get(id=int(institution))
                i_periode = Institution_Periodes(m_institution=institution, m_periode=r_period)
                i_periode.save()
        return redirect("/configurations/")

    def ajax_graphiques(request):
        data = dict()
        id_tache = int(request.GET.get('id_graph'))
        type_graph = request.GET.get('type_graph')
        nature_graph = int(request.GET.get('nature_graph'))
        inst_graph = Institution.objects.get(id=int(request.GET.get('inst_graph')))
        actual_config = inst_graph.default_options

        if nature_graph != -1:
            element = InsitutionEntities.objects.filter(m_institution=inst_graph,
                                                        m_hierachie=nature_graph).first().m_entity_type
        else:
            element = InsitutionEntities.objects.filter(m_institution=inst_graph).last().m_entity_type

        if element.is_tache:
            entity = Tache.objects.get(id=id_tache)
            operations = entity.operations()
            nb_operations = len(operations)
        else:
            entity = Entity.objects.get(id=id_tache)

        if type_graph == 'eT':
            if element.is_tache:
                tache_tmp = Tache.objects.get(id=entity.id)
                plansT = list()
                for p in tache_tmp.plannification().table():
                    plansT.append(p)
                x_abcisses = list()
                for p in plansT:
                    for xi in inst_graph.default_subperiod.decoup_desc_slip2():
                        x_abcisses.append(str(p) + "-" + str(xi))

                # Matrice des mois
                result = list()

                x_interval = tache_tmp.plannification().table()
                operations = tache_tmp.operations()
                nb_operations = operations.count()
                tmp_sum = 0
                nb_x_abcisses = 0
                tmp_dict = list()
                for x in x_interval:
                    # tmp_sum = 0
                    operations_2 = operations.filter(m_tache_plannification=x)
                    all_dict = list()
                    for op in operations_2:
                        x_dict = list()
                        for t in op.periodes().desc_split():
                            x_dict.append(0)
                        i_x_d = 0

                        for t in op.periodes().desc_split():
                            if actual_config == True:
                                if t == '2':
                                    tmp_val = 100
                                else:
                                    tmp_val = 0
                            else:
                                if t != '9':
                                    ds = {'0': 0, '1': 0, '2': 100}
                                    tmp_val = ds[op.etat]
                                else:
                                    tmp_val = 0

                            x_dict[i_x_d] += tmp_val
                            i_x_d += 1
                        all_dict.append(x_dict)
                    # all_dict contient la matrice d'un mois i)

                    tmp_dict_result = list()
                    if operations_2.first() != None:
                        for t in operations_2[0].periodes().desc_split():
                            tmp_dict_result.append(0)
                        for a_dict in all_dict:
                            ia = 0
                            for a in a_dict:
                                tmp_dict_result[ia] += a
                                ia += 1
                    tmp_dict += tmp_dict_result
                result_tmp = 0
                result = list()
                for t in tmp_dict:
                    result_tmp += t
                    result.append((result_tmp / nb_operations))
            else:
                x_abcisses = inst_graph.default_period.decoup_slip()
                tmp = list()
                taches = entity.taches()
                discovered = list()
                index_tmp = 0
                nb_taches = len(taches)
                for x in x_abcisses:
                    tmp.append(0)
                    for t in taches:
                        if x in t.plannification().table() and t not in discovered:
                            tmp[index_tmp] += t.progression()
                            discovered.append(t)
                    index_tmp += 1
                y_abcisses = list()
                for y in range(index_tmp):
                    if nb_taches > 0:
                        y_abcisses.append((tmp[y] / nb_taches))
                    else:
                        y_abcisses.append(0)
                result = list()
                rst = 0
                for y in y_abcisses:
                    rst += y
                    result.append(rst)
        elif type_graph == 'p':
            x_abcisses = set()
            result_x = list()
            y_abcisses = list()
            for o in operations:
                x_abcisses.add(o.personnel)
            for perso in x_abcisses:
                y_abcisses.append(perso.progression_taches(inst_graph))
            for x in x_abcisses:
                result_x.append(str(x))
            x_abcisses = result_x
            result = y_abcisses
        elif type_graph == 't':
            x_abcisses = list()
            result = list()
            subs = entity.sub_entities()
            try:
                sub_name = str(subs[0].m_type_entity)
            except:
                sub_name = " "
            i = 0
            for x in subs:
                result.append(x.progression())
                x_abcisses.append(str(x))
                i += 1
            data['nb_sub'] = i
            data['sub_names'] = sub_name
        data['x_abcisses'] = x_abcisses
        data['y_abcisses'] = result
        return JsonResponse(data, safe=False)

    # @login_required(login_url='/log_account')
    # def decision(request, nature="#", element_id=0, operation_rapport_id=None):
    #     context = basis(request)
    #     if nature == "o":
    #         template = "webpages/ctn_bpf/decision.html"
    #         operation = Operation.objects.get(id=element_id)
    #         if context["actual_institution"].repeat_mode == True:
    #             operation_historic = HistoricRACI.objects.all()
    #             context['operation_historic'] = operation_historic
    #             template = "webpages/ctn_bpf/decision_rapport.html"
    #             operation = Operation.objects.get(id=element_id)
    #             if operation_rapport_id == None:
    #                 operation_rapport = operation.get_operation_details_invalid().last()
    #                 context["operation_rapport"] = operation_rapport
    #         context['operation'] = operation
    #         context['tache'] = operation.tache
    #     else:
    #         context["entity"] = Entity.objects.get(id=int(element_id))
    #         template = "webpages/ctn_bpf/decision_plus.html"
    #     return render(request, template, context)

    # def get_elements(request):
    #     # Elements can be Entity, Forms
    #     if True:  # try:
    #         other_limk = request.GET.get("other")
    #         institution = Institution.objects.get(id=int(request.GET.get('institution')))
    #         if other_limk == "dS":
    #             dSs = DataSet.objects.filter(m_institution=institution)
    #             data = {
    #                 "datasets": list(),
    #                 "datasets_id": list()
    #             }
    #             for d in dSs:
    #                 data["datasets"].append(str(d))
    #                 data["datasets_id"].append(str(d.id))
    #         elif other_limk == "dE_code":
    #             data = dict()
    #             codes = request.GET.get("codes").split("#")
    #             result = list()
    #             codes_replace = list()
    #             for code in codes[:-1]:
    #                 res = list()
    #                 j = 0
    #                 n = len(code)
    #                 while j < n:
    #                     if code[j] == "$":
    #                         j += 1
    #                         k = j
    #                         while code[j] != "$":
    #                             j += 1
    #
    #                         res.append(code[k:j])
    #                         j += 2
    #                     else:
    #                         j += 1
    #                 tmp_res = list()
    #                 tmp_res2 = list()
    #                 for r in res:
    #                     tmp_res.append(str(DataElement.objects.get(id=int(r))))
    #                     tmp_res2.append(r)
    #                 result.append(tmp_res)
    #                 codes_replace.append(tmp_res2)
    #             data["data_elts"] = result
    #             data["codes_replace"] = codes_replace
    #         elif other_limk == "dI_formula":
    #             values = request.GET.get("value").split("#")
    #             data_elts = DataSet.objects.get(id=int(request.GET.get("dataset")))
    #             result_formula = list()
    #             for v in values[:-1]:
    #                 ind = Indicateur.objects.get(id=int(v))
    #                 result_formula.append(ind.m_numerateur)
    #             data = dict()
    #             data["data_elts"] = data_elts.join_dataelts()
    #             data["formulas"] = result_formula
    #     else:  # except:
    #         value = int(request.GET.get('value'))
    #         nature = int(request.GET.get('nature'))
    #         institution = Institution.objects.get(id=int(request.GET.get('institution')))
    #         entity_type = InsitutionEntities.objects.filter(m_hierachie=nature,
    #                                                         m_institution=institution).select_related(
    #             'm_institution').first().m_entity_type
    #         # entity to upload
    #         entity = Entity.objects.get(id=value)
    #         default_fields = entity_type.fields()
    #         default_fields_type = entity_type.type_fields()
    #         default_fields_values = entity.values()
    #         # Default Values to putt
    #         expected_fields = entity_type.fields_rapported()
    #         expected_types_type = entity_type.type_fields_rapported()
    #         results = list()
    #         data = {
    #             'entity': str(entity),
    #             'default_fields': default_fields,
    #             'default_fields_type': default_fields_type,
    #             'default_fields_values': default_fields_values,
    #             'expected_fields': expected_fields,
    #             'expected_types_type': expected_types_type
    #         }
    #     return JsonResponse(data, safe=False)

    def get_elements_hierachy(request):
        nature = int(request.GET.get('nature'))
        institution = Institution.objects.get(id=int(request.GET.get('institution')))
        if nature == -100:
            type_entity = request.GET.get('type_entity')
            role = Role.objects.get(id=int(type_entity))
            entity_type = role.m_simple_auth
        elif nature != -1:
            entity_type = InsitutionEntities.objects.filter(m_hierachie=nature,
                                                            m_institution=institution).first().m_entity_type
        else:
            entity_type = InsitutionEntities.objects.filter(m_institution=institution).last().m_entity_type
        try:
            big_entity = int(request.GET.get('big_entity'))
            ent = Entity.objects.get(id=int(big_entity))
            lines = ent.sub_entities()
        except:
            lines = entity_type.lines()
        tmp = list()
        ids = list()
        for l in lines:
            tmp.append(str(l))
            ids.append(l.id)
        data = {
            'lines': tmp,
            'ids': ids
        }
        return JsonResponse(data, safe=False)

    def get_entities_subsequency(request):
        pass

    def get_elements_subsequency_true(request):
        nature = int(request.GET.get('nature'))
        entity = int(request.GET.get('entity'))
        report = int(request.GET.get('report'))
        try:
            institution = int(request.GET.get("institution"))
        except:
            institution = None
        if entity != -1:
            try:
                entity = Entity.objects.get(id=entity)
            except:
                entity = 0
            elts = entity.child_trees()
        else:
            elts = [Institution.objects.get(id=institution).top_entity().lines()]

        data_names = list()
        data_ids = list()
        for elt in elts:
            tmp_id = list()
            tmp_name = list()
            for e in elt:
                tmp_id.append(e.id)
                tmp_name.append(str(e))
            data_names.append(tmp_name)
            data_ids.append(tmp_id)

        data = {
            'data_ids': data_ids,
            'data_names': data_names
        }
        return JsonResponse(data, safe=False)

    def get_elements_subsequency(request):
        nature = int(request.GET.get('nature'))
        entity = int(request.GET.get('entity'))
        report = int(request.GET.get('report'))
        try:
            institution = int(request.GET.get("institution"))
        except:
            institution = None
        try:
            entity = Entity.objects.get(id=entity)
        except:
            entity = 0

        if report == 0:
            operations = Operation.objects.filter(etat='0', personnel=request.user.personnel).values('code')
        elif report == 1:
            operations = Operation.objects.filter(etat='1', accountable=request.user.personnel).values('code')
        elif report == 2:
            operations = Operation.objects.filter(etat='1', consulted=request.user.personnel).values('code')
        elif report == 3:
            operations = Operation.objects.filter(etat='2', informed=request.user.personnel).values('code')
        else:
            operations = Operation.objects.filter().values('code')

        if institution != None:
            institution = Institution.objects.get(id=institution)
            operations = operations.filter(m_institution=institution)

        bool(operations)
        result = list()
        if entity != 0:
            for o in operations:
                try:
                    if o['code'] not in ["", None] and o['code'].split("#")[nature] == str(entity.id):
                        result.append(o)
                except:
                    pass
        else:
            pre_hierachie = int(request.GET.get("pre_hierachy"))
            if pre_hierachie not in [0, -1]:
                for o in operations:
                    if o['code'] not in ["", None] and o['code'].split("#")[(nature - 1)] == str(pre_hierachie):
                        result.append(o)
            elif nature == 0:
                result = list(operations)
        steps = list()

        k = 0
        if True:
            if report != 100:
                for i in operations[0]['code'].split("#"):
                    steps.append(set())
                    k += 1
            else:
                for i in list(operations)[-1]['code'].split("#"):
                    steps.append(set())
                    k += 1
        else:
            pass

        # Recuperer les Operations
        i = 0
        for o in result:
            i = 0
            for j in range(k):
                if o['code'] not in [None, "", " "]:
                    steps[i].add(o['code'].split("#")[j])
                    i += 1

        # Transformer en Liste
        ajax_steps = list()
        for s in steps:
            ajax_steps.append("#".join(list(s)))

        ajax_steps2 = list()
        for s in steps:
            s3 = list(s)
            s2 = list()
            for t in s3:
                if t not in ['', None]:
                    s2.append(int(t))
            a = Entity.objects.filter(id__in=list(s2))
            a2 = [str(t) for t in list(a)]
            ajax_steps2.append("#".join(a2))

        data = {
            'operations': result,
            'ajax_steps': ajax_steps,
            'ajax_steps2': ajax_steps2
        }
        return JsonResponse(data, safe=False)

    def save_valid_rapport(request):
        nature = request.POST['nature']
        resultat = request.POST['resultat_realise']
        institution = Institution.objects.get(id=int(request.POST['institution']))
        entity_type = InsitutionEntities.objects.filter(m_hierachie=nature,
                                                        m_institution=institution).first().m_entity_type
        entity = Entity.objects.get(id=int(request.POST['value']))
        entity.is_rapported = True
        entity.save()
        tR = EntityRapport(m_entity=entity, m_resultat_realise=resultat)
        tR.save()
        return redirect('/' + nature + '/')

    def filter_entities(request):
        institution = Institution.objects.get(id=int(request.POST['institution']))
        sub_value = request.POST['sub_value']
        hierachie = int(request.POST['hierachie'])
        tmp_hierachie = hierachie - 1
        if hierachie <= 0:
            hierachie = 0
            value = '0'
        else:
            entity_type = InsitutionEntities.objects.filter(m_institution=institution,
                                                            m_hierachie=(hierachie - 1)).first().m_entity_type
            entity_type_actual = InsitutionEntities.objects.filter(m_institution=institution,
                                                                   m_hierachie=(hierachie)).first().m_entity_type
            enums_list = list()
            enums = entity_type_actual.enum_fields()['result']
            if entity_type_actual.m_enum_values not in ['', None]:
                for val in enums:
                    enums_list.append(request.POST["enum_" + val['name']])
            if enums_list != list():
                enums_list = "||".join(enums_list)
            value = request.POST[str(entity_type)]
        # gestionnaire(request,gest_val,gest_id=0,name=None,structure=None,periode=None)
        if value != '0':
            element = Entity.objects.get(id=int(value))
            if enums_list != list():
                response = redirect('/gestionnaire/' + str(tmp_hierachie) + '/' + str(element.id) + '/')
            else:
                response = gestionnaire(request, str(tmp_hierachie), str(element.id), None, None, None, enums_list)
        else:
            response = redirect('/gestionnaire/' + str(hierachie) + '/')
        return response

    def search(request):
        if request.user.is_authenticated == True:
            template = "webpages/ctn_bpf/search.html"
            val = request.POST['search']
            context = basis(request)
            searches = list()
            entities = context['actual_institution'].get_entities()
            for e in entities:
                lines = e.m_entity_type.lines()
                hierachie = e.m_hierachie
                def_color = '#00a2c3'
                if e.m_entity_type.is_tache:
                    def_color = 'orange'
                for l in lines:
                    if val in str(l):
                        searches.append(
                            {'nature': 'e', 'label': e, 'value': l, 'hierachie': hierachie, 'color': def_color})

            for s in Structure.objects.filter(nom__contains=val, institution=context['actual_institution']):
                searches.append({'nature': 's', 'label': 'Structure', 'value': s, 'color': '#9012a1'})

            for s in Personnel.objects.filter(nom__contains=val):
                searches.append({'nature': 'p', 'label': 'Personnel', 'value': str(s), 'color': '#12c304'})

            context['searches'] = searches
        else:
            return redirect("/")
        return render(request, template, context)

    def search2(request, menu):
        search = request.POST["search"]
        if menu == 'i':
            response = institutions(request, search)
        elif menu == 'p2':
            response = personnels(request, search)
        elif menu == 'p2_RACI':
            response = personnels_raci(request, search)
        elif menu == 'r':
            response = roles(request, search)
        elif menu == 'aN':
            response = alert_notifs(request, search)
        return response

    @login_required(login_url='/log_account')
    def messages(request):
        template = "webpages/ctn_bpf/search.html"
        context = basis(request)
        context['msg_view'] = True
        results = list()
        personnel = request.user.personnel
        accounted = personnel.operations_accounted()
        bool(accounted)
        """
    	for o in Operation.objects.filter():
    		if  o.rapported() not in [None,'0'] and o.progression()<100 and context['permissions'] > 0:
    			results.append({'value':o,'name':'Operation','link':'o','nature':'r'})
    	"""
        for o in accounted:
            if o.rapported() not in [None, '0'] and o.progression() < 100:
                # and context['permissions'] > 0
                results.append({'value': o, 'name': 'Operation', 'link': 'o', 'nature': 'r'})
        entities_type = context['actual_institution'].get_entities()
        nb_observations = 0
        """
    	for e in entities_type:
    		lines = e.m_entity_type.lines()
    		for l in lines :
    			if l.is_rapported != True and l.progression() == 100:
    				results.append({'value':l,'name':str(l.m_type_entity),'link':'o','nature':'o'})
    	"""
        context['msgs'] = True
        paginator_o = Paginator(results, 10)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range
        return render(request, template, context)

    def bad_pass(request):
        mail = request.POST['mail']
        sent = False
        try:
            subject = "Restauration de Mot de Passe"
            code = ""
            
            for i in range(0, 6):
                code += str(random.randint(0, 9))
            # r_bd_user.set_password('User'+password)
            message = " Entrez ce code pour restaurer votre Compte "
            email = r_perso.mail
            email_from = settings.EMAIL_HOST_USER
            recipient_list = [email, ]
            send_mail(subject, message, email_from, recipient_list, fail_silently=False)
            sent = True
        except:
            pass
        data = {
            'sent': sent
        }
        if sent == True:
            data['code'] = code
        return JsonResponse(data)

    def notifs_rapp(request):
        user_id = request.GET.get('value')
        insti_id = request.GET.get('institution')
        insti_id = Institution.objects.get(id=int(insti_id))
        # perso = Personnel.objects.get(bd_user__id=int(user_id))
        operations = Operation.objects.filter(personnel=request.user.personnel)
        # General_Results
        nb_is_rapported = 0
        nb_have_to_report = 0
        nb_observations = 0

        nb_is_rapported2 = 0
        nb_have_to_report2 = 0
        nb_observations2 = 0

        actual_institution = insti_id

        context = basis(request)
        perso = request.user.personnel
        for o in operations:
            if o.etat == '0':
                nb_have_to_report += 1
                if o.institution() == actual_institution:
                    nb_have_to_report2 += 1
            elif o.etat == '1':
                nb_is_rapported += 1
                if o.institution() == actual_institution:
                    nb_is_rapported2 += 1
        entities_type = insti_id.get_entities()

        nb_observations = Operation.objects.filter(etat='1', accountable=perso).count()

        for e in entities_type:
            lines = e.m_entity_type.lines()
            for l in lines:
                if l.is_rapported != True and l.progression() == 100:
                    nb_observations += 1

        personnel = request.user.personnel
        # for o in operations
        """
    	for o in accounted:#o.institution() in context['personnel'].all_institutions() and
    		if o.progression() < 100 and o.rapported() not in ['0',None]:
    			# and context['permissions'] > 0
    			nb_observations += 1
    	"""
        data = {
            'nb_have_to_report': nb_have_to_report,
            'nb_is_rapported': nb_is_rapported,
            'nb_observations': nb_observations,
            'nb_have_to_report2': nb_have_to_report2,
            'nb_is_rapported2': nb_is_rapported2,
            'nb_observations2': nb_observations2
        }
        return JsonResponse(data)

    def valid_observations(request):
        element_id = request.POST["element_id"]
        valid_attributes = request.POST['attributes']

        element = Entity.objects.get(id=int(element_id))
        is_tache = element.m_type_entity.is_tache
        if is_tache:
            element = Tache.objects.get(id=int(element_id))
        element.is_rapported = True
        element.m_reported_fields = valid_attributes
        element.save()
        return redirect('/operations/')

    def print_mail_file(request):
        owners = Owner.objects.filter()
        mail_lists = list()
        for o in owners:
            mail_lists.append(o.m_user.email)
        context = {
            'mail_lists': mail_lists
        }
        template = "webpages/ctn_bpf/csv_template.html"
        return render(request, template, context)

    def assistance(request):
        template = "webpages/ctn_bpf/assistance.html"
        context = basis(request)
        result = render(request, template, context)
        try:
            if request.session['assistance'] == 1:
                result = redirect('/')
        except:
            pass
        return result

    def ajax_restore(request):
        
        r_mail = request.GET.get('mail')
        code = ""
        for i in range(6):
            code += str(random.randint(0, 9))
        message_context = {
            'code': code,
        }
        subject = "  de Compte Opera +"
        message = render_to_string('webpages/ctn_bpf/mails/new_code.html', message_context)
        email = r_mail
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [email, ]
        msg = EmailMessage(subject, message, email_from, recipient_list)
        msg.content_subtype = 'html'
        try:
            msg.send()
            send = '0'
        except:
            send = '1'
        data = {
            'code': code,
            'send': send
        }
        return JsonResponse(data)

    def restorepass(request):
        mail = request.POST['restore']
        password = request.POST['password']
        user = User.objects.filter(email=mail).first()
        user.set_password(password)
        user.save()
        login(request, user)
        return redirect('/')

    def documentation(request):
        document = OperaFile.objects.filter(m_name="DOCU").first().m_file.url
        return redirect(document)

    # New Updates
    @login_required(login_url='/log_account')
    def chaine_indicateurs(request):
        template = "webpages/ctn_bpf/chaine_resultat.html"
        context = basis(request)
        actual_institution = context['actual_institution']
        context['menu'] = 'l'
        context['top_entities'] = actual_institution.top_entity().lines()
        context['this_entities'] = actual_institution.get_entities()
        return render(request, template, context)

    def get_indicateur_value(request):
        indicateur = Indicateur.objects.get(id=int(request.GET.get('id_indicateur')))
        fields = indicateur.m_fields
        periodicite = indicateur.m_periodicite
        final_cible = indicateur.m_final_cible
        if final_cible == None:
            final_cible = ""
        cibles = indicateur.m_cibles
        data_verification = indicateur.m_data_verification

        verification_indi = indicateur.m_verification_indi

        data = {
            'obj': indicateur.m_objectif_indi,
            'indicateur': indicateur.m_name,
            'fields': fields,
            'periodicite': periodicite,
            'final_cible': final_cible,
            'cibles': cibles,
            'verification_indi': verification_indi,
            'data_verification': data_verification,
            "data_verificationind": "#",
            'others': "#"
        }
        tmp_verifi = data_verification.split("#")
        if tmp_verifi[0] == "1":
            ind_ve = DataSet.objects.get(id=int(tmp_verifi[1]))
            data["data_verificationind"] = str(ind_ve)
            data["data_verificationind_url"] = "/data_form/" + str(ind_ve.id) + "/0/"
        if indicateur.m_others not in [None, ""]:
            data["others"] = indicateur.m_others
        return JsonResponse(data, safe=False)

    def ajax_institution(request):
        sens = request.GET.get('sens')
        devise = request.GET.get('devise')
        institution = request.GET.get('institution')
        institution = Institution.objects.get(id=int(institution))
        if int(sens) == 1:
            institution.default_options = False
        elif int(sens) == 0:
            institution.default_options = True
        elif int(sens) == 3:
            institution.finan_options = None
        elif int(sens) == 2:
            institution.finan_options = devise
        institution.save()
        data = {
            'nada': True
        }
        return JsonResponse(data, safe=False)

    # def save_indicateur(request):
    #     edit_or_create = request.POST["edit_or_create"]
    #     gest_id = request.POST['gest_id']
    #     gest_val = request.POST['gest_val']
    #     name = request.POST["nature_indicateur"]

    #     fields = request.POST["indi_adds"]
    #     periodicite = request.POST["periodicite"]
    #     periodicite2 = request.POST["periodicite2"]

    #     cibles = request.POST["indi_cibls"]
    #     type_entity = request.POST["entity_id"]
    #     data_verification = request.POST["indi_srcs"]

    #     numerateur = request.POST["numerateur"]
    #     denominateur = request.POST["denominateur"]

    #     objectif_indi = request.POST["objectif_indi"]
    #     verification_moyen = request.POST["verification_moyen"] + "#" + request.POST["veri_type"]

    #     sources_speci = request.POST["specig_form"]
    #     if sources_speci == "1":
    #         try:
    #             sources_speci += "#" + request.POST["dataSt"]
    #         except:
    #             pass

    #     codes_colors = request.POST["codes_colors"]
    #     alerts_modals = request.POST["alert_modals"]
    #     others = request.POST["other"]

    #     cibles = request.POST["indi_cibls"]
    #     coeficient = int(request.POST["coefficient"])

    #     unite = request.POST["unite_indicateur"]

    #     try:
    #         default_calcul = request.POST["default_calcul"]
    #     except:
    #         default_calcul = 1

    #     if edit_or_create == "c":

    #         entity = Entity.objects.get(id=int(type_entity))
    #         indi = Indicateur(m_name=name, m_fields=fields, m_periodicite=periodicite, m_sub_periodicite=periodicite2,
    #                           m_data_verification=data_verification, m_cibles=cibles, m_enti=entity)
    #     else:
    #         edit_id = request.POST["edit_id"]
    #         indi = Indicateur.objects.get(id=int(edit_id))
    #         indi.m_name = name
    #         indi.m_fields = fields
    #         indi.m_periodicite = periodicite
    #         indi.m_sub_periodicite = periodicite2
    #         indi.m_data_verification = data_verification
    #         indi.m_cibles = cibles
    #     indi.m_institution = basis(request)["actual_institution"]
    #     indi.m_cibles = cibles
    #     indi.m_numerateur = numerateur
    #     indi.m_denominateur = denominateur
    #     indi.m_coefficient = coeficient
    #     indi.m_data_verification = sources_speci
    #     indi.m_unite = unite

    #     indi.objectif_indi = objectif_indi
    #     indi.m_colors_code = codes_colors
    #     indi.m_verification_indi = verification_moyen
    #     indi.alerts_code = alerts_modals
    #     indi.m_others = others

    #     try:
    #         ind.m_secundo_options = request.POST["other_fields"]
    #     except:
    #         pass
    #     if int(default_calcul) == 1:
    #         formula = "$" + str(numerateur) + "$" + " * " + str(coeficient) + " /" + "$" + str(denominateur) + "$"
    #         indi.m_datalets_calcul = formula
    #     indi.save()
    #     return redirect('/evaluer/' + gest_val + '/' + gest_id)

    # @login_required(login_url='/log_account')
    # def evaluer(request, hierachie="0", gest_id=0, search=None, specifi_id=None):
    #     context = basis(request)
    #     hierachie = int(hierachie)
    #     if specifi_id == None:
    #         if hierachie != -1:
    #             entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution=context[
    #                 'actual_institution']).first().m_entity_type
    #         else:
    #             entity = InsitutionEntities.objects.filter(
    #                 m_institution=context['actual_institution']).last().m_entity_type
    #         context['entity'] = entity
    #         context['hierachie'] = hierachie
    #         context['hierachy'] = hierachie
    #         if gest_id == 0:
    #             elements = entity.lines()
    #         else:
    #             get_e = Entity.objects.get(id=int(gest_id))
    #             context['base_val'] = get_e
    #             elements = list(get_e.sub_entities())
    #             context['sup_hierachy'] = list()
    #             for t in get_e.sup_hierachie():
    #                 context['sup_hierachy'].append(t)
    #             context['sup_hierachy'].append(get_e)
    #
    #         if search != None:
    #             tmp = elements
    #             elements = list()
    #             for t in tmp:
    #                 if search in t.m_value_fields:
    #                     elements.append(t)
    #
    #     else:
    #         a_entity = Entity.objects.get(id=specifi_id)
    #         entity = a_entity.m_type_entity
    #         context['entity'] = entity
    #         context['hierachie'] = hierachie
    #         context['hierachy'] = hierachie
    #         elements = [a_entity]
    #     paginator_o = Paginator(elements, 10)
    #     page_number_o = request.GET.get('page')
    #     elements_page = paginator_o.get_page(page_number_o)
    #     # oeuvres_date
    #     dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
    #
    #     context["indi_options"] = entity.indicateurs
    #     try:
    #         context["indi_options"][0] == None
    #         context["no_secund"] = False
    #     except:
    #         context["no_secund"] = None
    #
    #     context['menu'] = 'g'
    #     context['g_v'] = 'i2'
    #     context['gest_id'] = gest_id
    #     context['gest_val'] = hierachie
    #     context['gest_val_1'] = hierachie + 1
    #     context['pages_o'] = elements_page
    #     context['num_pages'] = paginator_o.num_pages
    #     context['page_range'] = paginator_o.page_range
    #     context['dataelts'] = dataelts
    #     context['dataelts2'] = dataelts.exclude(m_default_value=None)
    #
    #     template = "webpages/ctn_bpf/evaluer.html"
    #     return render(request, template, context)

    def evaluer_detail(request, gest_id=0):
        return evaluer(request, "0", 0, None, gest_id)

    def indic_plus(request, indic_id):
        context = basis(request)
        entity = Entity.objects.get(id=int(indic_id))
        template = "webpages/ctn_bpf/indic_plus.html"
        context['entity'] = entity
        return render(request, template, context)

    def data_elements(request):
        context = basis(request)
        entity = Entity.objects.get(id=int(indic_id))
        template = "webpages/ctn_bpf/indic_plus.html"
        context['entity'] = entity
        return render(request, template, context)

    def duplicate(request):
        from .utilities2 import duplicate_entity_logic, duplicate_tache, duplicate_entity, duplicate_operation
        generator_d = request.POST['generator_d']
        response = ""
        if generator_d == 'e':
            value = request.POST['dup_id']
            entity = Entity.objects.get(id=int(value))
            link = request.POST['link']
            response = redirect(link)
            # new = int(request.POST['new_dup'])
            new = 0
            try:
                name = request.POST['nom_dup']
                if name in [None, '']:
                    name = "#"
            except:
                name = "#"
            try:
                relogic_dup = int(request.POST['relogic_dup'])
            except:
                relogic_dup = 0

            if relogic_dup == 0:
                duplicate_entity(entity, name)
            else:
                duplicate_entity_logic(entity, name)

        elif generator_d == 'o':
            value = request.POST['dup_id']
            entity = Operation.objects.get(id=int(value))
            link = request.POST['link']
            response = redirect(link)  # redirect("/taches/"+str(operation.m_tache.id))
            try:
                name = request.POST['nom_dup']
                if name in [None, '']:
                    name = "#"
            except:
                name = "#"
            o2 = duplicate_operation(entity, name)
            o2.tache = entity.tache
            try:
                relogic_dup = (request.POST['reraci_dup'])
                r_personnel = Personnel.objects.get(id=int(request.POST["perso"]))
                r_accountable = Personnel.objects.get(id=int(request.POST["accountable"]))
                r_consulted = Personnel.objects.get(id=int(request.POST["consulted"]))
                r_informed = Personnel.objects.get(id=int(request.POST["informed"]))
                o2.personnel = r_personnel
                o2.accountable = r_accountable
                o2.consulted = r_consulted
                o2.informed = r_informed
            except:
                relogic_dup = 0
            o2.save()

        elif generator_d == 'i':
            values = request.POST['values_d'].split("|")
            response = redirect("/institution/")
            try:
                entity_dup = request.POST['entity_dup']
            except:
                entity_dup = "0"
            for v in values[:-1]:
                ins = Institution.objects.get(id=int(v))
                tmp = ins
                tmp.id = None
                tmp.save()

                # entity Institutions
                ins_entities = InsitutionEntities.objects.filter(m_institution__id=int(v))
                for i in ins_entities:
                    tmp11 = i.m_entity_type
                    tmp11.id = None
                    tmp11.save()
                    tmp1 = InsitutionEntities(m_institution=tmp, m_hierachie=i.m_hierachie, m_entity_type=tmp11)
                    tmp1.save()
                    if entity_dup == '1':
                        for i2 in tmp11.lines():
                            tmp2 = i2
                            tmp2.m_type_entity = tmp11
                            if tmp11.is_tache:
                                tmp3 = Tache.objects.get(id=tmp2.id)
                                tmp3.m_type_entity = tmp11
                            tmp2.id = None
                            tmp3.id = None
                            tmp2.save()
                            tmp3.save()

                # structures
                structures = Structure.objects.filter(institution__id=int(v))
                for i in structures:
                    tmp2 = i
                    tmp2.id = None
                    tmp2.institution = ins
                    tmp2.save()

                # aggregates
                aggregates = Aggregate.objects.filter(m_institution__id=int(v)).first()
                if aggregates != None:
                    tmp3 = aggregates
                    tmp3.id = None
                    tmp3.m_institution = ins
                    tmp3.save()

                # roles
                roles = Role.objects.filter(actual_institution__id=int(v))
                for r in roles:
                    tmp4 = r
                    tmp4.id = None
                    tmp4.actual_institution = ins
                    tmp4.save()
            request.session['new_ins'] = 1
        return response

    def print_pdf(request):
        ind = int(request.GET.get('ind'))

        context = basis(request)
        operations = list()
        if ind == 1:
            tmp_ops = Operation.objects.filter()
        elif ind == 2:
            p = request.user.personnel
            tmp_ops = Operation.objects.filter(personnel=p)
        if ind in [1, 2]:
            for t in tmp_ops:
                if t.institution() == context['actual_institution']:
                    operations.append(t)
            lines = list()
            taches_lines = list()
            for o in operations:
                tmp_line = str(
                    o.tache) + "" + str(
                    o) + "" + str(
                    o.personnel)
                if o.periodes() != None:
                    tmp_line += "" + str(
                        o.periodes().details_periode())
                else:
                    tmp_line += "" + " "
                if context['actual_institution'].default_options != True:
                    values = o.value_split()
                    agr_fields = o.agr_fields()
                    i = 0
                    for v in agr_fields:
                        if v != 'file':
                            try:
                                tmp_line += "" + str(
                                    values[i])
                            except:
                                tmp_line += "" + " "
                        else:
                            tmp_line += "" + " -- "
                        i += 1
                    tmp_line += "" + o.status_op()
                lines.append(tmp_line)
        elif ind == 4:
            taches = context['actual_institution'].last_entity().lines()
            lines = list()
            for t in taches:
                hierachie = ""
                for h in t.sup_hierachie():
                    hierachie += str(
                        h.get_name()) + ""
                fields = ""
                for f in t.values():
                    fields += str(
                        f) + ""
                lines.append(hierachie + fields + str(
                    t.progression()) + "" + str(
                    t.m_date_modif))
        data = {
            'lines': lines
        }
        return JsonResponse(data, safe=False)

    @login_required(login_url='/log_account')
    def dataelts(request, elt_id=0, elt_str=0):
        context = basis(request)
        context['g_v'] = 'eD'
        if elt_id == 0:
            template = "webpages/ctn_bpf/dataelts.html"
            indicateurs = Indicateur.objects.filter()
            dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
            context['indicateurs'] = indicateurs
            context['dataelts'] = dataelts
        else:
            template = "webpages/ctn_bpf/data_element_id.html"
            dataelt = DataElement.objects.get(id=int(elt_id))
            context["dataelt"] = dataelt
            context["structures"] = Structure.objects.filter(institution=context["actual_institution"])
            if elt_str == 0:
                context["actu_struc"] = context["structures"].first()
            else:
                context["actu_struc"] = Structure.objects.get(id=int(elt_str))
            # lines = dataelt
            tmps = dataelt.element_values(context["actu_struc"])
            periods_tmp = dict()
            p_tmps = list()

            class DEL:
                def __init__(self, e1, e2, e3=0):
                    self.sup_period = e1
                    self.period = e2
                    self.value = e3

                def __repr__(self):
                    return self.sup_period

            for t in tmps:
                a = t.m_dataset_value.m_period_value + "-" + t.m_dataset_value.m_sub_period_value
                if a in p_tmps:
                    if t.m_value not in ["", None]:
                        periods_tmp[a].value += float(t.m_value)
                else:
                    elts = DEL(t.m_dataset_value.m_sub_period_value, t.m_dataset_value.m_period_value, 0)
                    if t.m_value not in ["", None]:
                        elts.value = float(t.m_value)
                    else:
                        elts.value = 0
                    periods_tmp[a] = elts
                    p_tmps.append(a)
            context["values"] = list()
            for p in p_tmps:
                context["values"].append(periods_tmp[p])
        # context["values"].group_by = ['designation']
        return render(request, template, context)

    @login_required(login_url='/log_account')
    def dataelts_edit(request, elt_id):
        template = "webpages/ctn_bpf/dataelts_edit.html"
        context = basis(request)
        indicateurs = Indicateur.objects.filter()
        dataelts = DataElement.objects.filter(id=elt_id).first()
        context['indicateurs'] = indicateurs
        context['dataelts'] = dataelts
        return render(request, template, context)

    @login_required(login_url='/log_account')
    def dataelts_indic(request):
        template = "webpages/ctn_bpf/dataelts_indic.html"
        context = basis(request)
        context['is_indi'] = True
        context['indicateurs'] = list()
        tmps_is = Indicateur.objects.filter()
        dataelts = DataElement.objects.filter()
        for i in tmps_is:
            enti = i.m_enti
            if enti != None:
                if enti.m_type_entity.get_institution(context['actual_institution']) != None:
                    context['indicateurs'].append(i)
        context['dataelts'] = dataelts
        return render(request, template, context)

    def ajax_progression(request):
        plannify = request.GET.get("plannify")
        periode = Periode.objects.get(id=int(request.GET.get("periode")))

        year = request.GET.get("year")
        institution = request.GET.get("institution")
        institution = Institution.objects.get(id=int(institution))
        sub_period = institution.default_subperiod

        try:
            mods = request.GET.get("mods")
        except:
            mods = None

        try:
            entity = request.GET.get("entity")
        # entity_type =  request.GET.get("entity_type")
        except:
            entity = None

        progression = 0
        t_plannify = list()

        """
    	for t in taches:
    		t_plannify.append(t.plannification())
    	"""
        result = list()
        if plannify != "#":
            cumulate = int(request.GET.get("cumul1"))  # 1 #Mettre une variable
            nb_ops = 0
            ops = list()
            if entity == None:
                operations = Operation.objects.filter(m_institution=institution)
            else:
                operations = Entity.objects.get(id=int(entity)).operations()
            bool(operations)
            for o in operations:
                ops.append(o)

            try:
                tmp_val = get_period_values(periode, plannify + "_")[0]
            except:
                tmp_val = None

            if tmp_val != None:
                result.append(tmp_val)
                for o in ops:
                    if o.m_tache_plannification != None:
                        v = get_period_values(periode, o.m_tache_plannification + "_")
                        cond1 = (cumulate == 0) and int(v[0]) == int(tmp_val)
                        cond2 = (cumulate == 1) and int(v[0]) <= int(tmp_val)
                        if len(v) > 0:
                            if cond1 or cond2:
                                progression += o.progression()
                                nb_ops += 1
                    else:
                        pass
            glob_ops = int(request.GET.get("cumul2"))  # 1
            if glob_ops == 1:
                nb_ops = operations.count()
            if nb_ops > 0:
                progression /= nb_ops
        else:
            if mods in [None, "0"]:
                prs = list()
                tops = institution.top_entity().lines()
                plannify_all = request.GET.get("plannify_all")
                plannify_all = plannify_all.split("#")[:-1]
                t_plannify2 = t_plannify
                t_plannify = subperiods_value(periode, year)
                mrd_t = list()
                i_t = 0
                for t in tops:
                    mrd_t.append(list())
                    for p in t_plannify:
                        mrd_t[i_t].append(0)
                    i_t += 1

                i_t = 0

                for to in tops:
                    nb_jT = 0
                    if to.m_type_entity.is_tache == False:
                        tach = to.taches()
                    else:
                        tach = [to]
                    ops = list()
                    for t in tach:
                        ops += t.operations()
                    t_plannify2 = list()
                    for a in tach:
                        a = Tache.objects.get(id=a.id)
                        t_plannify2.append(a.plannification())
                    j_t = 0
                    for p in t_plannify:
                        progression = 0
                        nb_jT = 0
                        nb_ops = 0
                        if p != None:
                            for o in ops:
                                try:
                                    v = get_period_values(periode, o.m_tache_plannification + "_")
                                    if len(v) > 0:
                                        if int(v[0]) == int(p):
                                            progression += o.progression()
                                        nb_ops += 1
                                except:
                                    pass
                            if nb_ops != 0:
                                mrd_t[i_t][j_t] = round(progression / nb_ops, 2)
                            j_t += 1
                    i_t += 1
                prs = list()
                j = 0
                for t in mrd_t:
                    tmp = ""
                    for s in t:
                        tmp += str(s) + "#"
                    prs.append(tmp)
            else:
                prs = list()
                tops = institution.top_entity().lines()
                for t in tops:
                    result = list()
                    operations = t.operations()
                    nb_x = len(institution.default_period.decoup_slip()) * len(
                        institution.default_subperiod.decoup_desc_slip())
                    if institution.default_period.m_logic_type == 3:
                        chronogrs = ["0_9_9_9_9_", "9_0_9_9_9_", "9_9_0_9_9_", "9_9_9_0_9_", "9_9_9_9_0_"]
                        year = request.GET.get("year")
                        TP1 = subperiods_value(institution.default_period, int(year))
                        TP2 = list()
                        dic_ops = dict()
                        for t in TP1:
                            a = transform_to_plannify(t)
                            TP2.append(a)
                            for c in chronogrs:
                                dic_ops[a + "-" + c] = {
                                    "progress": 0,
                                    "nb_ops": 0
                                }
                        # operations = operations.filter(m_tache_plannification__in=TP2)

                        for o in operations:
                            dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation][
                                "progress"] += o.progression()
                            dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation]["nb_ops"] += 1
                        for a in TP2:
                            for c in chronogrs:
                                if dic_ops[a + "-" + c]["nb_ops"] > 0:
                                    tmp = str(dic_ops[a + "-" + c]["progress"] / dic_ops[a + "-" + c]["nb_ops"])
                                else:
                                    tmp = "0"
                                result.append(tmp)
                        prs.append("#".join(result))
        # progression /= len(taches)
        data = {
            'plannify': plannify,
            'result': result,
            'progression': round(progression, 2)
        }
        if plannify == "#":
            data['progressions'] = prs
        return JsonResponse(data)

    def ajax_calcul_date(request):
        plannify = request.GET.get('plannify')
        periode = Periode.objects.get(id=int(request.GET.get("periode")))
        tmp_val = get_period_values(periode, plannify + "_")[0]

        ta1 = datetime.date(int(tmp_val[:4]), int(tmp_val[4:6]), int(tmp_val[6:8]))
        ta2 = datetime.date(int(tmp_val[8:12]), int(tmp_val[12:14]), int(tmp_val[14:16]))
        ta3 = ta2
        test = ta2.isoweekday()
        if test > 1:
            ta2 -= datetime.timedelta(test - 1)
            ta3 += datetime.timedelta(7 - test)
        test_dates = list()
        for i in range(5):
            test_dates.append("Du " + str(ta2) + " Au " + str(ta3))
            ta2 += datetime.timedelta(7)
            ta3 += datetime.timedelta(7)
        bumps1 = [int(tmp_val[:4]), int(tmp_val[4:6]) - 1, int(tmp_val[6:8])]
        bumps2 = [int(tmp_val[8:12]), int(tmp_val[12:14]) - 1, int(tmp_val[14:16])]
        data = {
            'tmp_val': tmp_val,
            'test_dates': test_dates,
            'ta1': str(ta2),
            'result': tmp_val
        }
        return JsonResponse(data)

    def delete_mul(request):
        entities = request.POST["multi_values"]
        hierachy = int(request.POST['hierachy'])
        g_v = request.POST['g_v']
        try:
            g_v_2 = request.POST['g_v_2']
        except:
            g_v_2 = None

        from .utilities2 import delete_entities, delete_operations
        if g_v != "o":
            delete_entities(entities)
            response = '/gestionnaire/' + str(hierachy)
            if g_v_2 is not None:
                response = '/gestionnaire/' + str(hierachy - 1)
                response += '/' + str(g_v_2) + '/'
        else:
            a = delete_operations(entities)
            response = '/taches/' + str(a.id) + '/'
        return redirect(response)

    @login_required(login_url='/log_account')
    def data_form(request, nature=-1, elt_id=0):
        template = "webpages/ctn_bpf/data_form.html"
        context = basis(request)
        nature = int(nature)
        context["nature"] = nature
        context["elt_id"] = elt_id
        periode_ok = PeriodeOk.objects.all().distinct('annee')
        context['periode_ok'] = periode_ok
        if nature != -1:
            template = "webpages/ctn_bpf/data_form_plus.html"
            dataform = DataSet.objects.filter(id=nature, m_institution=context["actual_institution"]).first()
            context["element"] = dataform
            if dataform != None:
                next_nature = nature + 1
                lines = dataform.dS_values()
            else:
                lines = list()
        else:
            next_nature = 1
            lines = DataSet.objects.filter(m_institution=context["actual_institution"])
            try:
                if context["permissions"] == 0 or context["no_simple_user"] == False:
                    # role
                    role = request.user.personnel.get_function(context["actual_institution"].id).m_role
                    lines = lines.filter(m_roles=role)
            except:
                pass
        paginator_o = Paginator(lines, 10)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date
        context["g_v"] = "dSV"
        context["menu"] = "h"
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range

        return render(request, template, context)

    def error_404(request, exception):
        if request.user.is_authenticated:
            template = "webpages/ctn_bpf/errors.html"
            context = basis(request)
        else:
            template = "webpages/ctn_bpf/errors_zero.html"
            context = dict()
        context['error'] = 404
        context['exception'] = exception
        return render(request, template, context)

    def error_500(request):
        if request.user.is_authenticated:
            template = "webpages/ctn_bpf/errors.html"
            context = basis(request)
        else:
            template = "webpages/ctn_bpf/errors_zero.html"
            context = dict()
        return render(request, template, context)

    def extra(request, name=""):
        context = basis(request)
        if request.user.is_authenticated:
            template = "webpages/ctn_bpf/extra.html"
            files = OperaFile.objects.filter(m_institution=context["actual_institution"]).select_related(
                "m_institution")
            bool(files)
            try:
                personnel_opera = settings.PERSONNAL_OPERA
                context["personnel_opera"] = personnel_opera
                if personnel_opera:
                    context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
            except:
                personnel_opera = None
        else:
            try:
                personnel_opera = settings.PERSONNAL_OPERA
                context["personnel_opera"] = personnel_opera
                if personnel_opera:
                    context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
            except:
                personnel_opera = None
            template = "webpages/ctn_bpf/extra.html"
            files = OperaFile.objects.filter(is_public=1)
            bool(files)
        if name != None:
            tmp1 = files.filter(m_name__contains=name)
            tmp2 = list()  # files.filter(m_file__url__contains=name)
            files = list()
            for t in tmp1:
                files.append(t)
            for t in tmp2:
                files.append(t)
        paginator_o = Paginator(files, 10)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date
        context["g_v"] = "ex"
        context["menu"] = "x"
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range
        return render(request, template, context)

    def get_progressions(request):
        list_ids = request.GET.get('list_ids').split("#")[:-1]
        list_ids = [int(i) for i in list_ids]
        entities = Entity.objects.filter(id__in=list_ids)

        result = list()
        data_ids = list()
        type_Progression = request.GET.get("type_progression")
        if type_Progression == "P":
            for i in entities:
                result.append(i.progression())
                data_ids.append(str(i.id))
        elif type_Progression == "T":
            for i in entities:
                result.append(i.technical_progression())
                data_ids.append(str(i.id))
        elif type_Progression == "F":
            for i in entities:
                result.append(i.finan_progression())
                data_ids.append(str(i.id))
        data = {
            'result': result,
            'ids': data_ids
        }
        return JsonResponse(data, safe=False)

    def get_indi_data(request):
        data_id = request.GET.get('indi_id')
        ind = Indicateur.objects.get(id=int(data_id))
        nums = list()
        ids = list()
        for i in ind.indi_numerateur():
            nums.append(str(i))
            ids.append(i.id)
        denums = list()
        for i in ind.indi_denum():
            denums.append(str(i))

        period = ind.m_periodicite
        sub_period = ind.m_sub_periodicite
        cibles = ind.m_cibles
        data = {
            'nom': str(ind),
            'nums': nums,
            'denums': denums,
            'ids': ids
        }
        return JsonResponse(data, safe=False)

    # def consult_oper(request):
    #     operation = Operation.objects.get(id=int(request.POST["operation"]))
    #     nb_stars = request.POST["nb_stars"]

    #     request.session['new_rapport'] = 2
    #     observations = request.POST["observations"]
    #     file = request.FILES['file']
    #     oC = OperationConsulted(m_operation=operation, m_stars=nb_stars, m_observations=observations, file=file)

    #     oC.save()
    #     if request.method == "POST":
    #         m_commentaire = request.POST.get('observations')
    #         file = request.FILES['file']
    #         save_avis = HistoricRACI.objects.create(m_commentaire=m_commentaire, m_role="C",
    #                                                 m_operation_id=request.POST["operation"], file=file)
    #         save_avis.save()
    #     return redirect("/operations/")

    @login_required(login_url='/log_account')
    def personnels_raci(request, name=None):
        template = "webpages/ctn_bpf/persos_raci.html"
        context = basis(request)
        context['g_vs'] = 'p2'
        context['g_v'] = 'p2_RACI'

        context['searches'] = []
        context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
            actual_institution=context['actual_institution']).select_related('actual_institution')})
        context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
            institution=context['actual_institution']).select_related('institution')})

        ents = list()
        ieS = list(context['actual_institution'].get_entities())
        bool(ieS)
        # n = ieS.count()
        j = 0

        for i in ieS[:-2]:
            if True:
                tmp = {
                    "hierachie": i.m_hierachie,
                    "label": str(i),
                    'entities': list()
                }
                if j == 0:
                    tmp["entities"] = ieS[0].m_entity_type.lines()
                ents.append(tmp)
                j += 1
            else:
                pass
        context['ents'] = ents

        # context['matieres'] = ies[-2].lines()

        elements = list()
        tmps = Personnel.objects.filter()
        for t in tmps:
            if context['actual_institution'] in t.all_institutions():
                elements.append(t)

        akas = list()
        tmp_perso = Personnel.objects.filter()
        # pFs = Personnel_Function.objects.filter(m_institution=context["actual_institution"]).values("m_personnel")

        if True:
            for t in tmp_perso:
                if context['actual_institution'] in t.all_institutions():
                    atmp = {
                        'id': t.id,
                        'prenom': t.prenom,
                        'nom': t.nom,
                        'photo': t.photo,
                        'get_function': t.get_function(context['actual_institution'].id),
                        'RACI_entities': t.RACI_entities()
                    }
                    akas.append(atmp)
                # lines2.add(t)
        else:
            context['lines'] = lis_peros

        if name != None:
            name = name.lower()
            tmps = akas
            akas = list()
            context['lines'] = list()
            for tt in tmps:
                ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
                for t in ta:
                    if name in str(t):
                        akas.append(tt)
                        break

        paginator_o = Paginator(akas, 10)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date

        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range
        return render(request, template, context)

    def data_sets(request, indi_id=0):
        context = basis(request)
        # data_set = DataSet.objects.get(id=indi_id)
        # context['data_set']=data_set
        indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
        template = "webpages/ctn_bpf/data_sets.html"
        periode = Periode.objects.all()
        context['periode'] = periode
        context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
        context["indicateurs"] = indicateurs
        context["menu"] = "h"
        # if indi_id != 0:
        # 	dataset = DataSet.objects.get(id=int(indi_id))
        # 	context["dataset"] = dataset
        """
    	context["indicateur"] = indicateur
    	context["element"]= indicateur.m_enti
    	context["indi_id"] = indi_id
    	"""
        return render(request, template, context)

    def data_sets_design(request, dS_id):
        data_set = DataSet.objects.get(id=dS_id)
        template = "webpages/ctn_bpf/data_sets_design.html"
        context = basis(request)
        context["dataset"] = data_set
        context["design"] = 1
        return render(request, template, context)

    # def ajax_form(request):
        dF = DataSet.objects.get(id=int(request.GET.get("id_dataset")))
        # dF = indicateur.dataset()
        structures = list()
        structure_id = list()
        for s in dF.m_structures.filter():
            structures.append(str(s))
            structure_id.append(s.id)
        data = {
            'periode': dF.periodicite_id,
            'subperiode': dF.m_sub_periode,
            'structures': structures,
            'structures_id': structure_id,
            'form': dF.m_formulaire
        }
        return JsonResponse(data, safe=False)

    def ajax_hiera_struc(request):
        institution = request.GET.get("institution")
        logic_strc = request.GET.get("logic_strc")
        m_institution = Institution.objects.get(id=int(institution))
        elt_logic = ""
        for e in logic_strc.split("|")[:-1]:
            a = e.split("#")
            if len(a) > 1:
                elt_logic += a[1] + "|"
            else:
                elt_logic += a[0] + "|"
        structures = Structure.objects.filter(institution=m_institution, values_hierachy__contains=elt_logic)
        data = {
            'ids': list(),
            'names': list()
        }
        data["nb_s"] = elt_logic
        for s in structures:
            data["ids"].append(s.id)
            data["names"].append(str(s))
        return JsonResponse(data, safe=False)

    def ajax_RACI_user(request):
        type_RACI = request.GET.get("type_RACI")
        perso = request.GET.get("perso")
        institution = request.GET.get("institution")
        entity_filter = request.GET.get("entity_filter")

        data = dict()
        if type_RACI == "1":
            personnel = Personnel.objects.get(id=int(perso))
            rEL = list()
            data["elts"] = list()
            data["elts_id"] = list()
            data["elts_hierachy"] = list()

            if entity_filter not in ["0", None]:
                entity_filter = int(entity_filter)
                pR = PersonnelRACI.objects.get(id=entity_filter)
                data["elt_actu_id"] = str(pR.m_entity)
                data["elt_actu"] = pR.m_entity.id
            else:
                data["elt_actu_id"] = "#"
                data["elt_actu"] = "#"

            for p in personnel.get_function(institution).m_role.entity_levels():
                rEL.append(str(p))
                data["elts_hierachy"].append(p.m_hierachie)
                tmp_elt = list()
                tmp_id = list()
                for p2 in p.m_entity_type.lines():
                    tmp_elt.append(str(p2))
                    tmp_id.append(int(p2.id))
                data["elts"].append(tmp_elt)
                data["elts_id"].append(tmp_id)
            data["roles"] = rEL
        # data["test_rEL"] = rEL
        return JsonResponse(data, safe=False)

    def ajax_RACI_user_manage(request):
        menu = request.GET.get("menu")
        # entity = Entity.objects.get(id=int(request.GET.get("entity")))
        if menu == "o":
            tache = Tache.objects.get(id=int(request.GET.get("entity")))
            perRACI = tache.personnelRACI()
            data = {
                "responsable": perRACI["responsable"],
                "accounted": perRACI["accounted"],
                "consulted": perRACI["consulted"],
                "informed": perRACI["informed"],
                "test": ""
            }
            allis = ["responsable", "accounted", "consulted", "informed"]
            for s in tache.sup_hierachie():
                all_none = False
                perRACI = s.personnelRACI()
                for al in allis:
                    data["test"] += str(perRACI[al]) + "#"
                    if data[al] == [None]:
                        all_none = True
                        if perRACI[al] != [None]:
                            data[al] = perRACI[al][1].id
                    if all_none == False:
                        break
        return JsonResponse(data, safe=False)

    def assign_RACI(request):
        personnel = Personnel.objects.get(id=int(request.POST["perso_assign"]))
        values_assign = request.POST["values_assign"].split("$")
        try:
            operations_check = request.POST["operations_recursive"]
        except:
            operations_check = None
        for v in values_assign[:-1]:
            # entity = Entity.objects.get(id=int(v.split("#")[0]))
            entity = int(v.split("#")[0].replace("'", ""))
            entity = Entity.objects.get(id=entity)
            raci_role = v.split("#")[1]
            if "1" in raci_role:
                if operations_check != None:
                    operations = entity.operations()
                    rs = raci_role.split("|")
                    for o in operations:
                        if rs[0] == "1":
                            o.personnel = personnel
                        if rs[1] == "1":
                            o.accountable = personnel
                        if rs[2] == "1":
                            o.consulted = personnel
                        if rs[3] == "1":
                            o.informed = personnel
                        o.save()
                pR = PersonnelRACI(m_personnel=personnel, m_entity=entity, m_roles=raci_role)

                pR.save()
        return redirect("/personnels_raci/")

    def print_pdf(request):
        name_pdf = request.GET.get("name_pdf")
        html = request.GET.get("html")
        html = html.replace("<table", "<table border='1' width='100%' cellpadding='5px'")
        html = html.replace("<td", "<td width='100' ")
        html = html.replace("<th", "<th width='100' ")

        data = dict()

        class MyFPDF(FPDF, HTMLMixin):
            pass

        pdf = MyFPDF()
        pdf.add_page()
        pdf.write_html(html)
        pdf.output('html3.pdf', 'F')
        return JsonResponse(data, safe=False)

    # @login_required(login_url='/log_account')
    # def List(request):
    #     template = "webpages/ctn_bpf/tache_non.html"
    #     operation = Operation.objects.all()
    #     count = Operation.objects.count()
    #     context = basis(request)
    #     context["operation"] = operation
    #     context["count"] = count
    #     return render(request, template, context)

    # def taches_effectuee(request):
    #     template = "webpages/ctn_bpf/tache_effectuee.html"
    #     operation_detail = OperationDetails.objects.all()
    #     context = basis(request)
    #     context['operation_detail'] = operation_detail
    #     return render(request, template, context)

    def Avis(request, id):
        #  template="webpages/ctn_bpf/avis_raci.html"
        operation_historic = HistoricRACI.objects.all()
        operation = Operation.objects.get(id=id)
        context = basis(request)
        context['operation_historic'] = operation_historic
        operation_rapport = operation.get_operation_details_invalid().last()
        context["operation_rapport"] = operation_rapport
        try:
            operation = Operation.objects.get(id=id)
            context['operation'] = operation
        except Operation.DoesNotExist:
            context['error_message'] = ""
        return render(request, "webpages/ctn_bpf/avis_raci.html", context)

    def recuperer_personnel(request):
        result = Personnel.objects.filter(id=request.POST.get('mail')).values('nom', 'prenom', 'tel').first()
        if result is not None:
            return JsonResponse(result)
        else:
            return JsonResponse({'error': 'Aucun enregistrement '})

    def design_form(request):
        context = basis(request)
        if request.method == "POST":
            form_name = request.POST['form_name']
            elements = request.POST.getlist('element')
            indicateurs = request.POST.getlist('indicateur')
            periode = request.POST['periode']
            sub_periode = request.POST['sub_periode']
            actual_institution = context['actual_institution'].id
            role = request.POST.getlist('role')
            structure = request.POST.getlist('structure')
            # print("role:",role)
            # print("structure:",structure)
            # print("indicateur:",indicateurs)
            dS = DataSet.objects.create(m_name=form_name, m_periode=periode, m_sub_periode=sub_periode,
                                        m_institution_id=actual_institution)

            dS.save()
            dS.m_indicateurs.set(indicateurs)
            dS.m_dataelements.set(elements)
            dS.m_roles.set(role)
            dS.m_indicateurs.set(indicateurs)
            dS.m_structures.set(structure)
            responsemndjn = "/data_sets/design/" + str(dS.id) + "/"
            return redirect(responsemndjn)

    # def edit_dataset(request, id=0):
    #     context = basis(request)
    #     data_set = DataSet.objects.get(id=int(id))
    #     context['data_set'] = data_set
    #     indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
    #     template = "webpages/ctn_bpf/data_sets_edit.html"
    #     context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
    #     context["indicateurs"] = indicateurs


    #     return render(request, template, context)

    def count_operations(request):
        context = basis(request)
        actual_institution = context['actual_institution']

        count = Operation.objects.filter(m_institution_id=actual_institution, etat="0").count()
        return JsonResponse({'count': count})

    def count_tache_consulted(request):
        context = basis(request)
        actual_institution = context['actual_institution']
        perso = request.user.personnel.id
        count_tache_consulted = Operation.objects.filter(perso=personnel_id, etat="0").count()
        return JsonResponse({'count_tache_consulted': count_tache_consulted})

    def count_informed(request):
        context = basis(request)
        actual_institution = context['actual_institution']

        count_informed = OperationDetails.objects.filter(request.user.personnel == personnel.id, etat="2").count()

        return JsonResponse({'count_informed': count_informed})

    # def Avis_informed(request, id=0):
    #     context = basis(request)
    #     template = "webpages/ctn_bpf/avis_informed.html"
    #     operation = Operation.objects.get(id=int(id))
    #     context['operation'] = operation
    #     operation_historic = HistoricRACI.objects.all()
    #     context['operation_historic'] = operation_historic
    #     operation_rapport = operation.get_operation_details_invalid().last()
    #     context["operation_rapport"] = operation_rapport
    #     return render(request, template, context)

    # def tache_consulted(request):
    #     context = basis(request)
    #     atual_institution = context['actual_institution']
    #     operation = Operation.objects.all()
    #     context['operation'] = operation
    #     template = "webpages/ctn_bpf/tache_consulted.html"
    #     return render(request, template, context)

    def edit_data(request, id):
        if request.method == "POST":
            nom_donnee = request.POST['nom_donne']
            data_eltype = request.POST['data_eltype']

            aggregation = request.POST['aggregation']
            comment = request.POST['comment']
            default_value = request.POST['default_value']
            nature_donne = request.POST['nature_donne']
            data_element = DataElement.objects.filter(pk=id)

            data_element.update(m_name=nom_donnee, m_value_type=data_eltype, m_aggregation_type=aggregation,
                                m_description=comment, m_default_value=default_value, m_domain_type=nature_donne)
            # save_data.update()
            return redirect('../dataelts')

    # def count_persos(request):
    #     context = basis(request)
    #     actual_institution = context['actual_institution']
    #     perso = request.user.personnel.id

    #     count_persos = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="2").count()
    #     return JsonResponse({'count_persos': count_persos})

    # def count_accountable(request):
    #     context = basis(request)
    #     actual_institution = context['actual_institution']
    #     perso = request.user.personnel.id
    #     operation = Operation.objects.all()
    #     m_operation_consulted = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="1").count()
    #     return JsonResponse({'m_operation_consulted': m_operation_consulted})

    def count_effectuee(request):
        context = basis(request)
        actual_institution = context['actual_institution']
        perso = request.user.personnel.id
        operation = Operation.objects.all()
        count_effect = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="1").count()
        return JsonResponse({'count_effect': count_effect})


# -*- coding: utf-8 -*-
from asgiref.sync import sync_to_async

from django.http import FileResponse, HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import render, redirect, get_object_or_404
from django.core.paginator import Paginator
from django.contrib.auth import authenticate, login, logout

from django.core.mail import send_mail, send_mass_mail

from django.core.mail import EmailMessage, EmailMultiAlternatives
from django.core.cache import cache
from django.views.decorators.cache import cache_page

from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.db.models import ProtectedError
from django.contrib.auth.decorators import login_required

from .models import *
from .utilities import get_period_values, set_pv_tp, subperiods_value, transform_to_plannify
from .utilities2 import split_extras1
import os
import datetime


@login_required(login_url='/log_account')
def admin_institution(request):
    template = "webpages/ctn_bpf/institution_admin.html"
    context = {
        'edit': 0
    }
    return render(request, template, context)


@login_required(login_url='/log_account')
def contact(request):
    template = "webpages/ctn_bpf/contact.html"
    context = {
        'edit': 0
    }
    return render(request, template, context)


def edit_institution(request, institution_id):
    template = "webpages/ctn_bpf/institution_admin.html"
    context = {
        'edit': 1,
        'institution': Institution.objects.get(id=int(institution_id))
    }
    return render(request, template, context)


def save_edit_institution(request):
    nom = request.POST["nom"]
    code = request.POST["code"]
    try:
        file = request.FILES["file"]
    except:
        file = None

    insti_id = int(request.POST['insti_id'])
    institution = Institution.objects.get(id=insti_id)
    institution.sigle = code
    institution.nom = nom
    if file != None:
        institution.img = file
    institution.save()
    return redirect('/')

#
# def save_institution(request):
#     url=request.POST['url']
#     nom = request.POST["nom"]
#     response = redirect("/")
#     try:
#         code = request.POST["code"]
#     except:
#         code = nom
#     try:
#         image = request.FILES["file"]
#     except:
#         image = OperaFile.objects.filter(m_name="IDF").first().m_file  # Instituti Defaut FIle
#     try:
#         desc = request.POST['desc']
#     except:
#         desc = " "
#     try:
#         app_code = request.POST['app_code']
#     except:
#         app_code = "#"
#     # Informations Savers
#
#     owner = Owner.objects.filter(m_code=app_code).first()
#     if owner == None:
#         response = specific_log(request, 2)
#     else:
#         nb_institutions = owner.nb_institutions()
#         if (owner.m_bought == False and nb_institutions == 0) or (
#                 owner.m_bought == True and nb_institutions <= owner.m_type):
#             institution = Institution(sigle=code, nom=nom, img=image,url=url)
#             institution.owner = owner
#             institution.save()
#             owner.m_user.personnel.actual_institution = institution
#             owner.m_user.personnel.save()
#             try:
#                 check_mail = request.POST['check_mail']
#             except:
#                 check_mail = False
#             if check_mail == True:
#                 owner.m_mail_notified = True
#                 owner.save()
#             # owner.save()
#             if request.user.is_authenticated == False:
#                 user = owner.m_user
#                 login(request, user)
#
#             # tache hierachy modifier
#             entity = EntityType(m_nom="Projet")
#             entity.m_fields = "Nom du Projet|Objectif du Projet|"
#             entity.m_type_fields = "text|text|"
#             entity.m_fields_rapported = "Commentaires|"
#             entity.m_type_fields_rapp = "text|"
#             entity.save()
#             type_entity = InsitutionEntities(m_hierachie=0)
#             type_entity.m_entity_type = entity
#             type_entity.m_institution = institution
#             type_entity.save()
#
#             # Tache Launcher
#             entity = EntityType(m_nom="Tache")
#             entity.is_tache = True
#             entity.m_fields = "Nom de la Tache|Objectif de la Tache|"
#             entity.m_type_fields = "text|text|"
#             entity.m_fields_rapported = "Commentaires|"
#             entity.m_type_fields_rapp = "text|"
#             entity.save()
#             type_entity = InsitutionEntities(m_hierachie=1)
#             type_entity.m_entity_type = entity
#             type_entity.m_institution = institution
#             type_entity.save()
#
#
#             personnel = Personnel.objects.get(bd_user__id=request.user.id)
#             role = Role(nom="Administrateur " + str(institution), description="Supervise la Plateforme",
#                         actual_institution=institution, permissions=100)
#             role.save()
#             function = Personnel_Function(m_institution=institution, m_personnel=personnel, m_role=role)
#             function.save()
#             role = Role(
#                 nom="" + str(
#                     institution),
#                 description="",
#                 actual_institution=institution, permissions=0)
#             role.save()
#
#             # Initialisation des Structures
#             structure = Structure(nom=institution.sigle, designation=institution.nom)
#             structure.institution = institution
#             structure.save()
#             pers_struc = Personnel_Structure(m_personnel=personnel, m_structure=structure)
#             pers_struc.save()
#
#             # Initialisation des Periodes
#             configurations_periodes = Periode.objects.filter(m_initial=True)
#             for p in configurations_periodes:
#                 per = Institution_Periodes(m_periode=p, m_institution=institution, m_default=True)
#                 per.save()
#             institution.default_period = configurations_periodes.last()
#             institution.default_subperiod = institution.default_period.sub_periods().first()
#             institution.save()
#         else:
#             request.session['too_much_ins'] = 1
#             response = redirect('/log_account/')
#     return response


def set_default_period(request, period=0, sub_period="#"):
    # r_institution = request.COOKIES['institution']
    r_institution = request.user.personnel.actual_institution
    if int(period) != 0:
        r_periode = Periode.objects.get(id=int(period))
        r_institution.default_period = r_periode
        r_institution.default_subperiod = r_periode.sub_periods().last()
    if sub_period != "#":
        r_sub_period = SubPeriode.objects.get(id=int(sub_period))
        r_institution.default_subperiod = r_sub_period
    r_institution.save()
    return redirect('/configurations/')


def authorized_institutions(request):
    if request.user.is_staff:
        institutions = Institution.objects.filter()
    else:
        institutions = [request.user.personnel.get_institution]
    return institutions


def basis(request):
    permissions = list()
    actual_institution = None
    animate = None
    animate2 = None
    context = dict()
    user = request.user
    try:
        if request.session['logged'] == 1:
            request.session['logged'] = 0
            animate = 0
    except:
        pass
    try:
        if request.session['new_rapport'] == 1:
            request.session['new_rapport'] = 0
            animate2 = 0
        elif request.session['new_rapport'] == 2:
            request.session['new_rapport'] = 0
            animate2 = 1
    except:
        pass

    if request != None and user.is_authenticated:
        actual_institution = user.personnel.actual_institution
        bool(actual_institution)

        programmes = list()  # request.user.personnel.get_programmes()
        nb_programmes = 0

        personnel = request.user.personnel
        bool(personnel)

        prenom = personnel.prenom
        nom = personnel.nom
        role = personnel.get_function(actual_institution.id)
        picture = personnel.photo
        functi = role
        entity_manage = None
        if actual_institution.owner != None and actual_institution.owner.m_user == request.user:
            permissions = 100
        elif functi == None:
            permissions = 10
        else:
            permissions = functi.m_role.permissions
            if functi.m_role.m_nature == "1":
                # enti = funxti
                eRACI = personnel.RACI_manage()
                if eRACI != None:
                    if eRACI[0] != None:
                        entity_manage = eRACI[0]
            elif permissions < 0:
                entity_manage = functi.m_entity
        context = {
            'actual_institution': actual_institution,
            'animate': animate,
            'animate2': animate2,
            'prenom': prenom,
            'role': role,
            'nom': nom,
            'picture': picture,
            'permissions': permissions,
            'programmes': programmes,
            'nb_programmes': nb_programmes,
            'entity_manage': entity_manage
        }
        if entity_manage != None:
            context["my_entities"] = personnel.RACI_list()
            context["no_simple_user"] = context["my_entities"] != []
            context["type_ents"] = entity_manage.m_type_entity
            context["hierachie_ent"] = entity_manage.m_type_entity.hierachie()

        context['default_struc_name'] = actual_institution.default_struc_name
        context['this_period'] = datetime.datetime.now()
        context['operations_name'] = actual_institution.operations_name
        context['insti_structures'] = actual_institution.structures()
        context['default_period'] = context['actual_institution'].default_period

        get_entities = actual_institution.get_entities()

        context['get_entities'] = get_entities
        context['get_entities2'] = list(get_entities)[:-1]

        top_entity = context['actual_institution'].top_entity()
        bool(top_entity)
        context['top_entity'] = top_entity

        last_entity = context['actual_institution'].last_entity()
        bool(last_entity)
        context['last_entity'] = last_entity

        if actual_institution.finan_options != None:
            context["finances"] = actual_institution.finances()
            context["real_finances"] = 0
            context["finan_options"] = actual_institution.finan_options
            context["depenses_eff"] = actual_institution.depenses_eff

        tmp_week = int(max(1, context['this_period'].day / 7))
        if context['this_period'].day > context['this_period'].isoweekday() * tmp_week:
            tmp_week += 1
        context['this_week'] = tmp_week
        context['operations_modules'] = Aggregate.objects.filter(
            m_institution__id=context['actual_institution'].id).select_related('m_institution').first()


    else:
        actual_institution = None
        context["institution"] = None
    return context


def agenda(request):
    template = "webpages/ctn_bpf/agenda_week.html"
    context = basis(request)
    return render(request, template, context)


def log_account(request):
    template = "webpages/ctn_bpf/login.html"
    context = dict()
    try:
        if request.session['too_much_ins'] == 1:
            context['too_much_ins'] = True
            request.session['too_much_ins'] = None
    except:
        pass
    try:
        if request.session['new_user'] == 1:
            # request.session['new_user'] = 0
            animate = 1
            context['new_user'] = animate
            request.session['new_user'] = 0
    except:
        pass
    try:
        context['bad_log'] = (request.session['bad_log'] != None and request.session['try_log'] != None)
        request.session['try_log'] = None
    except:
        pass
    return render(request, template, context)


# @cache_page(60 * 15)
def index_log(request, nature):
    if True:
        context = basis(request)
        operation_m = Operation.objects.all()
        context['operation_m'] = operation_m
        operation_details = OperationDetails.objects.all()
        context['operation_details'] = operation_details
        context['menu'] = 'i'
        elements = list()
        top_entity = context['top_entity']

        tops = top_entity.lines()
        bool(tops)

        context['lvl'] = nature

        if nature == -1 and context['permissions'] >= 0:
            nature = 0

        if context['permissions'] == 0:
            nature = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
                'm_institution').last().m_hierachie
            bool(nature)

        context['nature'] = nature
        context['next_nature'] = nature + 1
        # If any Tops have been created, redirection

        if tops.first() == None:
            template = "webpages/ctn_bpf/index_empty.html"
            context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                'actual_institution']).select_related('m_institution').first().m_entity_type
            tmp_lines = list()
        else:
            if context["entity_manage"] != None:
                hierachy = context["entity_manage"].m_type_entity.hierachie()
                hierachi_id = context["entity_manage"].id
                return redirect("gestionnaire/" + str(hierachy) + "/" + str(hierachi_id) + "/")
            else:
                template = "webpages/ctn_bpf/operations_home.html"
            nb_elements = 0
            for t in tops:
                elements.append({'entity': t, 'values': t.levels(nature, context['actual_institution'])})

            context['elements'] = elements
            context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                'actual_institution']).select_related('m_institution').first()
            if context['type_entity'] != None:
                context["type_entity"] = context["type_entity"].m_entity_type
                tmp_lines = context['type_entity'].lines()
            else:
                tmp_lines = list()
        # Moyenne de Progression
        nb_elt = 0
        progress = 0
        """
		for elt in tmp_lines:
			progress += elt.progression()
			nb_elt += 1
		if nb_elt > 0:
			progress /= nb_elt
		"""

        progress = context['actual_institution'].progression()
        context['actual_progression'] = round(progress, 2)
        paginator_o = Paginator(elements, 6)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range

    return render(request, template, context)


def index(request, nature=-1):
    if request.user.is_authenticated:

        return index_log(request, nature)
    else:
        context = dict()
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None

        template = "webpages/ctn_bpf/presentation.html"
        # context['temoignages'] = Temoignage.objects.filter()[:3]
        context['institution_count'] = Institution.objects.count()
        context['projet_count'] = 0
        tmp1 = InsitutionEntities.objects.filter(m_hierachie=1)
        for t in tmp1:
            context['projet_count'] += t.m_entity_type.lines().count()
        context['operations_count'] = Operation.objects.count()
        context['personnel_count'] = Personnel.objects.count()
    try:
        if request.session['too_much_ins'] == 1:
            context['too_much_ins'] = True
        # request.session['too_much_ins'] = None
    except:
        pass
    try:
        if request.session['assistance'] == 1:
            context['assist_send'] = True
            request.session['assistance'] = None
    except:
        pass
    return render(request, template, context)


def bad_auth(request):
    template = "webpages/ctn_bpf/bad_auth.html"
    context = {
        'error': "Erreur au niveau de l'Adresse/Mot de Passe"
    }
    return render(request, template, context)


def main(request, menu_main=0):
    template = "webpages/ctn_bpf/main.html"
    if menu_main == 1:
        template = "webpages/ctn_bpf/presentation_framework.html"
    elif menu_main == 2:
        template = "webpages/ctn_bpf/presentation_documentation.html"
    docus = OperaFile.objects.filter(m_category="DOC")
    apps = OperaApp.objects.filter()
    context = {
        "docus": docus,
        "apps": apps
    }
    return render(request, template, context)


def gestionnaire_search(request):
    generator = request.POST['generator']
    name = request.POST['search']
    if generator == '0':
        hierachy = int(request.POST['hierachy'])
        gest = int(request.POST['gest'])
        response = gestionnaire(request, hierachy, gest, name)
    elif generator == 'o':
        gest = int(request.POST['gest'])
        response = ges_taches(request, gest, None, name)
    elif generator == 's':
        response = structures(request, name)
    elif generator == 'r':
        response = roles(request)
    elif generator == 'p':
        response = personnels(request, name)
    elif generator == 'i2':
        hierachy = int(request.POST['hierachy'])
        gest = int(request.POST['gest'])
        response = evaluer(request, hierachy, gest, name)
    elif generator == "ex":
        response = extra(request, name)
    elif generator == "dSV":
        pass
    return response


# @cache_page(60 * 15)
# @login_required(login_url='/log_account')
# def gestionnaire(request, gest_val, gest_id=0, name=None, structure=None, periode=None, enums="#"):
#     tmp_gest_val = gest_val
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     bool(actual_institution)

#     context['base_img_val'] = context['actual_institution'].img.url

#     if int(gest_val) == -1:
#         gest_val = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
#             'm_institution').last().m_hierachie
#         bool(gest_val)
#         tmp_gest_val = gest_val
#     try:
#         entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,
#                                                    m_institution=actual_institution).select_related(
#             'm_institution').first().m_entity_type
#     except:
#         entity = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
#             'm_institution').last().m_entity_type

#     is_tache = False
#     context['is_sub_tache'] = False
#     context['detail_g_v'] = False
#     context['sup_hierachy'] = list()
#     if gest_id != 0:
#         # gest_val = str(int(gest_val) + 1)
#         # entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,m_institution=context['actual_institution']).first().m_entity_type
#         sup_entity = Entity.objects.filter(id=gest_id).first()
#         if sup_entity != None:
#             lines = sup_entity.sub_entities()
#         else:
#             lines = list()
#         tmp_gest_val = str(int(gest_val) + 1)
#         sub_type = InsitutionEntities.objects.filter(m_hierachie=tmp_gest_val,
#                                                      m_institution=context['actual_institution']).select_related(
#             'm_institution').first()

#         if context["permissions"] <= 0 and sup_entity in context["my_entities"]:
#             context["autoE"] = 1
#         elif context["permissions"] <= 0:
#             for t in sup_entity.sup_hierachie():
#                 if t in context["my_entities"]:
#                     context["autoE"] = 1
#                     break
#         if sub_type != None:  # Ce n'est pas une tache
#             sub_type = sub_type.m_entity_type
#             fields = sub_type.fields()
#             context['is_sub_tache'] = sub_type.is_tache
#             context['sub_entity'] = sub_type
#             context['base_val'] = sup_entity
#             context['sub_entities'] = sup_entity.sub_entities()
#             context['gest_id'] = gest_id
#             context['objects_field'] = sub_type.objects_field()
#             context['calculates_field'] = sub_type.calculates_field()
#             if sup_entity != None:
#                 if sup_entity.m_type_entity.is_pic_represented == True and sup_entity.m_pic_represented != None:
#                     try:
#                         context['base_img_val'] = sup_entity.m_pic_represented.url
#                     except:
#                         pass
#             actu_entity = sub_type
#         else:
#             is_tache = True
#             fields = list()
#             actu_entity = entity
#         context['detail_g_v'] = True
#     else:
#         actu_entity = entity
#         enmPT = actu_entity.enum_fields()['result']
#         """
# 		test_PT = dict()
# 		for e in enmPT:
# 			test_PT[e['name']] = e['lines']
# 		"""
#         lines = entity.lines()
#         is_tache = entity.is_tache
#         fields = entity.fields()
#         context['objects_field'] = entity.objects_field()
#         context['calculates_field'] = entity.calculates_field()

#     if name != None:
#         tmp = list()
#         for l in lines:
#             if name in l.get_name():
#                 tmp.append(l)
#         lines = tmp

#     if structure != None:
#         tmp = list()
#         for l in lines:
#             if l.structure == structure:
#                 tmp.append(l)
#         lines = tmp

#     if periode != None:
#         tmp = list()
#         for l in lines:
#             if periode in l.plannification():
#                 tmp.append(l)
#         lines = tmp

#     context['is_tache'] = is_tache
#     context['hierachy'] = int(tmp_gest_val)
#     context['next_hierachy'] = int(tmp_gest_val) + 1
#     context['gest_val'] = int(gest_val)
#     context['entity'] = entity
#     context['actu_entity'] = actu_entity
#     context['sup_zone'] = entity.sup_entity(actual_institution.id)
#     context['fields'] = fields
#     # context['lines'] = lines
#     context['menu'] = 'g'
#     paginator_o = Paginator(list(lines), 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range

#     if int(tmp_gest_val) > 0 and gest_id != 0:
#         context['sup_hierachy'] = sup_entity.sup_hierachie()

#     if (int(tmp_gest_val) - 1 > 0) and InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
#                                                                          m_institution=context[
#                                                                              'actual_institution']).select_related(
#             'm_institution').first() == None:
#         context['none_search'] = True
#     else:
#         context['first_sup_search'] = True

#     if tmp_gest_val == '0' and entity.m_enum_values in ["", None]:
#         context['none_search'] = True
#     context['searches'] = list(InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
#                                                                  m_institution=context[
#                                                                      'actual_institution']).select_related(
#         'm_institution'))
#     """
# 	if is_tache or context['is_sub_tache']:
# 		context['searches'].append({'label':'Structure','code':'s','values':context['structures']})
# 	"""
#     try:
#         if context['base_val'] != None:
#             taches = list()  # context['base_val'].taches()
#             struc = set()
#             for t in taches:
#                 struc.add(t.structure)

#             context['structures_not_null'] = struc
#     except:
#         pass
#     try:

#         if context["entity_manage"] != None:
#             context["not_add"] = 1
#             entityd = Entity.objects.get(id=context['base_val'].id)
#             if entityd in context["my_entities"]:

#                 if context["role"].m_role.permissions >= 0:
#                     context["permissions"] = 0
#                 if context["permissions"] >= 0:
#                     request.session["permissions_valider"] = True
#             else:
#                 if request.session["permissions_valider"] == True:
#                     pass  # context["permissions"] = -100
#     except:
#         pass
#     if context['permissions'] < 0:
#         template = "webpages/ctn_bpf/entities_simple_user.html"
#         try:
#             if context['base_val'].id == context['entity_manage'].id:
#                 context["auto_simple"] = 1
#         except:
#             pass
#     else:
#         if is_tache or context['is_sub_tache'] == True:
#             template = "webpages/ctn_bpf/taches.html"
#             context['structures'] = Structure.objects.filter(institution=context['actual_institution']).select_related(
#                 'institution')
#         else:
#             template = "webpages/ctn_bpf/entities.html"

#     if enums != "#":
#         context['da_enums'] = enums
#     if is_tache and gest_id != 0:
#         response = redirect('/taches/' + str(gest_id) + '/')
#     else:
#         response = render(request, template, context)
#     return response


@login_required(login_url='/log_account')
def messengers(request):
    context = basis(request)
    template = "webpages/ctn_bpf/messengers.html"
    return render(request, template, context)


# @cache_page(60 * 15)
def ges_taches(request, tache_id, arg_period=None, search=None):
    context = basis(request)
    base_val = Tache.objects.get(id=int(tache_id))
    lines = Operation.objects.filter(tache=base_val).select_related('tache')
    lines_tache = lines
    context['sup_hierachy'] = base_val.sup_hierachie()

    if search != None:
        tmp = lines
        lines = list()
        for l in tmp:
            if search in str(l):
                lines.append(l)
    context['arg_period'] = arg_period
    if arg_period != None:
        periodes = base_val.plan_months()
        prd = periodes[(arg_period - 1)]
        context['periodes'] = prd
        lines = lines.filter(m_tache_plannification=prd)
        context['test'] = list()
        actual_institution = context['actual_institution']
        week = list()
        for t in actual_institution.default_subperiod.decoup_desc_slip2():
            week.append({'per': t, 'val': list()})
        for l in lines:
            ps = l.periodes()
            t_ps = ps.desc_split()
            i_p = 0
            for t in t_ps:
                if int(t) == 0:
                    week[i_p]['val'].append(l)
                    break
                i_p += 1
        context['test'] = week

    context['none_search'] = True
    context['entity'] = base_val.m_type_entity
    context['base_val'] = base_val
    context['sub_entity'] = context['actual_institution'].operations_name
    tmp_perso = Personnel.objects.filter()
    context['personnels'] = set()
    for t in tmp_perso:
        if context['actual_institution'] in t.all_institutions():
            context['personnels'].add(t)
    context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
        'actual_institution')
    plan = base_val.plannification()
    if plan != None:
        context['searches'] = [{'label': '', 'values': base_val.plannification().table(), 'not_filter': True}]
    else:
        context['searches'] = [{'label': '', 'values': ["Aucune Valeur"], 'not_filter': True}]
    context['g_v'] = 'o'
    context['menu'] = 'go'
    base_valE = Entity.objects.get(id=base_val.id)

    if context["permissions"] <= 0 and base_valE in context["my_entities"]:
        context["autoE"] = 1
    elif context["permissions"] <= 0:
        for t in base_val.sup_hierachie():
            if t in context["my_entities"]:
                context["autoE"] = 1
                break

    if context['permissions'] < 0:
        template = "webpages/ctn_bpf/operations_simple_user.html"
        if context['base_val'].id == context['entity_manage'].id:
            context["auto_simple"] = 1
            lines = lines_tache
    else:
        if arg_period is None:
            template = "webpages/ctn_bpf/operations.html"
        else:
            template = "webpages/ctn_bpf/operations_periodes.html"

    paginator_o = Paginator(lines, 12)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    context['lines'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    # context['roles_RACI'] =
    try:
        if request.session["permissions_valider"] == True:
            context["permissions"] = 0
            context["not_add"] = 1
    except:
        pass
    return render(request, template, context)


def structure_hie(request):
    return structures(request, None, 1)

#
# def structures(request, name=None, hierachie=None):
#     template = "webpages/ctn_bpf/structure.html"
#     context = basis(request)
#     context['entity'] = str(context['actual_institution'].default_struc_name)
#     context['lines'] = Structure.objects.filter(institution=context['actual_institution']).select_related('institution')
#     if name != None:
#         context['lines'] = context['lines'].filter(nom__contains=name)
#     context['fields'] = ['Logo', 'Nom',
#                          '',
#                          'Responsable', 'Total : ' + str(context['actual_institution'].last_entity())]
#     context['menu'] = 's'
#     context['personnels'] = Personnel.objects.filter(actual_institution=context['actual_institution']).select_related(
#         'actual_institution')
#     context['g_v'] = 's'
#     context['none_search'] = True
#     if hierachie != None:
#         stH = context["actual_institution"].Structure_Hierachy()
#         vals = ""
#         for s2 in stH:
#             s3 = s2.m_levels_fields.split("|")[:-1]
#             for s in s3:
#                 vals += str(request.POST[s]) + "|"
#         tmp = vals.split("#")
#         re = ""
#         for tm in tmp:
#             re += tm.split("|")[0] + "|"
#         vals = re
#         context['vals'] = vals
#         context['lines'] = context['lines'].filter(values_hierachy__contains=vals)
#         context["stH"] = stH[0].m_levels_fields
#     return render(request, template, context)


def structure_details(request, structure_id=0):
    template = "webpages/ctn_bpf/structure_details.html"
    context = basis(request)
    structure = Structure.objects.get(id=int(structure_id))
    entity = context['actual_institution'].last_entity()
    lines = Tache.objects.filter(structure=structure).select_related('structure')

    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    fields = entity.fields()

    context['structure'] = structure
    context['base_val'] = structure
    # context['gest_id']=gest_id
    context['entity'] = entity
    context['sub_entity'] = entity
    context['objects_field'] = entity.objects_field()
    context['fields'] = fields
    context['is_tache'] = True
    return render(request, template, context)


def users_simples(request, search=None):
    template = "webpages/ctn_bpf/roles.html"
    fields_personnel = ['', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', '']
    fields_roles = ['Role', 'Description', 'Entite']
    personnel = Personnel.objects.filter()
    context = basis(request)
    roles = Role.objects.filter(actual_institution=context['actual_institution'], is_simple_user=1).select_related(
        'actual_institution')

    if search != None:
        roles = roles.filter(nom__contains=search)
    context['entity'] = 'Utilisateur Simple'
    context['fields1'] = fields_personnel
    context['personnel'] = personnel
    context['fields'] = fields_roles
    context['lines'] = roles
    context['g_v'] = 'r'
    context['g_vs'] = 'u2'
    return render(request, template, context)


def personnels(request, name=None, lis_peros=None):
    template = "webpages/ctn_bpf/roles.html"
    context = basis(request)
    context['entity'] = 'Personnel'
    context['fields'] = ['Photos', 'Nom', 'Prenom', 'Telephone', 'Email', 'Fonction', 'Structures','sexe']
    context['lines'] = list()
    lines2 = set()
    tmp_perso = Personnel.objects.filter()
    if lis_peros == None:
        for t in tmp_perso:
            if context['actual_institution'] in t.all_institutions():
                atmp = {
                    'id': t.id,
                    'photo': t.photo,
                    'prenom': t.prenom,
                    'nom': t.nom,
                    'tel': t.tel,
                    'mail': t.mail,
                    'sexe': t.sexe,
                    'get_function': t.get_function(context['actual_institution'].id),
                    'get_structure': t.get_structure(context['actual_institution'].id)
                }
                context['lines'].append(atmp)
                lines2.add(t)
    else:
        context['lines'] = lis_peros
    # context['lines'] = Personnel.objects.filter(actual_institution=context['actual_institution'])
    if name != None:
        name = name.lower()
        tmps = context['lines']
        context['lines'] = list()
        for tt in tmps:
            ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
            for t in ta:
                if name in str(t):
                    context['lines'].append(tt)
                    break
    paginator_o = Paginator(context['lines'], 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)

    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    context['menu'] = 'g'
    context['g_v'] = 'p2'
    context['g_vs'] = 'p2'
    context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
        'actual_institution')
    context['searches'] = []
    context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
        actual_institution=context['actual_institution']).select_related('actual_institution')})
    context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
        institution=context['actual_institution']).select_related('institution')})
    context['functions'] = list()
    context['structures'] = list()
    for p in lines2:
        context['functions'].append(p.get_function(context['actual_institution'].id))
        context['structures'].append(p.get_structure(context['actual_institution']))
    try:
        if request.session['perso_saved'] > 0:
            context['perso_saved'] = True
            tmp_user = Personnel.objects.get(id=request.session['perso_saved'])
            context['perso_get'] = tmp_user
            request.session['perso_saved'] = None
    except:
        pass
    return render(request, template, context)


# def personnel_id(request, perso_id):
#     context = basis(request)
#     template = "webpages/ctn_bpf/profile.html"
#     personnel = Personnel.objects.get(id=perso_id)
#     context["personnel"] = personnel
#     context["prenom"] = personnel.prenom
#     context["nom"] = personnel.nom
#     context["role"] = personnel.get_function(context["actual_institution"].id)
#     return render(request, template, context)


"""
def roles(request):
	template = "webpages/ctn_bpf/personnel_roles.html"
	context = basis(request)
	context['lines'] = Role.objects.filter(institution=context['actual_institution'])
	context['menu'] = 'g'
	return render(request,template,context)
"""


def filter_perso(request, structure_id=0, role_id=0):
    if structure_id == 0:
        structure = request.POST["Structure"]
        tds = structure
        if str(structure) != '0':
            structure = Structure.objects.get(id=int(structure))
    else:
        structure = Structure.objects.get(id=structure_id)

    if role_id == 0:
        role = int(request.POST["Fonction"])
        if str(role) != '0':
            role = Role.objects.get(id=role)
    else:
        role = Role.objects.get(id=role_id)
    personnel = Personnel.objects.filter()
    context = basis(request)
    result = list()
    if structure != '0':
        for p in personnel:
            if p.get_structure() != None and p.get_structure().m_structure == structure:
                result.append(p)
    if role != '0':

        if structure == '0':
            tmp = personnel
        else:
            tmp = result
        result = list()
        for p in tmp:

            if p.get_function() != None and p.get_function().m_role == role:
                result.append(p)
    return personnels(request, None, result)


def gestionnaire_id(request, gest_val, gest_id):
    pass


# def log(request, out=False):
#     if out == False:
#         response = "/log_account/"
#         result = False
#         try:
#             request.session['bad_log'] += 1
#             if request.session['bad_log'] > 0:
#                 response = "/bad_auth/"
#         except:
#             request.session['bad_log'] = 1
#             request.session['try_log'] = True
#         r_email = request.POST['email']
#         r_password = request.POST['password']
#         users = User.objects.filter(email=r_email)
#         r_username = User.objects.filter(email=r_email).last()
#         if r_username != None:
#             r_username = r_username.username
#             user = authenticate(username=r_username, password=r_password)
#             if user:
#                 login(request, user)
#                 result = True
#                 response = "/"
#             else:
#                 if users.count() > 2:
#                     for u in users:
#                         r_username = u.username
#                         u_tmp = authenticate(username=r_username, password=r_password)
#                         if u_tmp:
#                             login(request, u_tmp)
#                             result = True
#                             response = "/"
#             request.session['logged'] = 1
#             request.session['bad_log'] = None
#     else:
#         logout(request)
#         response = "/"
#     return redirect(response)


def specific_log(request, type_view=0):
    template = "webpages/ctn_bpf/specific_log.html"
    context = {

    }
    if type_view == 2:
        context['specific'] = 0  # Not Code
    return render(request, template, context)


def save_entity(request):
    try:
        institution = Institution.objects.get(id=int(request.POST['institution']))
    except:
        institution = basis(request)['actual_institution']
    try:
        operation_aggregate = request.POST['ope_aggregate']
    except:
        entity_nom = request.POST['entity_nom']
        entity_hierachy = request.POST['entity_hierachy']
        fields_name = request.POST['fields_name']
        fields_type = request.POST['fields_type']
        rapp_fields_name = request.POST['fields_name2']
        rapp_fields_type = request.POST['fields_type2']
        if request.POST['entity_image'] == '0':
            entity_image = False
        else:
            entity_image = True
        edit_or_create = request.POST['edit_or_create']
        operation_aggregate = None
        enum_fields = request.POST['enum_fields']
    if operation_aggregate is None:
        if edit_or_create == 'e':
            edit_id = request.POST['edit_id']
            institutionEntity = InsitutionEntities.objects.get(id=int(edit_id))
            entity = institutionEntity.m_entity_type
            actual_fields = entity.fields()
            actual_values = entity.lines()
            for l in actual_values:
                value = l.m_value_fields
                tmp = ""
                for f in fields_name.split("|")[:-1]:
                    if f not in actual_fields:
                        tmp += " |"
                    else:
                        tmp += str(l.get_value(f)) + "|"
                l.m_value_fields = tmp
                l.save()
        else:
            entity = EntityType(m_nom=entity_nom)
        entity.is_pic_represented = entity_image
        entity.m_nom = entity_nom
        entity.m_fields = fields_name
        entity.m_type_fields = fields_type
        entity.m_fields_rapported = rapp_fields_name
        entity.m_type_fields_rapp = rapp_fields_type
        entity.m_enum_values = enum_fields
        entity.indicateur_fields = request.POST['indicateurs_field']
        entity.save()
        # tache hierachy modifier
        hierachie = int(entity_hierachy) + 1

        # Decalage des Relations
        if edit_or_create != 'e':

            to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
            for d in to_decaler:
                d.m_hierachie += 1
                d.save()
            institutionEntity = InsitutionEntities(m_hierachie=hierachie, m_entity_type=entity,
                                                   m_institution=institution)
            if to_decaler.first() == None:
                institutionEntity.m_entity_type.is_tache = True
                institutionEntity.m_entity_type.save()
        else:
            institutionEntity.m_hierachie = hierachie
        institutionEntity.save()
    else:
        edit_or_create = request.POST['edit_or_create_O']
        aggregate_name = request.POST['aggregate_name']
        aggregate_fields_name = request.POST['aggregate_fields_name']
        aggregate_fields_type = request.POST['aggregate_fields_type']
        aggregate_rap_fields_name = request.POST['aggregate_rap_fields_name']
        aggregate_rap_fields_type = request.POST['aggregate_rap_fields_type']

        # Aggregates launching
        aggregates = institution.operations_modules()
        # Aggregates launching

        if aggregates == None:
            aggregates = Aggregate(m_institution=institution)

        aggregates.m_nom = aggregate_name
        aggregates.m_fields = aggregate_fields_name
        aggregates.m_type_fields = aggregate_fields_type
        aggregates.m_fields_rapported = aggregate_rap_fields_name
        aggregates.m_type_fields_rapp = aggregate_rap_fields_type
        aggregates.save()
    return redirect('/configurations/')


# def save_entity_value(request):
#     institution = int(request.POST['institution'])
#     hierachie = int(request.POST['hierachie'])
#     if hierachie != -1:
#         type_entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution__id=institution).first()
#     else:
#         type_entity = InsitutionEntities.objects.filter(m_institution__id=institution).last()
#     type_entity = type_entity.m_entity_type
#     fields_value = request.POST['fields']
#     edit_or_create = request.POST['edit_or_create']

#     is_tache = request.POST['is_tache']
#     if is_tache == 'True':
#         if edit_or_create == 'e':
#             edit_id = request.POST['edit_id']
#             entity = Tache.objects.get(id=int(edit_id))
#             entity.m_value_fields = fields_value
#             entity.m_type_entity = type_entity
#         else:
#             entity = Tache(m_value_fields=fields_value, m_type_entity=type_entity)
#         structures_list = request.POST['structures_list']  # getFieldValues()
#         structures_roles = request.POST['structures_roles']
#         try:
#             entity.montant = float(request.POST["finances"])
#         except:
#             pass
#         entity.save()
#         r_struc = list()
#         tmp_struc = list()
#         r_roles = structures_roles
#         r_roles = r_roles.split('\n')
#         i = 0

#         for s in structures_list.split('|')[:-1]:
#             if s not in tmp_struc:
#                 tmp_struc.append(s)
#         for s in tmp_struc:
#             r_struc.append(Structure.objects.get(id=int(s)))
#         r_struc.sort(key=lambda x: x.nom)
#         try:
#             if edit_or_create == 'e':
#                 for s in entity.structures.filter():
#                     s.delete()
#             for s in r_struc:
#                 if s == 0:
#                     pass
#                 else:
#                     r_str = StructureRole(m_structure=s, m_role=r_roles[i])
#                     r_str.save()
#                     entity.structures.add(r_str)
#                     i += 1
#             entity.structure = entity.structures.first().m_structure  # next(iter(r_struc)).m_structure
#         except:
#             pass

#         entity.save()
#         calendar = request.POST['calendar_selected']
#         periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
#         if edit_or_create == 'e' and calendar != "#":
#             plani_tche = TachePlannify.objects.filter(m_tache=entity)
#             for p in plani_tche:
#                 p.delete()
#         if calendar != "#":
#             plani_tche = TachePlannify(m_tache=entity, m_planify=calendar, m_periode=periode)
#             plani_tche.save()
#             set_pv_tp(plani_tche)
#     else:
#         if edit_or_create == 'e':
#             edit_id = request.POST['edit_id']
#             entity = Entity.objects.get(id=int(edit_id))
#             entity.m_value_fields = fields_value
#             entity.m_type_entity = type_entity
#         else:
#             entity = Entity(m_value_fields=fields_value, m_type_entity=type_entity)
#         entity.save()
#     try:
#         sup_entity = request.POST['sup_entity']
#     except:
#         sup_entity = None
#     # relations_entities
#     if sup_entity != None:
#         sup_entity = Entity.objects.get(id=int(sup_entity))

#         if edit_or_create == 'e':
#             delete_hierachie = EntityHierachie.objects.filter(m_sub_entity=entity).first()
#             if delete_hierachie != None:
#                 delete_hierachie.delete()
#         entity_hierachie = EntityHierachie(m_sub_entity=entity, m_sup_entity=sup_entity)
#         entity_hierachie.save()

#     # Image de Couverture
#     try:
#         entity.m_pic_represented = request.FILES["cover_img"]
#         entity.save()
#     except:
#         pass

#     i_f = 0
#     fields_name = entity.m_type_entity.fields()
#     for f in entity.m_type_entity.type_fields():
#         if f in ['file', 'image']:
#             try:
#                 eF = EntityFile(m_entity=entity, m_field=f, m_file=request.FILES[fields_name[i_f]])
#                 eF.save()
#                 entity.set_value(fields_name[i_f], str(eF.id))
#             except:
#                 entity.set_value(fields_name[i_f], str("Aucun Fichier"))
#             entity.save()
#         i_f += 1
#     base_val = request.POST["base_val"]

#     # Enumerations Values
#     split_extras1(entity)  # Clean the Error Files

#     if base_val not in ['', ' ', '0', None]:
#         response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
#     else:
#         response = "/gestionnaire/" + str(hierachie) + "/"
#     response = redirect(response)
#     return response


# def save_gestion(request):
#     context = basis(request)
#     generator = request.POST['generator']
#     edit_or_create = request.POST['edit_or_create']
#     try:
#         r_redirect = request.POST['redirect']
#     except:
#         pass
#     if generator == 'i':
#         r_sigle = request.POST['sigle']
#         r_nom = request.POST['nom']
#         r_image = request.FILES['image']
#         institution = Institution(sigle=r_sigle, nom=r_nom, img=r_image)
#         institution.save()
#         response = "/gestionnaire/i/"
#     elif generator == 'eD':
#         r_nom = request.POST['nom']
#         # r_fields_type = request.POST['fields_type']
#         # r_fields = request.POST['fields']
#         r_domain_type = request.POST['domain_type']
#         r_value_type = request.POST['value_type']
#         r_aggregation_type = request.POST['aggregation_type']
#         r_description = request.POST['description']
#         try:
#             r_null_conserv = request.POST['null_conserv']
#         except:
#             r_null_conserv = 0
#         try:
#             r_fill_valid = request.POST['fill_valid']
#         except:
#             r_fill_valid = 0
#         try:
#             r_logo = request.FILES['logo']
#         except:
#             r_logo = None
#         r_default_value = request.POST["default_value"]

#         dE = DataElement(m_name=r_nom)
#         if r_logo != None:
#             m_logo = r_logo
#         dE.m_domain_type = r_domain_type
#         dE.m_value_type = r_value_type
#         dE.m_aggregation_type = r_aggregation_type
#         dE.m_description = r_description

#         try:
#             if int(r_null_conserv) == 1:
#                 dE.is_zero_collect = True
#         except:
#             dE.is_zero_collect = False
#         try:
#             if int(r_fill_valid) == 1:
#                 if request.POST['default_value'] == None:
#                     tmp = 0
#                 else:
#                     tmp = request.POST['default_value']
#                 dE.m_default_value = int(tmp)
#         except:
#             dE.m_default_value = None
#         actual_institution = context['actual_institution']
#         dE.m_institution = actual_institution
#         dE.save()
#         response = "/dataelts/"
#     elif generator == 'a0':
#         r_user = User.objects.get(id=int(request.POST['user']))
#         r_message = request.POST['message']
#         a = Assistance(m_user=r_user, m_message=r_message)
#         a.save()
#         request.session['assistance'] = 1
#         response = "/assistance/"
#     elif generator == "str":
#         actual_institution = context['actual_institution']
#         r_value = request.POST['value']
#         actual_institution.default_struc_name = r_value
#         actual_institution.save()
#         response = "/structures/"
#     elif generator == "p2":
#         r_nom = request.POST['nom']
#         r_prenom = request.POST['prenom']
#         r_mail = request.POST['mail']
#         r_tel = request.POST['tel']
#         personnel_saved = Personnel.objects.filter(mail=r_mail).first()
#         try:
#             r_img = request.FILES['photo']
#         except:
#             if edit_or_create != 'e':
#                 r_img = OperaFile.objects.filter(m_name="USR").first().m_file
#             else:
#                 r_img = None
#         if personnel_saved == None:
#             tes_none = (User.objects.filter(email=r_mail).first())
#             if tes_none != None:
#                 try:
#                     personnel_saved = tes_none.personnel
#                 except:
#                     personnel_saved = Personnel(bd_user=tes_none, nom=r_nom, prenom=r_prenom, mail=r_mail, photo=r_img,
#                                                 actual_institution=context['actual_institution'],tel=r_tel)
#                     personnel_saved.save()

#         try:
#             r_structure = request.POST['Structure']
#         except:
#             r_structure = '0'
#         if r_structure != '0':
#             r_structure = Structure.objects.get(id=int(r_structure))
#         else:
#             r_structure = None
#         r_role = request.POST['Fonction']
#         r_role = Role.objects.get(id=int(r_role))
#         edit_or_create = request.POST['edit_or_create']
#         if edit_or_create != 'e':
#             if personnel_saved == None:
#                 
#                 password = ""
#                 for i in range(0, 8):
#                     password += str(random.randint(0, 9))
#                 usn = str(password) + str(User.objects.count() + 2)
#                 r_bd_user = User(username=usn, email=r_mail)
#                 subject = "Nouveau Compte Opera +"
#                 message_context = {
#                     'password': password,
#                     'name': r_nom + "" + r_prenom
#                 }
#                 message = render_to_string('webpages/ctn_bpf/mails/new_personnel.html', message_context)
#                 email = r_mail
#                 email_from = settings.EMAIL_HOST_USER
#                 recipient_list = [email, ]
#                 msg = EmailMessage(subject, message, email_from, recipient_list)
#                 msg.content_subtype = 'html'
#                 try:
#                     msg.send()
#                     r_bd_user.set_password(password)
#                 except:
#                     r_bd_user.set_password("user1234")
#                 # r_bd_user.set_password('User'+password)
#                 r_bd_user.save()
#                 personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, photo=r_img,
#                                       actual_institution=context['actual_institution'])
#                 personnel.bd_user = r_bd_user
#             else:
#                 personnel = personnel_saved
#         else:
#             edit_id = request.POST['edit_id']
#             if personnel_saved == None:
#                 personnel = Personnel.objects.get(id=int(edit_id))
#             else:
#                 personnel = personnel_saved
#             personnel.nom = r_nom
#             personnel.prenom = r_prenom
#             personnel.mail = r_mail
#             personnel.bd_user.email = r_mail
#             personnel.m_tel = r_tel
#             personnel.bd_user.save()
#             if r_img != None:
#                 personnel.photo = r_img
#         if personnel_saved == None:
#             personnel.save()
#         else:
#             request.session['perso_saved'] = personnel_saved.id
#         try:
#             simple_user = request.POST['simple_user']
#         except:
#             simple_user = '0'
#         if simple_user == '0':
#             ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
#             ps.save()
#             pf = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             if pf == None:
#                 pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
#                                         m_institution=context['actual_institution'])
#             else:
#                 pf.m_role = r_role
#             pf.save()
#         else:
#             entity = Entity.objects.get(id=int(simple_user))
#             pf = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             if pf == None:
#                 pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
#                                         m_institution=context['actual_institution'])
#             pf.m_entity = entity
#             pf.save()

#             ps = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
#             ps.save()
#         response = "/personnels/"
#     elif generator == "r":  # Role
#         r_nom = request.POST['nom']
#         r_description = request.POST['description']
#         r_permission = request.POST['permission']
#         r_institution = Institution.objects.get(id=int(request.POST['institution']))
#         r_ros_click = request.POST["ros_click"]

#         if int(r_ros_click) in [1, 2]:
#             r_permission = "-1"

#         if r_permission == '-1':
#             r_permission = 0
#         else:
#             permissions_hierachie = InsitutionEntities.objects.filter(m_institution=r_institution).last().m_hierachie
#             if (permissions_hierachie + 1) >= int(r_permission):
#                 r_permission = 0  # (permissions_hierachie+1) - int(r_permission)
#             else:
#                 r_permission = int(r_permission)
#         if edit_or_create == 'c':
#             role = Role(actual_institution=r_institution, nom=r_nom, description=r_description,
#                         permissions=r_permission)
#         else:
#             edit_id = request.POST['edit_id']
#             role = Role.objects.get(id=int(edit_id))
#             role.nom = r_nom
#             role.description = r_description
#             role.permissions = r_permission
#         if int(r_ros_click) == 1:
#             r_entity_administr = request.POST["permission_entity"]
#             eH = InsitutionEntities.objects.filter(id=int(r_entity_administr)).first().m_entity_type
#             role.m_simple_auth = eH
#             entities = list()
#             """
# 			for e in r_entity_administr.split("#")[:-1]:
# 				entities.append(Entity.objects.get(id=int(e)))
# 			"""
#             role.save()
#             # role.m_entities.set(entities)
#             role.m_nature = "1"
#         elif int(r_ros_click) == 2:
#             role.permissions = -100
#             user_simple_entity = request.POST['user_simple_entity']
#             role.is_simple_user = 1
#             role.m_simple_auth = EntityType.objects.get(id=int(user_simple_entity))
#         role.save()
#         response = "/roles/"
#     elif generator == "s":
#         try:
#             r_pic = request.FILES["logo"]
#         except:
#             r_pic = None
#         r_nom = request.POST['nom']
#         r_designation = request.POST['designation']
#         r_institution = request.POST['Institution']
#         r_institution = Institution.objects.filter(id=int(r_institution)).first()
#         try:
#             r_responsable = Personnel.objects.filter(id=int(request.POST['responsable'])).first()
#         except:
#             r_responsable = None
#         if edit_or_create == 'e':
#             edit_id = int(request.POST['edit_id'])
#             structure = Structure.objects.get(id=int(edit_id))
#             structure.photo = r_pic
#             structure.nom = r_nom
#             structure.designation = r_designation
#             structure.institution = r_institution
#         else:
#             structure = Structure(nom=r_nom, designation=r_designation,
#                                   institution=r_institution)  # ,responsable=r_responsable
#             if r_pic != None:
#                 structure.photo = r_pic
#         structure.save()

#         if r_responsable != None:
#             if edit_or_create == 'c':
#                 sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
#             else:
#                 edit_id = int(request.POST['edit_id'])
#                 structure = Structure.objects.get(id=int(edit_id))
#                 sR = StructureResponsable.objects.filter(m_structure=structure).first()
#                 if sR == None:
#                     sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
#                 else:
#                     sR.m_responsable = r_responsable
#             sR.save()
#         response = "/structures/"
#     elif generator == 'd_s_1':
#         if edit_or_create == "c":
#             dS = DataSet()
#             dS.save()
#             response = "/data_sets/design/" + str(dS.id) + "/"
#             form_part = False
#         else:
#             edit_id = request.POST["edit_id"]
#             dS = DataSet.objects.get(id=int(edit_id))

#             try:
#                 form_html = request.POST["form_design"]
#                 response = "/data_form/-1/0/"
#                 form_part = True
#                 for v in dS.m_dataelements.filter():
#                     form_html = form_html.replace("dE$" + str(v.id) + "$",
#                                                   "<div class='variableSelector'>  <div><input class='form-control' name='D0elt" + str(
#                                                       v.id) + "' type='text'></div> </div>")  # <div><label><small>"+str(v)+"</small></label></div>
#                 for v in dS.m_indicateurs.filter():
#                     form_html = form_html.replace("dI$" + str(v.id) + "$",
#                                                   "<div class='indicSelector' data-id='" + str(v.id) + "'> </div>")
#                 dS.m_formulaire = form_html
#             except:
#                 response = "/data_sets/design/" + str(dS.id) + "/"
#                 form_part = False
#         if not form_part:
#             form_name = request.POST["form_name"]
#             if form_name not in [None, ""]:
#                 dS.m_name = form_name
#             dS.m_periode = request.POST["periode"]
#             dS.m_sub_periode = request.POST["sub_periode"]

#             """
# 			r_indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
# 			dS.m_indicateur = r_indicateur
# 			"""
#             dS.m_institution = context["actual_institution"]
#             # ephoxVariables_input = request.POST["ephoxVariables_input"]
#             variables_list = request.POST["variables_list"].split("#")
#             indicateurs_list = request.POST["indicateurs_list"].split("#")
#             variables_set = set()
#             indicateurs_set = set()

#             for v in variables_list[:-1]:
#                 dE = DataElement.objects.get(id=int(v))
#                 variables_set.add(dE)

#             for v in indicateurs_list[:-1]:
#                 dI = Indicateur.objects.get(id=int(v))
#                 indicateurs_set.add(dI)

#             """
# 			if ephoxVariables_input != "#":
# 				id_insert = 1
# 				ephoxVar = ephoxVariables_input.split("#")
# 				for v in ephoxVar[1:-1]:
# 					dE = DataElement.objects.get(id=int(v))
# 					dS.m_formulaire = dS.m_formulaire.replace("de$"+str(v)+"$","<div class='variableSelector'> <div><label><small>"+str(dE)+"</small></label></div> <div><input class='form-control' name='"+str(id_insert)+"' type='text'></div> </div>")
# 					id_insert += 1
# 					variables_set.add(dE)
# 				dS.save()
# 			"""
#             variables_set = list(variables_set)
#             indicateurs_set = list(indicateurs_set)
#             dS.m_dataelements.set(variables_set)
#             dS.m_indicateurs.set(indicateurs_set)

#             r_structure = request.POST["structures_list"].split("$")
#             structures_set = list()
#             for r in r_structure[:-1]:
#                 structures_set.append(Structure.objects.get(id=int(r)))
#             dS.m_structures.set(structures_set)

#             r_role = request.POST["roles_list"].split("$")
#             roles_set = list()
#             for r in r_role[:-1]:
#                 roles_set.append(Role.objects.get(id=int(r)))
#             dS.m_roles.set(roles_set)

#         dS.save()
#     elif generator == 'o':
#         r_m_tache_plannification = request.POST['tache_periode']
#         r_tache = request.POST['tache']
#         response = "/taches/" + r_tache + "/"
#         r_tache = Tache.objects.get(id=int(r_tache))

#         # r_code = request.POST['code']

#         r_nom = request.POST['nom']
#         r_perso = request.POST['perso']
#         r_accountable = request.POST['accountable']
#         r_consulted = request.POST['consulted']
#         r_informed = request.POST['informed']
#         date_echeance_str = request.POST['date_echeance']
#         try:
#             r_role = request.POST['role']
#         except:
#             pass
#         if r_perso != "0":
#             r_perso = Personnel.objects.get(id=int(r_perso))
#         else:
#             r_perso = None
#         if r_accountable != "0":
#             r_accountable = Personnel.objects.get(id=int(r_accountable))
#         else:
#             r_accountable = None
#         if r_consulted != "0":
#             r_consulted = Personnel.objects.get(id=int(r_consulted))
#         else:
#             r_consulted = None
#         if r_informed != "0":
#             r_informed = Personnel.objects.get(id=int(r_informed))
#         else:
#             r_informed = None

#         """		try:
# 			r_perso = Personnel.objects.get(id=int(r_perso))
# 			r_accountable = Personnel.objects.get(id=int(r_accountable))
# 			r_consulted = Personnel.objects.get(id=int(r_consulted))
# 			r_informed	 = Personnel.objects.get(id=int(r_informed))
# 		except:
# 			pass"""
#         try:
#             r_montant = int(request.POST['montant'])
#         except:
#             r_montant = 0
#         file_oko = None
#         r_chronogr = request.POST['chronogr']
#         r_who_assign = int(request.POST['who_assign'])
#         r_sub_period = request.POST['sub_period']
#         r_notification = request.POST['notification']
#         r_priorite = request.POST['priorite']
#         try:
#             r_operation_aggregates = request.POST['operation_aggregates']
#         except:
#             r_operation_aggregates = None
#         if edit_or_create == 'c':
#             operation = Operation(tache=r_tache, nom=r_nom, montant=r_montant, notification=r_notification,
#                                   priorite=r_priorite, date_echeance=date_echeance_str)
#             operation.m_value = ""
#             t2 = r_tache.sup_entity()
#             tmp = str(r_tache.id) + "#"
#             while t2 != None:
#                 tmp = str(t2.id) + "#" + tmp
#                 t2 = t2.sup_entity()
#             operation.code = tmp

#             if context['actual_institution'].default_options != True:
#                 try:
#                     if r_operation_aggregates is not None:
#                         operations_values = r_operation_aggregates.split("|")
#                         i_val = 0
#                         for val in context['actual_institution'].operations_modules().fill_fields():
#                             if val["type"] in ['file', 'image']:
#                                 try:
#                                     oF = OperationFile(operation=operation, m_field=val['field'],
#                                                        m_file=request.FILES[val['field'] + '_nam'])
#                                     operation.save()
#                                     oF.save()
#                                 except:
#                                     pass
#                             operation.m_value += str(
#                                 operations_values[i_val]) + "|"  # str(operations_values[i_val]) + "|"
#                             i_val += 1
#                     else:
#                         operation.m_value = r_operation_aggregates
#                 except:
#                     pass
#                 operation.m_value += " "
#             else:
#                 try:
#                     file_oko = request.FILES['file_oko']
#                     operation.fichier_joint = file_oko
#                 except:
#                     pass
#         else:

#             edit_id = request.POST['edit_id']
#             operation = Operation.objects.get(id=int(edit_id))
#             operation.nom = r_nom
#             operation.montant = r_montant
#             operation.notification = r_notification
#             operation.priorite = r_priorite
#             if r_operation_aggregates is None:
#                 for val in context['actual_institution'].operations_modules().fields_rapported()[:-1]:
#                     operation.m_value += " " + "|"
#             else:
#                 operation.m_value = r_operation_aggregates
#         operation.m_tache_plannification = r_m_tache_plannification
#         # Add Institution to Operation
#         operation.m_institution = context["actual_institution"]

#         list_operations = list()
#         if r_who_assign == 0:
#             if r_perso != "0":
#                 operation.personnel = r_perso
#             if r_accountable != "0":
#                 operation.accountable = r_accountable
#             if r_consulted != "0":
#                 operation.consulted = r_consulted
#             if r_informed != "0":
#                 operation.informed = r_informed
#             list_operations.append(operation)
#         elif r_who_assign == 1:
#             role = Role.objects.get(id=int(r_role))
#             for perso in role.persos():
#                 operation.personnel = perso.m_personnel
#                 list_operations.append(operation)
#         else:
#             list_operations.append(operation)

#         for o in list_operations:
#             o.save()
#             if edit_or_create == 'e':
#                 op = OperationPeriode.objects.filter(m_operation=o).first()
#                 if op != None:
#                     tmp_chrono = SubPeriode.objects.filter(id=int(r_sub_period)).first()
#                     if tmp_chrono != None:
#                         op.m_chronogramme = tmp_chrono
#                     op.m_desc_realisation = r_chronogr
#                     op.save()
#                 else:
#                     op = OperationPeriode(m_operation=o, m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
#                                           m_desc_realisation=r_chronogr)
#                     op.save()
#             else:
#                 op = OperationPeriode(m_operation=o, m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
#                                       m_desc_realisation=r_chronogr)
#                 op.save()
#         subject = "Attribution - " + str(operation.institution().operations_name())
#         email_from = settings.EMAIL_HOST_USER
#         try:
#             raci_roles = [operation.personnel, operation.accountable, operation.consulted, operation.informed]
#             all_emails = list()
#             msg_emails = list()
#             i_r = 0
#             for r in raci_roles:
#                 i_r += 1
#                 if r is not None:
#                     tmp_context = {
#                         'operation': operation,
#                         'personnel': r,
#                         'tache': operation.tache,
#                         'institution': operation.institution()
#                     }
#                     if i_r == 2:
#                         tmp_context['role'] = 'A'
#                     elif i_r == 3:
#                         tmp_context['role'] = 'C'

#                     elif i_r == 4:
#                         tmp_context['role'] = 'I'
#                     else:
#                         tmp_context['role'] = 'Responsable'
#                     message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', tmp_context)
#                     # message2 = (subject, message, email_from, [r_role.m_personnel.mail])
#                     message2 = EmailMessage(subject, message, email_from, [r.mail, ])
#                     message2.content_subtype = 'html'

#                     msg_emails.append(message2)
#                     try:
#                         message2.send()
#                     except:
#                         pass
#         # recipient_list = all_emails
#         # send_mass_mail((msg_emails), fail_silently=False)
#         except:
#             message_context = {
#                 'operation': operation,
#                 'personnel': operation.personnel,
#                 'tache': operation.tache,
#                 'institution': operation.institution()
#             }
#             message = "<html><head></heady><body><b>Vous avez une </b></body></html>"
#             message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', message_context)
#             if r_perso != '0':
#                 email = r_perso.mail
#                 recipient_list = [email, ]
#                 msg = EmailMessage(subject, message, email_from, recipient_list)
#                 msg.content_subtype = 'html'
#                 try:
#                     if file_oko != None:
#                         msg.attach(file_oko.name, file_oko.read(), file_oko.content_type)
#                     msg.send()
#                 except:
#                     pass
#         """
# 		try:
# 			send_mail( subject, message, email_from, recipient_list, fail_silently=False)
# 			msg = EmailMessage(subject, message, email_from, recipient_list)
# 			msg.content_subtype = 'html'
# 			msg.send()
# 		except:
# 			pass
# 		"""
#     elif generator == 'w':
#         r_nom = request.POST['nom']
#         r_prenom = request.POST['prenom']
#         r_mail = request.POST['mail']
#         r_password = request.POST['password']
#         r_username = User.objects.count() + 1
#         try:
#             r_user = User(username=r_username, email=r_mail)
#             r_user.set_password(r_password)
#             r_user.save()
#         except:
#             r_user = User(username='ngb' + str(r_username + 1000), email=r_mail)
#             r_user.set_password(r_password)
#             r_user.save()

#         # Code generator
#         code = ""
#         
#         for i in range(6):
#             code += str(random.randint(0, 9))
#         # code = "000111"
#         owner = Owner(m_user=r_user, m_code=code)
#         owner.save()
#         personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, bd_user=r_user)
#         personnel.photo = OperaFile.objects.filter(m_name="USR").first().m_file
#         personnel.save()
#         subject = ""
#         message = " Bonjour, utilisez ce code pour renseigner une Institution au sein d'Opera " + str(code)
#         email = r_mail
#         email_from = settings.EMAIL_HOST_USER
#         recipient_list = [email, ]
#         try:
#             send_mail(subject, message, email_from, recipient_list, fail_silently=False)
#         except:
#             pass  # No cconnexion
#         response = "/log_account/"
#         request.session['new_user'] = 1
#     elif generator == "i2":
#         id_e = int(request.POST["entity_id"])
#         entity = Entity.objects.get(id=id_e)
#         for i in entity.get_indicateurs():
#             tmp_per = request.POST["period" + str(i.id)]
#             tmp_num = request.POST["numer" + str(i.id)]
#             tmp_field = request.POST["id" + str(i.id)]
#             tmp_field = DataElement.objects.filter(id=int(tmp_field)).first()
#             # i.m_values = str(tmp_per)+"#"+str(tmp_num)+"\n" + str(i.m_values)
#             iV = IndicateurVal(m_indicateur=i, m_periode=tmp_per, m_valeur=tmp_num, m_numerateur=tmp_field)
#             iV.save()

#         entity.is_rapported = True
#         entity.save()
#         response = "/chaine_indicateurs/"
#         context['indique'] = True
#     elif generator == "dSv":
#         r_dataset = DataSet.objects.get(id=int(request.POST["dSv_id"]))
#         r_user = request.user.personnel
#         r_variables = r_dataset.m_dataelements
#         r_values = request.POST["variables_value"].split("#")
#         r_values_names = request.POST["variables_names"].split("#")
#         r_values_dict = dict()

#         for v in r_variables.filter():
#             r_values_dict["D0elt" + str(v.id)] = None

#         for i in range(len(r_values)):
#             r_values_dict[r_values_names[i]] = r_values[i]

#         r_structures = [request.POST["struc_selec"]]
#         r_period1 = request.POST["period1_saisie"]
#         r_period2 = request.POST["period2_saisie"]
#         entity = DataSetValue(m_dataset=r_dataset, m_user=r_user, m_period_value=r_period1,
#                               m_sub_period_value=r_period2)
#         entity.save()

#         i = 0
#         for v in r_variables.filter():
#             dt = DSet_DElt(m_dataelement=v, m_dataset_value=entity,
#                            m_value=r_values_dict["D0elt" + str(v.id)])  # r_values[i])
#             dt.save()
#             i += 1
#         for v in r_structures:
#             stru = Structure.objects.get(id=int(v))
#             entity.m_structures.add(stru)
#         entity.save()
#         response = "/data_form/" + str(r_dataset.id) + "/" + str(0) + "/"
#     elif generator == "ieD":
#         formula = request.POST["formule"]
#         indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
#         indicateur.m_datalets_calcul = formula
#         indicateur.save()
#         response = "/dataelts/indic/"
#     elif generator == "pass":
#         password = request.POST["password"]
#         user = request.user
#         user.set_password(password)
#         user.save()
#         response = "/profile/"
#     elif generator == "ind_va":
#         entity = EntityType.objects.get(id=int(request.POST["entity_ind_id"]))
#         entity.indicateur_fields = request.POST["ind_val"]
#         entity.save()
#         response = "/configurations/"
#     elif generator == "cOi":
#         entity = Tache.objects.get(id=request.POST["configOp_id"])
#         tA = TacheAggregate.objects.filter(m_tache=entity).first()
#         if tA == None:
#             tA = TacheAggregate(m_tache=entity)
#         i = 1
#         for i1 in context["actual_institution"].operations_modules().fields():
#             if request.POST["fiel1" + str(i)] not in ["#", "", " "]:
#                 tA.m_values1 += request.POST["fiel1" + str(
#                     i)] + ""
#             else:
#                 tA.m_values1 += "#" + ""
#         i = 1
#         for i1 in context["actual_institution"].operations_modules().fill_fields_rapp():
#             if request.POST["fiel2" + str(i)] not in ["#", "", " "]:
#                 tA.m_values2 += request.POST["fiel2" + str(
#                     i)] + ""
#             else:
#                 tA.m_values2 += "#" + ""
#             i += 1
#         tA.save()
#         response = "/taches/" + str(entity.id)
#     return redirect(response)


def planifier2(request, period_id=0):
    template = "webpages/ctn_bpf/plannifier.html"
    annees = set()
    context = basis(request)
    entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
    tasks = entity.lines()

    # actual_period =

    context['searches'] = list()
    context['g_v'] = '1'
    context['institution'] = Institution.objects.last()
    if period_id != 0:
        context['actual_period'] = Institution_Periodes.objects.get(id=int(period_id))
    else:
        period = request.user.personnel.actual_institution.default_period
        institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                            m_periode=period).first()
        context['actual_period'] = institutionPe
    context['taches'] = tasks
    context['ranges'] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
    return render(request, template, context)


def roles(request, search=None):
    template = "webpages/ctn_bpf/roles.html"
    fields_personnel = ['Photos', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', '']
    fields_roles = ['Role', 'Description', 'Permissions',
                    'Entite']
    personnel = Personnel.objects.filter()
    context = basis(request)
    roles = Role.objects.filter(actual_institution=context['actual_institution']).select_related('actual_institution')
    if search != None:
        roles = roles.filter(nom__contains=search)
    context[
        'entity'] = 'Role'
    context['fields1'] = fields_personnel
    context['personnel'] = personnel
    context['fields'] = fields_roles
    context['lines'] = roles
    context['g_v'] = 'r'
    context['g_vs'] = 'r2'
    return render(request, template, context)


def repartir_tache(request):
    r_tache = request.POST['tache']
    r_roles_tache = request.POST['roles_tache']
    r_personnel_tache = request.POST['personnel_tache']
    roles = r_roles_tache.split("_")
    personnels = r_personnel_tache.split("_")
    r_roles = list()
    r_persos = list()
    for r in roles:
        if r != '':
            r_roles.append(Role.objects.get(id=int(r)))
    for p in personnels:
        if p != '':
            r_persos.append(Personnel.objects.get(id=int(p)))
    tache = Tache.objects.get(id=int(r_tache))
    subject = "Attribution de la Tache"
    message = " Vous avez une Tache qui vouis a ete "
    email = r_persos[0].mail
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    # send_mail( subject, message, email_from, recipient_list, fail_silently=False)

    repartition = TacheRepartition(m_tache=tache)
    repartition.save()
    repartition.m_personnels.set(r_persos)
    repartition.m_roles.set(r_roles)
    repartition.save()
    return redirect("/gestionnaire/t/")


def modify(request, arg_val=""):
    r_personnel_id = request.POST['personnel']
    r_role_id = request.POST['role']
    personnel = Personnel.objects.get(id=int(r_personnel_id))
    role = Role.objects.get(id=int(r_role_id))
    r_institution = Institution.objects.get(id=int(request.POST['institution']))
    p_f = Personnel_Function(m_personnel=personnel, m_role=role, m_institution=r_institution)
    p_f.save()
    return redirect('/personnels/')


def save_plannify(request):
    tache_id = request.POST['calendar_tache']
    calendar = request.POST['calendar_selected']
    periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
    tache = Tache.objects.get(id=int(tache_id))
    try:
        plani_tche = TachePlannify.objects.filter(m_tache__id=int(tache_id)).first()
        plani_tche.m_planify = calendar
        plani_tche.m_periode = periode
    except:
        plani_tche = TachePlannify(m_tache=tache, m_planify=calendar, m_periode=periode)
    plani_tche.save()
    institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                        m_periode=periode)
    return redirect("/planifier/" + str(institutionPe.first().id) + "/")


# @cache_page(60 * 15)
def operations_home(request, lvl=-1, arg_structure="#", periode="#", search="#", only_not=0):
    template = "webpages/ctn_bpf/index.html"
    context = basis(request)
    if lvl == -1:
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
    else:
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution'],
                                                   m_hierachie=lvl).last().m_entity_type
    lines = entity.lines()
    tache_lvl = entity.is_tache
    if arg_structure not in ["#", '0']:
        tmp_structure = Structure.objects.get(id=int(arg_structure))
        try:
            tmp = list()
            for l in lines:
                if l.structure == tmp_structure:
                    tmp.append(l)
                else:
                    pass
            lines = tmp
            context['arg_structure'] = int(arg_structure)
        except:
            pass
    if periode not in ["#", '0']:
        try:
            tmp = list()
            for t in lines:
                if periode in t.plannification().table():
                    tmp.append(t)
            lines = tmp
        except:
            pass
    if search != "#":
        tmp = list()
        for t in lines:
            if search in t.get_name():
                tmp.append(t)
        lines = tmp
    context['entity'] = entity
    context['sup_entity'] = entity.sup_entity(context['actual_institution'].id)
    context['lines'] = lines
    context['fields'] = entity.fields()
    context['operation'] = 1
    context['personnel'] = Personnel.objects.filter()
    context['menu'] = 'o'
    context['lvl'] = lvl
    context['g_v'] = 'o'
    context['periode'] = periode
    context["tache_lvl"] = tache_lvl

    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


@login_required(login_url='/log_account')
def notifications(request):
    template = "webpages/ctn_bpf/index.html"
    context = basis(request)
    entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
        'm_institution').last().m_entity_type
    lines = list()
    for l in entity.lines():
        if l.progression() < 100:
            operations = l.operations()
            appd = False
            for o in operations:
                if o.personnel == request.user.personnel:
                    lines.append(l)
                    break
    context['notif'] = True
    context['entity'] = entity

    # context['lines'] = lines
    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    context['fields'] = entity.fields()
    context['personnel'] = Personnel.objects.filter()
    context['menu'] = 'o'
    context['g_v'] = 'o'
    return render(request, template, context)


# @login_required(login_url='/log_account')
# def alert_notifs(request, search=None, tree=None, report=0):
#     context = basis(request)
#     template = "webpages/ctn_bpf/alert_notifs.html"
#     operation_historic = HistoricRACI.objects.all()
#     perso = request.user.personnel
#     context['report'] = report
#     context['operation_historic'] = operation_historic
#     repeat_mode = context["actual_institution"].repeat_mode
#     if repeat_mode:
#         na_class = OperationDetails
#         if report == 0:
#             main_operations = Operation.objects.filter(personnel=perso.id,
#                                                        etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 1:
#             main_operations = na_class.objects.filter(m_operation__accountable=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 2:
#             main_operations = na_class.objects.filter(m_operation__consulted=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 3:
#             main_operations = na_class.objects.filter(m_operation__informed=perso.id,
#                                                       etat='2')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 100:
#             main_operations = na_class.objects.filter()
#     else:
#         na_class = Operation
#         if report == 0:
#             main_operations = na_class.objects.filter(personnel=perso.id,
#                                                       etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 1:
#             main_operations = na_class.objects.filter(accountable=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 2:
#             main_operations = na_class.objects.filter(consulted=perso.id,
#                                                       etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 3:
#             main_operations = na_class.objects.filter(informed=perso.id,
#                                                       etat='2')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 100:
#             main_operations = na_class.objects.filter()
#     bool(main_operations)
#     if repeat_mode and report != 0:
#         tmp = list()
#         for n in main_operations:
#             tmp.append(n.m_operation.id)
#         main_operations = Operation.objects.filter(id__in=tmp)

#     main_operations = main_operations.order_by('-date_creation')
#     if tree == '1':
#         entHidden = request.POST["entHidden"]
#         context["entHidden"] = entHidden.split("#")
#         main_operations = main_operations.filter(code__contains=entHidden)
#     tmp = list()
#     try:
#         n = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).count()
#     except:
#         n = 0

#     for i in range(n):
#         tmp.append(set())

#     for o in main_operations:
#         if o.code != None:
#             o2 = o.code.split("#")
#             try:
#                 for i in range(n):
#                     tmp[i].add(o2[i])
#             except:
#                 pass

#     ents = list()
#     for i in range(n):
#         try:
#             ents.append({
#                 "hierachie": i,
#                 'entities': Entity.objects.filter(id__in=list(tmp[i]))
#             })
#         except:
#             pass
#     context['ents'] = ents
#     context['n'] = n

#     main_operations2 = OperationRole.objects.filter(m_personnel=perso.id).values('m_operation')
#     context['main_operations2'] = main_operations2
#     # operations = perso.get_taches() #get_operations()

#     results = list()
#     results = list(main_operations)
#     """
# 	for o in operations:
# 		if o.progression() == 0 and o.rapported() in ['0',None] :
# 			results.append(o)
# 	"""
#     paginator_o = Paginator(results, 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     context['menu'] = 'aN'
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range
#     context['lines'] = context['pages_o']
#     return render(request, template, context)


# def save_rapport(request):
#     context = basis(request)
#     r_operation = Operation.objects.get(id=int(request.POST['operation_id']))
#     actual_institution = context['actual_institution']

#     r_operation.etat = "1"
#     r_operation.save()
#     if request.method == "POST":
#         operation_comm = request.POST.get('operation_comm')
#         operation_raci = HistoricRACI.objects.create(m_commentaire=operation_comm,
#                                                      m_operation_id=request.POST['operation_id'], m_role="R")
#         operation_raci.save()
#         if context["actual_institution"].repeat_mode == True:
#             r_operation = OperationDetails(m_operation=r_operation)
#             r_operation.personnel = request.user.personnel
#             r_operation.m_institution_id = actual_institution
#             r_operation.save()
#             fil_class = OperationDetailsFile
#     else:
#         fil_class = OperationFile
#     try:
#         r_commentaire = request.POST['operation_comm']
#     except:
#         r_commentaire = None
#     try:
#         r_fichier = request.FILES['operation _fichier']
#     except:
#         r_fichier = None
#     if context['actual_institution'].default_options != True:
#         rapport_input = request.POST['rapport_input']
#         rapport_values = request.POST['rapport_values']
#         try:
#             aggregates = context['actual_institution'].operations_modules().type_fields_rapported()
#             aggs_fields = context['actual_institution'].operations_modules().fields_rapported()
#         except:
#             aggregates = list()
#         i = 1
#         for a in aggregates:
#             if a == 'file':
#                 delet = fil_class.objects.filter(m_field=aggs_fields[(i - 1)], operation=r_operation)
#                 delet.delete()
#                 oF = fil_class.objects.create(m_field=aggs_fields[(i - 1)], operation=r_operation)
#                 try:
#                     oF.m_file = request.FILES['file_r' + str(i)]
#                 except:
#                     pass
#                 oF.save()
#             i += 1
#         r_operation.m_value_reported = rapport_values
#         r_operation.etat = '1'
#         r_operation.date_rapported = datetime.datetime.now()
#         r_operation.m_commentaire = r_commentaire
#         r_operation.save()
#     else:
#         r_operation.etat = '1'
#         rapport_input = request.POST['rapport_input']
#         if rapport_input != 'c':
#             rapport = OperationRapport(operation=r_operation, commentaire=r_commentaire)
#         else:
#             # r_nom = request.POST['operation_nom']
#             rapport = OperationRapport(piece_jointe=r_fichier, operation=r_operation, commentaire=r_commentaire)
#             # r_operation.etat = '1' #nom_piece_jointe=r_nom
#             periode = r_operation.periodes()
#             desc_tmp = periode.desc_split()
#             desc_tmp.append("")
#             index = 0
#             for i in desc_tmp:
#                 if i == '9':
#                     pass
#                 elif i == '0':
#                     desc_tmp[index] = '1'
#                     rapport.period = index
#                     rapport.save()
#                     request.session['new_rapport'] = 1
#                     break
#                 elif i == '1':
#                     request.session['have_to_done'] = 1
#                     break
#                 index += 1
#             desc_tmp = "_".join(desc_tmp)

#             periode.m_desc_realisation = desc_tmp
#             periode.save()
#     try:
#         finances = request.POST["finances"]
#         r_operation.montant2 = int(finances)
#     except:
#         r_operation.montant2 = 0
#     r_operation.save()
#     request.session['new_rapport'] = 1
#     try:
#         operation = r_operation
#         peA = None
#         tmps = [operation.accountable, operation.consulted]
#         message_context1 = {
#             'operation': operation,
#             'role': 'A',
#             'commentaires': r_commentaire,
#             'lien': "/decision/o/" + str(operation.id) + "/",
#             'institution': operation.institution()
#         }
#         message_context2 = {
#             'operation': operation,
#             'role': 'C',
#             'commentaires': r_commentaire,
#             'lien': "/decision/o/" + str(operation.id) + "/",
#             'institution': operation.institution()
#         }

#         subject = str(operation) + " - attente de validation"
#         message1 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context1)
#         message2 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context2)
#         recipient_list1 = [operation.accountable.bd_user.email, ]
#         if operation.consulted != None:
#             recipient_list2 = [operation.consulted.bd_user.email, ]
#         else:
#             recipient_list2 = list()
#         email_from = settings.EMAIL_HOST_USER
#         msg1 = EmailMessage(subject, message1, email_from, recipient_list1)
#         msg1.content_subtype = 'html'
#         msg2 = EmailMessage(subject, message2, email_from, recipient_list2)
#         msg2.content_subtype = 'html'
#         try:
#             if r_fichier != None:
#                 msg1.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
#                 msg2.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
#             msg1.send()
#             msg2.send()
#         except:
#             pass
#     except:
#         pass
#     response = redirect('/operations/')
#     return response


def assign_supervisor(request):
    tache = Tache.objects.get(id=int(request.POST["assign"]))
    supervisor = Personnel.objects.get(id=int(request.POST['perso']))
    tache.superviseur = supervisor
    tache.save()
    return redirect('/gestionnaire/t/')


# def valid_rapport(request):
#     opera_valider_id = request.POST['opera_valider_id']
#     operation = Operation.objects.get(id=int(opera_valider_id))
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     try:
#         operation_rapport = request.POST["operation_rapport"]
#         operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
#         operation_rapport.etat = "2"
#         operation_rapport.m_institution_id = actual_institution
#         operation_rapport.save()
#     except:
#         operation.etat = '2'

#     index = 0
#     if request.method == "POST":
#         m_commentaire = request.POST.get('opera_valider_comment')
#         # date_realisation = date.today()
#         # date_realisation = datetime.today().date()
#         save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
#                                                     m_operation_id=request.POST['opera_valider_id'], m_role='A')
#         save_historic.save()
#     # if defaulted configurations
#     try:
#         periode = operation.periodes()
#         desc_tmp = periode.desc_split()
#         desc_tmp.append("")
#         for i in desc_tmp:
#             if i in ['9', '0']:
#                 pass
#             elif i == '1':
#                 desc_tmp[index] = '2'
#                 request.session['validation_done'] = 1
#                 break
#             index += 1
#         desc_tmp = "_".join(desc_tmp)
#         periode.m_desc_realisation = desc_tmp
#         periode.save()
#     except:
#         pass
#     operation.save()

#     subject = " Evolution " + str(operation)
#     message_context = {
#         'operation': operation,
#     }
#     message = render_to_string('webpages/ctn_bpf/mails/inform_evolution.html', message_context)

#     email_from = settings.EMAIL_HOST_USER
#     recipient_list = [operation.personnel.bd_user.email, ]
#     if operation.informed != None:
#         recipient_list.append(operation.informed.bd_user.email)
#     msg = EmailMessage(subject, message, email_from, recipient_list)
#     msg.content_subtype = 'html'
#     try:
#         msg.send()
#         send = '0'
#     except:
#         send = '1'

#     return redirect('/operations/')


def in_valid_rapport(request):
    opera_invalider_id = request.POST['opera_invalider_id']
    commentaire = request.POST["opera_invalider_comment"]
    operation = Operation.objects.get(id=int(opera_invalider_id))
    operation.etat = '0'
    periode = operation.periodes()
    desc_tmp = periode.desc_split()
    desc_tmp.append("")
    try:
        operation_rapport = request.POST["operation_rapport"]
        operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
        operation_rapport.etat = 0
        operation_rapport.save()  #:save()
    except:
        operation_rapport.etat = 0
        pass
    index = 0
    if request.method == "POST":
        m_commentaire = request.POST.get('opera_invalider_comment')
        # date_realisation = date.today()
        # date_realisation = datetime.today().date()
        save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
                                                    m_operation_id=request.POST['opera_invalider_id'], m_role='A')
        save_historic.save()
    for i in desc_tmp:
        if i in ['1']:
            desc_tmp[index] = '0'
            request.session['validation_done'] = 1
        index += 1
    desc_tmp = "_".join(desc_tmp)
    periode.m_desc_realisation = desc_tmp
    periode.save()
    operation.save()
    message_context = {
        'operation': operation,
        'commentaire': commentaire
    }

    subject = " Rapport non Valide"
    message = render_to_string('webpages/ctn_bpf/mails/operation_invalid.html', message_context)
    email = operation.personnel.bd_user.email
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    msg = EmailMessage(subject, message, email_from, recipient_list)
    msg.content_subtype = 'html'
    try:
        msg.send()
        send = '0'
    except:
        send = '1'

    return redirect('/operations/')


def delete(request):
    id_entity = request.POST['id_entity']
    generator = request.POST['generator']
    try:
        force = False
        if generator == 'o':
            entity = Operation.objects.get(id=int(id_entity))
            response = redirect('/taches/' + str(entity.tache.id) + '/')
        elif generator == 'eD':
            entity = DataElement.objects.get(id=int(id_entity))
            response = redirect('/dataelts/')
        elif generator == 'p2':
            entity = Personnel.objects.get(id=int(id_entity))
            response = redirect('/personnels/')
        elif generator == 'r':
            entity = Role.objects.get(id=int(id_entity))
            response = redirect('/roles/')
        elif generator == 's':
            entity = Structure.objects.get(id=int(id_entity))
            response = redirect('/structures/')
        elif generator == 'e':
            entity = InsitutionEntities.objects.get(id=int(id_entity))
            hierachie = entity.m_hierachie
            institution = entity.m_institution
            to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
            for d in to_decaler:
                d.m_hierachie -= 1
                d.save()
            response = redirect('/configurations/')
            entity = entity.m_entity_type
        elif generator == 'i2':
            entity = Indicateur.objects.get(id=int(id_entity))
            response = redirect('/evaluer/' + str(entity.m_enti.m_type_entity.hierachie()))
        elif generator == 'iF3':
            entity = IndicateurVal.objects.get(id=int(id_entity))
            sup = entity.m_indicateur.m_enti
            try:
                s_sup = sup.sup_entity().id
                sup_hierachie = sup.m_type_entity.hierachie()

                response = redirect('/data_form/' + str(sup_hierachie) + '/' + str(s_sup) + '/')
            except:
                response = redirect('/data_form/-1/0/')
        elif generator == 'y':
            entity = Institution_Periodes.objects.get(id=int(id_entity))
            response = redirect('/configurations/')
        elif generator == 'z':
            entity = SubPeriode.objects.get(id=int(id_entity))
            response = redirect('/configurations/')
        elif generator == 'p2_RACI':
            entity = PersonnelRACI.objects.get(id=int(id_entity))
            response = redirect('/personnels_raci/')
        elif generator == "dSV":
            entity = DataSet.objects.get(id=int(id_entity))
            response = redirect("/data_form/-1/0/")
        else:
            hierachie = int(request.POST['hierachy'])
            try:
                base_val = int(request.POST["base_val"])
            except:
                base_val = "0"
            if base_val not in ['', '0', None]:
                response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
            else:
                response = "/gestionnaire/" + str(hierachie) + "/"

            entity = Entity.objects.get(id=int(id_entity))
            response = redirect(response)
        entity.delete()
    except ProtectedError:
        # render the template with your message in the context
        # or you can use the messages framework to send the message:
        template = "webpages/ctn_bpf/error_delete.html"
        context = basis(request)
        entity = Entity.objects.filter(id=int(id_entity)).first()
        if entity != None:
            context["entity"] = entity
            tmp_hierachie = entity.m_type_entity.hierachie()
            context['hierachie'] = tmp_hierachie
            if entity.m_type_entity.is_tache == True:
                subs = context["actual_institution"].operations_name
            else:
                tmp_hierachie += 1
                subs = InsitutionEntities.objects.filter(m_institution=context["actual_institution"],
                                                         m_hierachie=tmp_hierachie).first()
            context['subs'] = subs
            context['element'] = 1
        response = render(request, template, context)
    return response


def ajax_lines(request):
    type_search = request.GET.get('type_search')
    value_search = request.GET.get('value_search')
    sub_search = request.GET.get('sub_search')
    results = list()
    lines = list()
    progressions = list()
    lines_count = 0

    if value_search != "|":
        results = objets[type_search].objects.filter(nom__contains=value_search)
    else:
        pass

    if type_search == 'o':
        for r in results:
            progressions.append(r.progression())
            lines.append(r.nom + "|" + str(r.personnel) + "|" + str(r.montant) + "|" + r.semaines + "|")

    lines_count = results.count()
    data = {
        'progressions': progressions,
        'lines': lines,
        'lines_count': lines_count
    }
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def configurations(request):
    template = "webpages/ctn_bpf/configurations.html"
    context = basis(request)
    context['institution'] = request.user.personnel.actual_institution
    context['menu'] = 'c'
    context['g_v'] = 'e'
    context['basis_periodes'] = Periode.objects.filter(m_initial=True)
    return render(request, template, context)


# def profile(request):
#     template = "webpages/ctn_bpf/profile.html"
#     context = basis(request)
#     context['institution'] = context['actual_institution']
#     context["personnel"] = request.user.personnel
#     return render(request, template, context)


def filter_op_search(request):
    search = request.POST['search']
    return filter_op(request, search)


def filter_op(request, search="#"):
    try:
        niveau = int(request.POST['niveau'])
        periode = request.POST['periode']
        structure = request.POST['structure']
    except:
        niveau = -1
        periode = "#"
        structure = "#"
    try:
        only_not = int(request.POST["only_not"])
    except:
        only_not = 0
    return operations_home(request, niveau, structure, periode, search, only_not)


# def notifs(request):
#     user_id = request.GET.get('value')
#     insti_id = request.GET.get('institution')
#     actual_institution = Institution.objects.get(id=int(insti_id))
#     perso = Personnel.objects.get(bd_user__id=int(user_id))
#     if actual_institution.repeat_mode == False:
#         operations1 = list()
#         operations = Operation.objects.filter(personnel=perso)
#         operations_report = Operation.objects.filter(accountable=perso, etat='1')
#         count_is_consulted = Operation.objects.filter(consulted=perso, etat='1').count()
#         count_is_informed = Operation.objects.filter(informed=perso, etat='2').count()


#     else:
#         operations1 = Operation.objects.filter(personnel=perso)
#         operations = OperationDetails.objects.filter(m_operation__personnel=perso)
#         operations_report = OperationDetails.objects.filter(m_operation__accountable=perso, etat='1')
#         count_is_consulted = OperationDetails.objects.filter(m_operation__consulted=perso, etat='1').count()
#         count_is_informed = OperationDetails.objects.filter(m_operation__informed=perso, etat='2').count()

#     # General_Results
#     nb_taches = 0
#     nb_have_rapported = 0
#     nb_is_done = 0
#     nb_have_to_do = 0
#     nb_observations = 0

#     nb_have_rapported2 = 0
#     nb_is_done2 = 0
#     nb_have_to_do2 = 0
#     nb_observations2 = 0
#     if True:
#         for o in operations1:
#             if o.etat == '0':
#                 nb_have_to_do += 1
#                 nb_taches += 1
#                 if o.institution() == actual_institution:
#                     nb_have_to_do2 += 1
#         for o in operations:
#             if o.etat == '1':
#                 nb_have_rapported += 1
#                 if o.institution() == actual_institution:
#                     nb_have_rapported2 += 1
#             else:
#                 nb_is_done += 1
#                 if o.institution() == actual_institution:
#                     nb_is_done2 += 1

#         for o in operations_report:
#             nb_observations += 1
#             if o.institution() == actual_institution:
#                 nb_observations2 += 1

#     data = {
#         'result': nb_taches,
#         'have_to_done': nb_have_to_do,
#         'is_done': nb_is_done,
#         'have_rapported': nb_have_rapported,
#         'have_to_done2': nb_have_to_do2,
#         'is_done2': nb_is_done2,
#         'have_rapported2': nb_have_rapported2,
#         'nb_observations': nb_observations,
#         'nb_observations2': nb_observations2,
#         'count_is_consulted': count_is_consulted,
#         'count_is_informed': count_is_informed
#     }
#     # entities = institution.get_entities()
#     indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution).count()
#     data["indi_total"] = indicateurs_all
#     return JsonResponse(data)


def indicateurs_ajax(request):
    actual_institution = request.GET.get("institution")
    actual_year = request.GET.get("actual_year")

    try:
        entity_type = int(request.GET.get("entity_type"))
        type_indic = request.GET.get("type_indic")
    except:
        entity_type = None

    try:
        id_entity = int(request.GET.get("id_entity"))
        id_entity = Entity.objects.get(id=id_entity)
    except:
        id_entity = None

    if entity_type == None:
        if id_entity != None:
            indicateurs_all = Indicateur.objects.filter(m_enti=id_entity)
        else:
            indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution)
        nb_all = indicateurs_all.count()
        indicateurs_renseignes = list()
        nb_renseignes = 0

        for i in indicateurs_all:
            if i.actu_value != None:
                indicateurs_renseignes.append(i)
                nb_renseignes += 1

        indicateurs_values = list()
        cibles = list()
        for i in indicateurs_renseignes:
            cibles.append(i.get_cibles(actual_year))
            indicateurs_values.append(i.actu_value())
        data = {
            'all': nb_all,
            'nb_renseignes': nb_renseignes,
            'cibles': cibles,
            'indicateurs_values': indicateurs_values
        }
    elif type_indic == "F":
        if id_entity == None:
            eT = EntityType.objects.filter(id=entity_type).first()
            entities = eT.lines()
        else:
            eT = id_entity.m_type_entity
            entities = id_entity.sub_entities()
        resul1 = list()
        resul2 = list()
        for e in entities:
            try:  # it may be Operation
                operations = e.operations()
                if eT.is_tache == False:
                    taches = e.taches()
                else:
                    taches = [e]
                tmp = 0
                tmp2 = 0
                for t in taches:
                    if t.montant != None:
                        tmp += int(t.montant)
                for o in operations:
                    tmp2 += int(o.montant2)
                resul1.append(tmp)
                resul2.append(tmp2)
            except:
                pass

        data = {
            'list_montant1': resul1,
            'list_montant2': resul2
        }
        entq = list()
        entq_id = list()
        for e in entities:
            entq.append(str(e))
            entq_id.append(str(e.id))
        data['entities'] = entq
        data["entities_id"] = entq_id
    else:
        if id_entity == None:
            eT = EntityType.objects.filter(id=entity_type).first()
            entities = eT.lines()
        else:
            entities = [id_entity]
        indicateurs_all = Indicateur.objects.filter(m_enti__in=entities)
        ens = dict()
        ens_good = dict()
        ens_bad = dict()
        nbE = indicateurs_all.count()
        for i in entities:
            ens[str(i.id)] = 0
            ens_good[str(i.id)] = 0
            ens_bad[str(i.id)] = 0

        for i in indicateurs_all:
            ens[str(i.m_enti.id)] += 1
            try:
                if int(i.get_cibles(actual_year)) > int(i.actu_value()):
                    ens_bad[str(i.m_enti.id)] += 1
                else:
                    ens_good[str(i.m_enti.id)] += 1
            except:
                pass

        if nbE > 0:
            for i in entities:
                ens[str(i.id)] = ens[str(i.id)]  # *100/nbE
                ens_good[str(i.id)] = ens_good[str(i.id)]  # *100/nbE
                ens_bad[str(i.id)] = ens_bad[str(i.id)]  # *100/nbE

        list_ens = list()
        list_ens_good = list()
        list_ens_bad = list()
        for i in entities:
            list_ens.append(ens[str(i.id)])
            list_ens_good.append(ens_good[str(i.id)])
            list_ens_bad.append(ens_bad[str(i.id)])
        data = {
            'list_ens': list_ens,
            'list_ens_good': list_ens_good,
            'list_ens_bad': list_ens_bad
        }
        entq = list()
        entq_id = list()
        for e in entities:
            entq.append(str(e))
            entq_id.append(str(e.id))
        data['entities'] = entq
        data["entities_id"] = entq_id
    return JsonResponse(data, safe=False)


def institutions(request, search=None):
    template = "webpages/ctn_bpf/institution.html"
    context = basis(request)
    institutions1 = list()
    structures = Personnel_Structure.objects.filter(m_personnel=request.user.personnel)
    for s in structures:
        if s.m_structure.institution not in institutions1:
            institutions1.append(s.m_structure.institution)
    for i in Institution.objects.filter(owner__m_user__id=request.user.id):
        if i not in institutions1:
            institutions1.append(i)
    if search != None:
        tmp = institutions1
        institutions1 = list()
        for i in tmp:
            if search in i.nom or search in i.sigle:
                institutions1.append(i)
    institutions1 = sorted(institutions1, key=lambda t: t.sigle)
    paginator_o = Paginator(institutions1, 12)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['institutions1'] = elements_page
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    context['menu'] = 'i'
    return render(request, template, context)


def set_institution(request, institution_id):
    institution = Institution.objects.get(id=institution_id)
    request.user.personnel.actual_institution = institution
    request.user.personnel.save()
    return redirect("/")


def operations_details_list(request, operation_id):
    template = "webpages/ctn_bpf/operations_details_list.html"
    context = basis(request)
    operation = Operation.objects.get(id=operation_id)
    context["operation"] = operation
    return render(request, template, context)


# def operations_details(request, operation_id):
#     template = "webpages/ctn_bpf/operations_details.html"
#     context = basis(request)
#     operation = Operation.objects.get(id=operation_id)
#     actual_institution = context['actual_institution']
#     if operation.institution() != context['actual_institution']:
#         request.user.personnel.actual_institution = operation.institution()
#         request.user.personnel.save()
#         context = basis(request)
#     lines = list()

#     tache = operation.tache
#     if actual_institution.default_options != True:
#         try:
#             i = 0
#             for th in actual_institution.operations_modules().fill_fields_rapp():
#                 a = th
#                 if a["type"] == "choix":
#                     a["extras"] = operation.get_value(a["field"])
#                 lines.append(a)
#             aggs2 = tache.aggregates2()
#             for a in aggs2:
#                 lines[i]["field"] = a
#                 i += 1
#         except:
#             pass
#     context["lines"] = lines

#     tache = operation.tache
#     context['operation'] = operation
#     context['tache'] = tache
#     context['institutions'] = Institution.objects.filter()
#     context['menu'] = 'o'
#     return render(request, template, context)


# def history(request, dates="#"):
#     template = "webpages/ctn_bpf/history.html"
#     context = basis(request)
#     entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
#         'm_institution').last().m_entity_type
#     tasks = entity.lines()
#     if context['actual_institution'].default_options == True:
#         context['fields'] = [entity.m_nom, 'Operation', 'Personnel', 'Rapport Technique', 'Date']
#         unsorted_results = list()
#         for t in tasks:
#             for o in t.operations():
#                 aka = OperationRapport.objects.filter(operation__id=o.id)
#                 for o2 in aka:
#                     unsorted_results.append(o2)
#     else:
#         if context["actual_institution"].repeat_mode == True:
#             template = "webpages/ctn_bpf/history_rapport.html"
#             tasks = context["actual_institution"].taches()
#             context["taches"] = tasks

#             context['menu'] = 'h'
#             # context['dates'] = dates
#             paginator_o = Paginator(tasks, 10)
#             page_number_o = request.GET.get('page')
#             elements_page = paginator_o.get_page(page_number_o)
#             # oeuvres_date
#             context['pages_o'] = elements_page
#             context['num_pages'] = paginator_o.num_pages
#             context['page_range'] = paginator_o.page_range
#             """
# 			paginator_o = Paginator(sorted_result,10)
# 			page_number_o = request.GET.get('page')
# 			elements_page = paginator_o.get_page(page_number_o)
# 			#oeuvres_date
# 			context['pages_o']=elements_page
# 			context['num_pages']=paginator_o.num_pages
# 			context['page_range']=paginator_o.page_range
# 			"""
#         else:
#             tmpas = context['actual_institution'].operations_modules().fill_fields_rapp()
#             aggregates = list()
#             for t in tmpas:
#                 if t['type'] == 'choix':
#                     aggregates.append(t['extras'])
#                 else:
#                     aggregates.append(t['field'])
#             context['fields'] = [entity.m_nom, context['actual_institution'].operations_name] + aggregates + [
#                 'Personnel', 'Date']

#             unsorted_results = list()
#             for t in tasks:
#                 for o in t.operations():
#                     unsorted_results.append(o)

#             sorted_result = sorted(unsorted_results, key=lambda t: t.date_creation)
#             if dates != "#":
#                 start_date = request.POST['start_date']
#                 end_date = request.POST['end_date']
#                 context['start_date'] = start_date
#                 context['end_date'] = end_date

#                 start_date = start_date.split("-")
#                 end_date = end_date.split("-")
#                 start_date = [int(elt) for elt in start_date]
#                 end_date = [int(elt) for elt in end_date]

#                 result = list()
#                 for t in sorted_result:
#                     start_date_cmp = start_date == list() or (
#                                 t.date_creation.year > start_date[0] or t.date_creation.year == start_date[
#                             0] and t.date_creation.month > start_date[1] or t.date_creation.year == start_date[
#                                     0] and t.date_creation.month == start_date[1] and t.date_creation.day >= start_date[
#                                     2])
#                     end_date_cmp = end_date == list() or (
#                                 t.date_creation.year < end_date[0] or t.date_creation.year == end_date[
#                             0] and t.date_creation.month < end_date[1] or t.date_creation.year == end_date[
#                                     0] and t.date_creation.month == end_date[1] and t.date_creation.day <= end_date[2])

#                     if start_date_cmp and end_date_cmp:
#                         result.append(t)
#             sorted_result = result

#             context['lines'] = sorted_result
#             context['nb_lines'] = len(sorted_result)
#             context['institutions'] = Institution.objects.filter()
#             context['menu'] = 'h'
#             context['dates'] = dates
#             paginator_o = Paginator(sorted_result, 10)
#             page_number_o = request.GET.get('page')
#             elements_page = paginator_o.get_page(page_number_o)
#             # oeuvres_date
#             context['pages_o'] = elements_page
#             context['num_pages'] = paginator_o.num_pages
#             context['page_range'] = paginator_o.page_range
#     return render(request, template, context)


def calendar(request):
    template = "webpages/ctn_bpf/agenda_week.html"
    context = basis(request)
    return render(request, template, context)


def save_period(request):
    institution = request.POST['institution']
    periode = request.POST['periode']
    decoupage = request.POST['decoupage']
    edit_or_create = request.POST['edit_or_create']
    try:
        big_period = request.POST["big_periode"]
        sub_period = 0
    except:
        sub_period = None
    if sub_period != None:
        r_big_period = Periode.objects.get(id=int(big_period))
        sub_period = request.POST["sub_period"]
        details = request.POST["details"]
        if edit_or_create != 'e':
            r_sub_period = SubPeriode(m_periode=r_big_period, m_sub_value=periode, m_decoupage=decoupage,
                                      m_decoupage_description=details)
        else:
            edit_id = request.POST['edit_id']
            r_sub_period = SubPeriode.objects.get(id=int(edit_id))
            r_sub_period.m_periode = r_big_period
            r_sub_period.m_sub_value = periode
            r_sub_period.m_decoupage = decoupage
            r_sub_period.m_decoupage_description = details
        r_sub_period.save()
    else:
        if edit_or_create != 'e':
            r_period = Periode(m_value=periode, m_decoupage=decoupage)
        else:
            edit_id = request.POST['edit_id']
            r_period = Periode.objects.get(id=int(edit_id))
            r_period.m_value = periode
            r_period.m_decoupage = decoupage
        r_period.save()
        if edit_or_create != 'e':
            institution = Institution.objects.get(id=int(institution))
            i_periode = Institution_Periodes(m_institution=institution, m_periode=r_period)
            i_periode.save()
    return redirect("/configurations/")


def ajax_graphiques(request):
    data = dict()
    id_tache = int(request.GET.get('id_graph'))
    type_graph = request.GET.get('type_graph')
    nature_graph = int(request.GET.get('nature_graph'))
    inst_graph = Institution.objects.get(id=int(request.GET.get('inst_graph')))
    actual_config = inst_graph.default_options

    if nature_graph != -1:
        element = InsitutionEntities.objects.filter(m_institution=inst_graph,
                                                    m_hierachie=nature_graph).first().m_entity_type
    else:
        element = InsitutionEntities.objects.filter(m_institution=inst_graph).last().m_entity_type

    if element.is_tache:
        entity = Tache.objects.get(id=id_tache)
        operations = entity.operations()
        nb_operations = len(operations)
    else:
        entity = Entity.objects.get(id=id_tache)

    if type_graph == 'eT':
        if element.is_tache:
            tache_tmp = Tache.objects.get(id=entity.id)
            plansT = list()
            for p in tache_tmp.plannification().table():
                plansT.append(p)
            x_abcisses = list()
            for p in plansT:
                for xi in inst_graph.default_subperiod.decoup_desc_slip2():
                    x_abcisses.append(str(p) + "-" + str(xi))

            # Matrice des mois
            result = list()

            x_interval = tache_tmp.plannification().table()
            operations = tache_tmp.operations()
            nb_operations = operations.count()
            tmp_sum = 0
            nb_x_abcisses = 0
            tmp_dict = list()
            for x in x_interval:
                # tmp_sum = 0
                operations_2 = operations.filter(m_tache_plannification=x)
                all_dict = list()
                for op in operations_2:
                    x_dict = list()
                    for t in op.periodes().desc_split():
                        x_dict.append(0)
                    i_x_d = 0

                    for t in op.periodes().desc_split():
                        if actual_config == True:
                            if t == '2':
                                tmp_val = 100
                            else:
                                tmp_val = 0
                        else:
                            if t != '9':
                                ds = {'0': 0, '1': 0, '2': 100}
                                tmp_val = ds[op.etat]
                            else:
                                tmp_val = 0

                        x_dict[i_x_d] += tmp_val
                        i_x_d += 1
                    all_dict.append(x_dict)
                # all_dict contient la matrice d'un mois i)

                tmp_dict_result = list()
                if operations_2.first() != None:
                    for t in operations_2[0].periodes().desc_split():
                        tmp_dict_result.append(0)
                    for a_dict in all_dict:
                        ia = 0
                        for a in a_dict:
                            tmp_dict_result[ia] += a
                            ia += 1
                tmp_dict += tmp_dict_result
            result_tmp = 0
            result = list()
            for t in tmp_dict:
                result_tmp += t
                result.append((result_tmp / nb_operations))
        else:
            x_abcisses = inst_graph.default_period.decoup_slip()
            tmp = list()
            taches = entity.taches()
            discovered = list()
            index_tmp = 0
            nb_taches = len(taches)
            for x in x_abcisses:
                tmp.append(0)
                for t in taches:
                    if x in t.plannification().table() and t not in discovered:
                        tmp[index_tmp] += t.progression()
                        discovered.append(t)
                index_tmp += 1
            y_abcisses = list()
            for y in range(index_tmp):
                if nb_taches > 0:
                    y_abcisses.append((tmp[y] / nb_taches))
                else:
                    y_abcisses.append(0)
            result = list()
            rst = 0
            for y in y_abcisses:
                rst += y
                result.append(rst)
    elif type_graph == 'p':
        x_abcisses = set()
        result_x = list()
        y_abcisses = list()
        for o in operations:
            x_abcisses.add(o.personnel)
        for perso in x_abcisses:
            y_abcisses.append(perso.progression_taches(inst_graph))
        for x in x_abcisses:
            result_x.append(str(x))
        x_abcisses = result_x
        result = y_abcisses
    elif type_graph == 't':
        x_abcisses = list()
        result = list()
        subs = entity.sub_entities()
        try:
            sub_name = str(subs[0].m_type_entity)
        except:
            sub_name = " "
        i = 0
        for x in subs:
            result.append(x.progression())
            x_abcisses.append(str(x))
            i += 1
        data['nb_sub'] = i
        data['sub_names'] = sub_name
    data['x_abcisses'] = x_abcisses
    data['y_abcisses'] = result
    return JsonResponse(data, safe=False)


# @login_required(login_url='/log_account')
# def decision(request, nature="#", element_id=0, operation_rapport_id=None):
#     context = basis(request)
#     if nature == "o":
#         template = "webpages/ctn_bpf/decision.html"
#         operation = Operation.objects.get(id=element_id)
#         if context["actual_institution"].repeat_mode == True:
#             operation_historic = HistoricRACI.objects.all()
#             context['operation_historic'] = operation_historic
#             template = "webpages/ctn_bpf/decision_rapport.html"
#             operation = Operation.objects.get(id=element_id)
#             if operation_rapport_id == None:
#                 operation_rapport = operation.get_operation_details_invalid().last()
#                 context["operation_rapport"] = operation_rapport
#         context['operation'] = operation
#         context['tache'] = operation.tache
#     else:
#         context["entity"] = Entity.objects.get(id=int(element_id))
#         template = "webpages/ctn_bpf/decision_plus.html"
#     return render(request, template, context)

#
# def get_elements(request):
#     # Elements can be Entity, Forms
#     if True:  # try:
#         other_limk = request.GET.get("other")
#         institution = Institution.objects.get(id=int(request.GET.get('institution')))
#         if other_limk == "dS":
#             dSs = DataSet.objects.filter(m_institution=institution)
#             data = {
#                 "datasets": list(),
#                 "datasets_id": list()
#             }
#             for d in dSs:
#                 data["datasets"].append(str(d))
#                 data["datasets_id"].append(str(d.id))
#         elif other_limk == "dE_code":
#             data = dict()
#             codes = request.GET.get("codes").split("#")
#             result = list()
#             codes_replace = list()
#             for code in codes[:-1]:
#                 res = list()
#                 j = 0
#                 n = len(code)
#                 while j < n:
#                     if code[j] == "$":
#                         j += 1
#                         k = j
#                         while code[j] != "$":
#                             j += 1
#
#                         res.append(code[k:j])
#                         j += 2
#                     else:
#                         j += 1
#                 tmp_res = list()
#                 tmp_res2 = list()
#                 for r in res:
#                     tmp_res.append(str(DataElement.objects.get(id=int(r))))
#                     tmp_res2.append(r)
#                 result.append(tmp_res)
#                 codes_replace.append(tmp_res2)
#             data["data_elts"] = result
#             data["codes_replace"] = codes_replace
#         elif other_limk == "dI_formula":
#             values = request.GET.get("value").split("#")
#             data_elts = DataSet.objects.get(id=int(request.GET.get("dataset")))
#             result_formula = list()
#             for v in values[:-1]:
#                 ind = Indicateur.objects.get(id=int(v))
#                 result_formula.append(ind.m_numerateur)
#             data = dict()
#             data["data_elts"] = data_elts.join_dataelts()
#             data["formulas"] = result_formula
#     else:  # except:
#         value = int(request.GET.get('value'))
#         nature = int(request.GET.get('nature'))
#         institution = Institution.objects.get(id=int(request.GET.get('institution')))
#         entity_type = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=institution).select_related(
#             'm_institution').first().m_entity_type
#         # entity to upload
#         entity = Entity.objects.get(id=value)
#         default_fields = entity_type.fields()
#         default_fields_type = entity_type.type_fields()
#         default_fields_values = entity.values()
#         # Default Values to putt
#         expected_fields = entity_type.fields_rapported()
#         expected_types_type = entity_type.type_fields_rapported()
#         results = list()
#         data = {
#             'entity': str(entity),
#             'default_fields': default_fields,
#             'default_fields_type': default_fields_type,
#             'default_fields_values': default_fields_values,
#             'expected_fields': expected_fields,
#             'expected_types_type': expected_types_type
#         }
#     return JsonResponse(data, safe=False)


def get_elements_hierachy(request):
    nature = int(request.GET.get('nature'))
    institution = Institution.objects.get(id=int(request.GET.get('institution')))
    if nature == -100:
        type_entity = request.GET.get('type_entity')
        role = Role.objects.get(id=int(type_entity))
        entity_type = role.m_simple_auth
    elif nature != -1:
        entity_type = InsitutionEntities.objects.filter(m_hierachie=nature,
                                                        m_institution=institution).first().m_entity_type
    else:
        entity_type = InsitutionEntities.objects.filter(m_institution=institution).last().m_entity_type
    try:
        big_entity = int(request.GET.get('big_entity'))
        ent = Entity.objects.get(id=int(big_entity))
        lines = ent.sub_entities()
    except:
        lines = entity_type.lines()
    tmp = list()
    ids = list()
    for l in lines:
        tmp.append(str(l))
        ids.append(l.id)
    data = {
        'lines': tmp,
        'ids': ids
    }
    return JsonResponse(data, safe=False)


def get_entities_subsequency(request):
    pass


def get_elements_subsequency_true(request):
    nature = int(request.GET.get('nature'))
    entity = int(request.GET.get('entity'))
    report = int(request.GET.get('report'))
    try:
        institution = int(request.GET.get("institution"))
    except:
        institution = None
    if entity != -1:
        try:
            entity = Entity.objects.get(id=entity)
        except:
            entity = 0
        elts = entity.child_trees()
    else:
        elts = [Institution.objects.get(id=institution).top_entity().lines()]

    data_names = list()
    data_ids = list()
    for elt in elts:
        tmp_id = list()
        tmp_name = list()
        for e in elt:
            tmp_id.append(e.id)
            tmp_name.append(str(e))
        data_names.append(tmp_name)
        data_ids.append(tmp_id)

    data = {
        'data_ids': data_ids,
        'data_names': data_names
    }
    return JsonResponse(data, safe=False)


def get_elements_subsequency(request):
    nature = int(request.GET.get('nature'))
    entity = int(request.GET.get('entity'))
    report = int(request.GET.get('report'))
    try:
        institution = int(request.GET.get("institution"))
    except:
        institution = None
    try:
        entity = Entity.objects.get(id=entity)
    except:
        entity = 0

    if report == 0:
        operations = Operation.objects.filter(etat='0', personnel=request.user.personnel).values('code')
    elif report == 1:
        operations = Operation.objects.filter(etat='1', accountable=request.user.personnel).values('code')
    elif report == 2:
        operations = Operation.objects.filter(etat='1', consulted=request.user.personnel).values('code')
    elif report == 3:
        operations = Operation.objects.filter(etat='2', informed=request.user.personnel).values('code')
    else:
        operations = Operation.objects.filter().values('code')

    if institution != None:
        institution = Institution.objects.get(id=institution)
        operations = operations.filter(m_institution=institution)

    bool(operations)
    result = list()
    if entity != 0:
        for o in operations:
            try:
                if o['code'] not in ["", None] and o['code'].split("#")[nature] == str(entity.id):
                    result.append(o)
            except:
                pass
    else:
        pre_hierachie = int(request.GET.get("pre_hierachy"))
        if pre_hierachie not in [0, -1]:
            for o in operations:
                if o['code'] not in ["", None] and o['code'].split("#")[(nature - 1)] == str(pre_hierachie):
                    result.append(o)
        elif nature == 0:
            result = list(operations)
    steps = list()

    k = 0
    if True:
        if report != 100:
            for i in operations[0]['code'].split("#"):
                steps.append(set())
                k += 1
        else:
            for i in list(operations)[-1]['code'].split("#"):
                steps.append(set())
                k += 1
    else:
        pass

    # Recuperer les Operations
    i = 0
    for o in result:
        i = 0
        for j in range(k):
            if o['code'] not in [None, "", " "]:
                steps[i].add(o['code'].split("#")[j])
                i += 1

    # Transformer en Liste
    ajax_steps = list()
    for s in steps:
        ajax_steps.append("#".join(list(s)))

    ajax_steps2 = list()
    for s in steps:
        s3 = list(s)
        s2 = list()
        for t in s3:
            if t not in ['', None]:
                s2.append(int(t))
        a = Entity.objects.filter(id__in=list(s2))
        a2 = [str(t) for t in list(a)]
        ajax_steps2.append("#".join(a2))

    data = {
        'operations': result,
        'ajax_steps': ajax_steps,
        'ajax_steps2': ajax_steps2
    }
    return JsonResponse(data, safe=False)


def save_valid_rapport(request):
    nature = request.POST['nature']
    resultat = request.POST['resultat_realise']
    institution = Institution.objects.get(id=int(request.POST['institution']))
    entity_type = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=institution).first().m_entity_type
    entity = Entity.objects.get(id=int(request.POST['value']))
    entity.is_rapported = True
    entity.save()
    tR = EntityRapport(m_entity=entity, m_resultat_realise=resultat)
    tR.save()
    return redirect('/' + nature + '/')


def filter_entities(request):
    institution = Institution.objects.get(id=int(request.POST['institution']))
    sub_value = request.POST['sub_value']
    hierachie = int(request.POST['hierachie'])
    tmp_hierachie = hierachie - 1
    if hierachie <= 0:
        hierachie = 0
        value = '0'
    else:
        entity_type = InsitutionEntities.objects.filter(m_institution=institution,
                                                        m_hierachie=(hierachie - 1)).first().m_entity_type
        entity_type_actual = InsitutionEntities.objects.filter(m_institution=institution,
                                                               m_hierachie=(hierachie)).first().m_entity_type
        enums_list = list()
        enums = entity_type_actual.enum_fields()['result']
        if entity_type_actual.m_enum_values not in ['', None]:
            for val in enums:
                enums_list.append(request.POST["enum_" + val['name']])
        if enums_list != list():
            enums_list = "||".join(enums_list)
        value = request.POST[str(entity_type)]
    # gestionnaire(request,gest_val,gest_id=0,name=None,structure=None,periode=None)
    if value != '0':
        element = Entity.objects.get(id=int(value))
        if enums_list != list():
            response = redirect('/gestionnaire/' + str(tmp_hierachie) + '/' + str(element.id) + '/')
        else:
            response = gestionnaire(request, str(tmp_hierachie), str(element.id), None, None, None, enums_list)
    else:
        response = redirect('/gestionnaire/' + str(hierachie) + '/')
    return response


def search(request):
    if request.user.is_authenticated == True:
        template = "webpages/ctn_bpf/search.html"
        val = request.POST['search']
        context = basis(request)
        searches = list()
        entities = context['actual_institution'].get_entities()
        for e in entities:
            lines = e.m_entity_type.lines()
            hierachie = e.m_hierachie
            def_color = '#00a2c3'
            if e.m_entity_type.is_tache:
                def_color = 'orange'
            for l in lines:
                if val in str(l):
                    searches.append({'nature': 'e', 'label': e, 'value': l, 'hierachie': hierachie, 'color': def_color})

        for s in Structure.objects.filter(nom__contains=val, institution=context['actual_institution']):
            searches.append({'nature': 's', 'label': 'Structure', 'value': s, 'color': '#9012a1'})

        for s in Personnel.objects.filter(nom__contains=val):
            searches.append({'nature': 'p', 'label': 'Personnel', 'value': str(s), 'color': '#12c304'})

        context['searches'] = searches
    else:
        return redirect("/")
    return render(request, template, context)


def search2(request, menu):
    search = request.POST["search"]
    if menu == 'i':
        response = institutions(request, search)
    elif menu == 'p2':
        response = personnels(request, search)
    elif menu == 'p2_RACI':
        response = personnels_raci(request, search)
    elif menu == 'r':
        response = roles(request, search)
    elif menu == 'aN':
        response = alert_notifs(request, search)
    return response


@login_required(login_url='/log_account')
def messages(request):
    template = "webpages/ctn_bpf/search.html"
    context = basis(request)
    context['msg_view'] = True
    results = list()
    personnel = request.user.personnel
    accounted = personnel.operations_accounted()
    bool(accounted)
    """
	for o in Operation.objects.filter():
		if  o.rapported() not in [None,'0'] and o.progression()<100 and context['permissions'] > 0:
			results.append({'value':o,'name':'Operation','link':'o','nature':'r'})
	"""
    for o in accounted:
        if o.rapported() not in [None, '0'] and o.progression() < 100:
            # and context['permissions'] > 0
            results.append({'value': o, 'name': 'Operation', 'link': 'o', 'nature': 'r'})
    entities_type = context['actual_institution'].get_entities()
    nb_observations = 0
    """
	for e in entities_type:
		lines = e.m_entity_type.lines()
		for l in lines :
			if l.is_rapported != True and l.progression() == 100:
				results.append({'value':l,'name':str(l.m_type_entity),'link':'o','nature':'o'})
	"""
    context['msgs'] = True
    paginator_o = Paginator(results, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def bad_pass(request):
    mail = request.POST['mail']
    sent = False
    try:
        subject = "Restauration de Mot de Passe"
        code = ""
        
        for i in range(0, 6):
            code += str(random.randint(0, 9))
        # r_bd_user.set_password('User'+password)
        message = " Entrez ce code pour restaurer votre Compte "
        email = r_perso.mail
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [email, ]
        send_mail(subject, message, email_from, recipient_list, fail_silently=False)
        sent = True
    except:
        pass
    data = {
        'sent': sent
    }
    if sent == True:
        data['code'] = code
    return JsonResponse(data)


def notifs_rapp(request):
    user_id = request.GET.get('value')
    insti_id = request.GET.get('institution')
    insti_id = Institution.objects.get(id=int(insti_id))
    # perso = Personnel.objects.get(bd_user__id=int(user_id))
    operations = Operation.objects.filter(personnel=request.user.personnel)
    # General_Results
    nb_is_rapported = 0
    nb_have_to_report = 0
    nb_observations = 0

    nb_is_rapported2 = 0
    nb_have_to_report2 = 0
    nb_observations2 = 0

    actual_institution = insti_id

    context = basis(request)
    perso = request.user.personnel
    for o in operations:
        if o.etat == '0':
            nb_have_to_report += 1
            if o.institution() == actual_institution:
                nb_have_to_report2 += 1
        elif o.etat == '1':
            nb_is_rapported += 1
            if o.institution() == actual_institution:
                nb_is_rapported2 += 1
    entities_type = insti_id.get_entities()

    nb_observations = Operation.objects.filter(etat='1', accountable=perso).count()

    for e in entities_type:
        lines = e.m_entity_type.lines()
        for l in lines:
            if l.is_rapported != True and l.progression() == 100:
                nb_observations += 1

    personnel = request.user.personnel
    # for o in operations
    """
	for o in accounted:#o.institution() in context['personnel'].all_institutions() and
		if o.progression() < 100 and o.rapported() not in ['0',None]:
			# and context['permissions'] > 0
			nb_observations += 1
	"""
    data = {
        'nb_have_to_report': nb_have_to_report,
        'nb_is_rapported': nb_is_rapported,
        'nb_observations': nb_observations,
        'nb_have_to_report2': nb_have_to_report2,
        'nb_is_rapported2': nb_is_rapported2,
        'nb_observations2': nb_observations2
    }
    return JsonResponse(data)


def valid_observations(request):
    element_id = request.POST["element_id"]
    valid_attributes = request.POST['attributes']

    element = Entity.objects.get(id=int(element_id))
    is_tache = element.m_type_entity.is_tache
    if is_tache:
        element = Tache.objects.get(id=int(element_id))
    element.is_rapported = True
    element.m_reported_fields = valid_attributes
    element.save()
    return redirect('/operations/')


def print_mail_file(request):
    owners = Owner.objects.filter()
    mail_lists = list()
    for o in owners:
        mail_lists.append(o.m_user.email)
    context = {
        'mail_lists': mail_lists
    }
    template = "webpages/ctn_bpf/csv_template.html"
    return render(request, template, context)


def assistance(request):
    template = "webpages/ctn_bpf/assistance.html"
    context = basis(request)
    result = render(request, template, context)
    try:
        if request.session['assistance'] == 1:
            result = redirect('/')
    except:
        pass
    return result


def ajax_restore(request):
    
    r_mail = request.GET.get('mail')
    code = ""
    for i in range(6):
        code += str(random.randint(0, 9))
    message_context = {
        'code': code,
    }
    subject = "de Compte Opera +"
    message = render_to_string('webpages/ctn_bpf/mails/new_code.html', message_context)
    email = r_mail
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    msg = EmailMessage(subject, message, email_from, recipient_list)
    msg.content_subtype = 'html'
    try:
        msg.send()
        send = '0'
    except:
        send = '1'
    data = {
        'code': code,
        'send': send
    }
    return JsonResponse(data)


def restorepass(request):
    mail = request.POST['restore']
    password = request.POST['password']
    user = User.objects.filter(email=mail).first()
    user.set_password(password)
    user.save()
    login(request, user)
    return redirect('/')


def documentation(request):
    document = OperaFile.objects.filter(m_name="DOCU").first().m_file.url
    return redirect(document)


# New Updates
@login_required(login_url='/log_account')
def chaine_indicateurs(request):
    template = "webpages/ctn_bpf/chaine_resultat.html"
    context = basis(request)
    actual_institution = context['actual_institution']
    context['menu'] = 'l'
    context['top_entities'] = actual_institution.top_entity().lines()
    context['this_entities'] = actual_institution.get_entities()
    return render(request, template, context)


def get_indicateur_value(request):
    indicateur = Indicateur.objects.get(id=int(request.GET.get('id_indicateur')))
    fields = indicateur.m_fields
    periodicite = indicateur.m_periodicite
    final_cible = indicateur.m_final_cible
    if final_cible == None:
        final_cible = ""
    cibles = indicateur.m_cibles
    data_verification = indicateur.m_data_verification

    verification_indi = indicateur.m_verification_indi

    data = {
        'obj': indicateur.m_objectif_indi,
        'indicateur': indicateur.m_name,
        'fields': fields,
        'periodicite': periodicite,
        'final_cible': final_cible,
        'cibles': cibles,
        'verification_indi': verification_indi,
        'data_verification': data_verification,
        "data_verificationind": "#",
        'others': "#"
    }
    tmp_verifi = data_verification.split("#")
    if tmp_verifi[0] == "1":
        ind_ve = DataSet.objects.get(id=int(tmp_verifi[1]))
        data["data_verificationind"] = str(ind_ve)
        data["data_verificationind_url"] = "/data_form/" + str(ind_ve.id) + "/0/"
    if indicateur.m_others not in [None, ""]:
        data["others"] = indicateur.m_others
    return JsonResponse(data, safe=False)


def ajax_institution(request):
    sens = request.GET.get('sens')
    devise = request.GET.get('devise')
    institution = request.GET.get('institution')
    institution = Institution.objects.get(id=int(institution))
    if int(sens) == 1:
        institution.default_options = False
    elif int(sens) == 0:
        institution.default_options = True
    elif int(sens) == 3:
        institution.finan_options = None
    elif int(sens) == 2:
        institution.finan_options = devise
    institution.save()
    data = {
        'nada': True
    }
    return JsonResponse(data, safe=False)


# def save_indicateur(request):
#     edit_or_create = request.POST["edit_or_create"]
#     gest_id = request.POST['gest_id']
#     gest_val = request.POST['gest_val']
#     name = request.POST["nature_indicateur"]

#     fields = request.POST["indi_adds"]
#     periodicite = request.POST["periodicite"]
#     periodicite2 = request.POST["periodicite2"]

#     cibles = request.POST["indi_cibls"]
#     type_entity = request.POST["entity_id"]
#     data_verification = request.POST["indi_srcs"]

#     numerateur = request.POST["numerateur"]
#     denominateur = request.POST["denominateur"]

#     objectif_indi = request.POST["objectif_indi"]
#     verification_moyen = request.POST["verification_moyen"] + "#" + request.POST["veri_type"]

#     sources_speci = request.POST["specig_form"]
#     if sources_speci == "1":
#         try:
#             sources_speci += "#" + request.POST["dataSt"]
#         except:
#             pass

#     codes_colors = request.POST["codes_colors"]
#     alerts_modals = request.POST["alert_modals"]
#     others = request.POST["other"]

#     cibles = request.POST["indi_cibls"]
#     coeficient = int(request.POST["coefficient"])

#     unite = request.POST["unite_indicateur"]

#     try:
#         default_calcul = request.POST["default_calcul"]
#     except:
#         default_calcul = 1

#     if edit_or_create == "c":

#         entity = Entity.objects.get(id=int(type_entity))
#         indi = Indicateur(m_name=name, m_fields=fields, m_periodicite=periodicite, m_sub_periodicite=periodicite2,
#                           m_data_verification=data_verification, m_cibles=cibles, m_enti=entity)
#     else:
#         edit_id = request.POST["edit_id"]
#         indi = Indicateur.objects.get(id=int(edit_id))
#         indi.m_name = name
#         indi.m_fields = fields
#         indi.m_periodicite = periodicite
#         indi.m_sub_periodicite = periodicite2
#         indi.m_data_verification = data_verification
#         indi.m_cibles = cibles
#     indi.m_institution = basis(request)["actual_institution"]
#     indi.m_cibles = cibles
#     indi.m_numerateur = numerateur
#     indi.m_denominateur = denominateur
#     indi.m_coefficient = coeficient
#     indi.m_data_verification = sources_speci
#     indi.m_unite = unite

#     indi.objectif_indi = objectif_indi
#     indi.m_colors_code = codes_colors
#     indi.m_verification_indi = verification_moyen
#     indi.alerts_code = alerts_modals
#     indi.m_others = others

#     try:
#         ind.m_secundo_options = request.POST["other_fields"]
#     except:
#         pass
#     if int(default_calcul) == 1:
#         formula = "$" + str(numerateur) + "$" + " * " + str(coeficient) + " /" + "$" + str(denominateur) + "$"
#         indi.m_datalets_calcul = formula
#     indi.save()
#     return redirect('/evaluer/' + gest_val + '/' + gest_id)


# @login_required(login_url='/log_account')
# def evaluer(request, hierachie="0", gest_id=0, search=None, specifi_id=None):
#     context = basis(request)
#     hierachie = int(hierachie)
#     if specifi_id == None:
#         if hierachie != -1:
#             entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution=context[
#                 'actual_institution']).first().m_entity_type
#         else:
#             entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
#         context['entity'] = entity
#         context['hierachie'] = hierachie
#         context['hierachy'] = hierachie
#         if gest_id == 0:
#             elements = entity.lines()
#         else:
#             get_e = Entity.objects.get(id=int(gest_id))
#             context['base_val'] = get_e
#             elements = list(get_e.sub_entities())
#             context['sup_hierachy'] = list()
#             for t in get_e.sup_hierachie():
#                 context['sup_hierachy'].append(t)
#             context['sup_hierachy'].append(get_e)
#
#         if search != None:
#             tmp = elements
#             elements = list()
#             for t in tmp:
#                 if search in t.m_value_fields:
#                     elements.append(t)
#
#     else:
#         a_entity = Entity.objects.get(id=specifi_id)
#         entity = a_entity.m_type_entity
#         context['entity'] = entity
#         context['hierachie'] = hierachie
#         context['hierachy'] = hierachie
#         elements = [a_entity]
#     paginator_o = Paginator(elements, 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
#
#     context["indi_options"] = entity.indicateurs
#     try:
#         context["indi_options"][0] == None
#         context["no_secund"] = False
#     except:
#         context["no_secund"] = None
#
#     context['menu'] = 'g'
#     context['g_v'] = 'i2'
#     context['gest_id'] = gest_id
#     context['gest_val'] = hierachie
#     context['gest_val_1'] = hierachie + 1
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range
#     context['dataelts'] = dataelts
#     context['dataelts2'] = dataelts.exclude(m_default_value=None)
#
#     template = "webpages/ctn_bpf/evaluer.html"
#     return render(request, template, context)


def evaluer_detail(request, gest_id=0):
    return evaluer(request, "0", 0, None, gest_id)


def indic_plus(request, indic_id):
    context = basis(request)
    entity = Entity.objects.get(id=int(indic_id))
    template = "webpages/ctn_bpf/indic_plus.html"
    context['entity'] = entity
    return render(request, template, context)


def data_elements(request):
    context = basis(request)
    entity = Entity.objects.get(id=int(indic_id))
    template = "webpages/ctn_bpf/indic_plus.html"
    context['entity'] = entity
    return render(request, template, context)


def duplicate(request):
    from .utilities2 import duplicate_entity_logic, duplicate_tache, duplicate_entity, duplicate_operation
    generator_d = request.POST['generator_d']
    response = ""
    if generator_d == 'e':
        value = request.POST['dup_id']
        entity = Entity.objects.get(id=int(value))
        link = request.POST['link']
        response = redirect(link)
        # new = int(request.POST['new_dup'])
        new = 0
        try:
            name = request.POST['nom_dup']
            if name in [None, '']:
                name = "#"
        except:
            name = "#"
        try:
            relogic_dup = int(request.POST['relogic_dup'])
        except:
            relogic_dup = 0

        if relogic_dup == 0:
            duplicate_entity(entity, name)
        else:
            duplicate_entity_logic(entity, name)

    elif generator_d == 'o':
        value = request.POST['dup_id']
        entity = Operation.objects.get(id=int(value))
        link = request.POST['link']
        response = redirect(link)  # redirect("/taches/"+str(operation.m_tache.id))
        try:
            name = request.POST['nom_dup']
            if name in [None, '']:
                name = "#"
        except:
            name = "#"
        o2 = duplicate_operation(entity, name)
        o2.tache = entity.tache
        try:
            relogic_dup = (request.POST['reraci_dup'])
            r_personnel = Personnel.objects.get(id=int(request.POST["perso"]))
            r_accountable = Personnel.objects.get(id=int(request.POST["accountable"]))
            r_consulted = Personnel.objects.get(id=int(request.POST["consulted"]))
            r_informed = Personnel.objects.get(id=int(request.POST["informed"]))
            o2.personnel = r_personnel
            o2.accountable = r_accountable
            o2.consulted = r_consulted
            o2.informed = r_informed
        except:
            relogic_dup = 0
        o2.save()

    elif generator_d == 'i':
        values = request.POST['values_d'].split("|")
        response = redirect("/institution/")
        try:
            entity_dup = request.POST['entity_dup']
        except:
            entity_dup = "0"
        for v in values[:-1]:
            ins = Institution.objects.get(id=int(v))
            tmp = ins
            tmp.id = None
            tmp.save()

            # entity Institutions
            ins_entities = InsitutionEntities.objects.filter(m_institution__id=int(v))
            for i in ins_entities:
                tmp11 = i.m_entity_type
                tmp11.id = None
                tmp11.save()
                tmp1 = InsitutionEntities(m_institution=tmp, m_hierachie=i.m_hierachie, m_entity_type=tmp11)
                tmp1.save()
                if entity_dup == '1':
                    for i2 in tmp11.lines():
                        tmp2 = i2
                        tmp2.m_type_entity = tmp11
                        if tmp11.is_tache:
                            tmp3 = Tache.objects.get(id=tmp2.id)
                            tmp3.m_type_entity = tmp11
                        tmp2.id = None
                        tmp3.id = None
                        tmp2.save()
                        tmp3.save()

            # structures
            structures = Structure.objects.filter(institution__id=int(v))
            for i in structures:
                tmp2 = i
                tmp2.id = None
                tmp2.institution = ins
                tmp2.save()

            # aggregates
            aggregates = Aggregate.objects.filter(m_institution__id=int(v)).first()
            if aggregates != None:
                tmp3 = aggregates
                tmp3.id = None
                tmp3.m_institution = ins
                tmp3.save()

            # roles
            roles = Role.objects.filter(actual_institution__id=int(v))
            for r in roles:
                tmp4 = r
                tmp4.id = None
                tmp4.actual_institution = ins
                tmp4.save()
        request.session['new_ins'] = 1
    return response


def print_pdf(request):
    ind = int(request.GET.get('ind'))

    context = basis(request)
    operations = list()
    if ind == 1:
        tmp_ops = Operation.objects.filter()
    elif ind == 2:
        p = request.user.personnel
        tmp_ops = Operation.objects.filter(personnel=p)
    if ind in [1, 2]:
        for t in tmp_ops:
            if t.institution() == context['actual_institution']:
                operations.append(t)
        lines = list()
        taches_lines = list()
        for o in operations:
            tmp_line = str(
                o.tache) + "" + str(
                o) + "" + str(
                o.personnel)
            if o.periodes() != None:
                tmp_line += "" + str(
                    o.periodes().details_periode())
            else:
                tmp_line += "" + " "
            if context['actual_institution'].default_options != True:
                values = o.value_split()
                agr_fields = o.agr_fields()
                i = 0
                for v in agr_fields:
                    if v != 'file':
                        try:
                            tmp_line += "" + str(
                                values[i])
                        except:
                            tmp_line += "" + " "
                    else:
                        tmp_line += "" + " -- "
                    i += 1
                tmp_line += "" + o.status_op()
            lines.append(tmp_line)
    elif ind == 4:
        taches = context['actual_institution'].last_entity().lines()
        lines = list()
        for t in taches:
            hierachie = ""
            for h in t.sup_hierachie():
                hierachie += str(
                    h.get_name()) + ""
            fields = ""
            for f in t.values():
                fields += str(
                    f) + ""
            lines.append(hierachie + fields + str(
                t.progression()) + "" + str(
                t.m_date_modif))
    data = {
        'lines': lines
    }
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def dataelts(request, elt_id=0, elt_str=0):
    context = basis(request)
    context['g_v'] = 'eD'
    if elt_id == 0:
        template = "webpages/ctn_bpf/dataelts.html"
        indicateurs = Indicateur.objects.filter()
        dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
        context['indicateurs'] = indicateurs
        context['dataelts'] = dataelts
    else:
        template = "webpages/ctn_bpf/data_element_id.html"
        dataelt = DataElement.objects.get(id=int(elt_id))
        context["dataelt"] = dataelt
        context["structures"] = Structure.objects.filter(institution=context["actual_institution"])
        if elt_str == 0:
            context["actu_struc"] = context["structures"].first()
        else:
            context["actu_struc"] = Structure.objects.get(id=int(elt_str))
        # lines = dataelt
        tmps = dataelt.element_values(context["actu_struc"])
        periods_tmp = dict()
        p_tmps = list()

        class DEL:
            def __init__(self, e1, e2, e3=0):
                self.sup_period = e1
                self.period = e2
                self.value = e3

            def __repr__(self):
                return self.sup_period

        for t in tmps:
            a = t.m_dataset_value.m_period_value + "-" + t.m_dataset_value.m_sub_period_value
            if a in p_tmps:
                if t.m_value not in ["", None]:
                    periods_tmp[a].value += float(t.m_value)
            else:
                elts = DEL(t.m_dataset_value.m_sub_period_value, t.m_dataset_value.m_period_value, 0)
                if t.m_value not in ["", None]:
                    elts.value = float(t.m_value)
                else:
                    elts.value = 0
                periods_tmp[a] = elts
                p_tmps.append(a)
        context["values"] = list()
        for p in p_tmps:
            context["values"].append(periods_tmp[p])
    # context["values"].group_by = ['designation']
    return render(request, template, context)


@login_required(login_url='/log_account')
def dataelts_edit(request, elt_id):
    template = "webpages/ctn_bpf/dataelts_edit.html"
    context = basis(request)
    indicateurs = Indicateur.objects.filter()
    dataelts = DataElement.objects.filter(id=elt_id).first()
    context['indicateurs'] = indicateurs
    context['dataelts'] = dataelts
    return render(request, template, context)


@login_required(login_url='/log_account')
def dataelts_indic(request):
    template = "webpages/ctn_bpf/dataelts_indic.html"
    context = basis(request)
    context['is_indi'] = True
    context['indicateurs'] = list()
    tmps_is = Indicateur.objects.filter()
    dataelts = DataElement.objects.filter()
    for i in tmps_is:
        enti = i.m_enti
        if enti != None:
            if enti.m_type_entity.get_institution(context['actual_institution']) != None:
                context['indicateurs'].append(i)
    context['dataelts'] = dataelts
    return render(request, template, context)


def ajax_progression(request):
    plannify = request.GET.get("plannify")
    periode = Periode.objects.get(id=int(request.GET.get("periode")))

    year = request.GET.get("year")
    institution = request.GET.get("institution")
    institution = Institution.objects.get(id=int(institution))
    sub_period = institution.default_subperiod

    try:
        mods = request.GET.get("mods")
    except:
        mods = None

    try:
        entity = request.GET.get("entity")
    # entity_type =  request.GET.get("entity_type")
    except:
        entity = None

    progression = 0
    t_plannify = list()

    """
	for t in taches:
		t_plannify.append(t.plannification())
	"""
    result = list()
    if plannify != "#":
        cumulate = int(request.GET.get("cumul1"))  # 1 #Mettre une variable
        nb_ops = 0
        ops = list()
        if entity == None:
            operations = Operation.objects.filter(m_institution=institution)
        else:
            operations = Entity.objects.get(id=int(entity)).operations()
        bool(operations)
        for o in operations:
            ops.append(o)

        try:
            tmp_val = get_period_values(periode, plannify + "_")[0]
        except:
            tmp_val = None

        if tmp_val != None:
            result.append(tmp_val)
            for o in ops:
                if o.m_tache_plannification != None:
                    v = get_period_values(periode, o.m_tache_plannification + "_")
                    cond1 = (cumulate == 0) and int(v[0]) == int(tmp_val)
                    cond2 = (cumulate == 1) and int(v[0]) <= int(tmp_val)
                    if len(v) > 0:
                        if cond1 or cond2:
                            progression += o.progression()
                            nb_ops += 1
                else:
                    pass
        glob_ops = int(request.GET.get("cumul2"))  # 1
        if glob_ops == 1:
            nb_ops = operations.count()
        if nb_ops > 0:
            progression /= nb_ops
    else:
        if mods in [None, "0"]:
            prs = list()
            tops = institution.top_entity().lines()
            plannify_all = request.GET.get("plannify_all")
            plannify_all = plannify_all.split("#")[:-1]
            t_plannify2 = t_plannify
            t_plannify = subperiods_value(periode, year)
            mrd_t = list()
            i_t = 0
            for t in tops:
                mrd_t.append(list())
                for p in t_plannify:
                    mrd_t[i_t].append(0)
                i_t += 1

            i_t = 0

            for to in tops:
                nb_jT = 0
                if to.m_type_entity.is_tache == False:
                    tach = to.taches()
                else:
                    tach = [to]
                ops = list()
                for t in tach:
                    ops += t.operations()
                t_plannify2 = list()
                for a in tach:
                    a = Tache.objects.get(id=a.id)
                    t_plannify2.append(a.plannification())
                j_t = 0
                for p in t_plannify:
                    progression = 0
                    nb_jT = 0
                    nb_ops = 0
                    if p != None:
                        for o in ops:
                            try:
                                v = get_period_values(periode, o.m_tache_plannification + "_")
                                if len(v) > 0:
                                    if int(v[0]) == int(p):
                                        progression += o.progression()
                                    nb_ops += 1
                            except:
                                pass
                        if nb_ops != 0:
                            mrd_t[i_t][j_t] = round(progression / nb_ops, 2)
                        j_t += 1
                i_t += 1
            prs = list()
            j = 0
            for t in mrd_t:
                tmp = ""
                for s in t:
                    tmp += str(s) + "#"
                prs.append(tmp)
        else:
            prs = list()
            tops = institution.top_entity().lines()
            for t in tops:
                result = list()
                operations = t.operations()
                nb_x = len(institution.default_period.decoup_slip()) * len(
                    institution.default_subperiod.decoup_desc_slip())
                if institution.default_period.m_logic_type == 3:
                    chronogrs = ["0_9_9_9_9_", "9_0_9_9_9_", "9_9_0_9_9_", "9_9_9_0_9_", "9_9_9_9_0_"]
                    year = request.GET.get("year")
                    TP1 = subperiods_value(institution.default_period, int(year))
                    TP2 = list()
                    dic_ops = dict()
                    for t in TP1:
                        a = transform_to_plannify(t)
                        TP2.append(a)
                        for c in chronogrs:
                            dic_ops[a + "-" + c] = {
                                "progress": 0,
                                "nb_ops": 0
                            }
                    # operations = operations.filter(m_tache_plannification__in=TP2)

                    for o in operations:
                        dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation][
                            "progress"] += o.progression()
                        dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation]["nb_ops"] += 1
                    for a in TP2:
                        for c in chronogrs:
                            if dic_ops[a + "-" + c]["nb_ops"] > 0:
                                tmp = str(dic_ops[a + "-" + c]["progress"] / dic_ops[a + "-" + c]["nb_ops"])
                            else:
                                tmp = "0"
                            result.append(tmp)
                    prs.append("#".join(result))
    # progression /= len(taches)
    data = {
        'plannify': plannify,
        'result': result,
        'progression': round(progression, 2)
    }
    if plannify == "#":
        data['progressions'] = prs
    return JsonResponse(data)


def ajax_calcul_date(request):
    plannify = request.GET.get('plannify')
    periode = Periode.objects.get(id=int(request.GET.get("periode")))
    tmp_val = get_period_values(periode, plannify + "_")[0]

    ta1 = datetime.date(int(tmp_val[:4]), int(tmp_val[4:6]), int(tmp_val[6:8]))
    ta2 = datetime.date(int(tmp_val[8:12]), int(tmp_val[12:14]), int(tmp_val[14:16]))
    ta3 = ta2
    test = ta2.isoweekday()
    if test > 1:
        ta2 -= datetime.timedelta(test - 1)
        ta3 += datetime.timedelta(7 - test)
    test_dates = list()
    for i in range(5):
        test_dates.append("Du " + str(ta2) + " Au " + str(ta3))
        ta2 += datetime.timedelta(7)
        ta3 += datetime.timedelta(7)
    bumps1 = [int(tmp_val[:4]), int(tmp_val[4:6]) - 1, int(tmp_val[6:8])]
    bumps2 = [int(tmp_val[8:12]), int(tmp_val[12:14]) - 1, int(tmp_val[14:16])]
    data = {
        'tmp_val': tmp_val,
        'test_dates': test_dates,
        'ta1': str(ta2),
        'result': tmp_val
    }
    return JsonResponse(data)


def delete_mul(request):
    entities = request.POST["multi_values"]
    hierachy = int(request.POST['hierachy'])
    g_v = request.POST['g_v']
    try:
        g_v_2 = request.POST['g_v_2']
    except:
        g_v_2 = None

    from .utilities2 import delete_entities, delete_operations
    if g_v != "o":
        delete_entities(entities)
        response = '/gestionnaire/' + str(hierachy)
        if g_v_2 is not None:
            response = '/gestionnaire/' + str(hierachy - 1)
            response += '/' + str(g_v_2) + '/'
    else:
        a = delete_operations(entities)
        response = '/taches/' + str(a.id) + '/'
    return redirect(response)


@login_required(login_url='/log_account')
def data_form(request, nature=-1, elt_id=0):
    template = "webpages/ctn_bpf/data_form.html"
    context = basis(request)
    nature = int(nature)
    context["nature"] = nature
    context["elt_id"] = elt_id
    periode_ok = PeriodeOk.objects.all().distinct('annee')
    context['periode_ok'] = periode_ok
    if nature != -1:
        template = "webpages/ctn_bpf/data_form_plus.html"
        dataform = DataSet.objects.filter(id=nature, m_institution=context["actual_institution"]).first()
        context["element"] = dataform
        if dataform != None:
            next_nature = nature + 1
            lines = dataform.dS_values()
        else:
            lines = list()
    else:
        next_nature = 1
        lines = DataSet.objects.filter(m_institution=context["actual_institution"])
        try:
            if context["permissions"] == 0 or context["no_simple_user"] == False:
                # role
                role = request.user.personnel.get_function(context["actual_institution"].id).m_role
                lines = lines.filter(m_roles=role)
        except:
            pass
    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context["g_v"] = "dSV"
    context["menu"] = "h"
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    return render(request, template, context)


def error_404(request, exception):
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/errors.html"
        context = basis(request)
    else:
        template = "webpages/ctn_bpf/errors_zero.html"
        context = dict()
    context['error'] = 404
    context['exception'] = exception
    return render(request, template, context)


def error_500(request):
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/errors.html"
        context = basis(request)
    else:
        template = "webpages/ctn_bpf/errors_zero.html"
        context = dict()
    return render(request, template, context)


def extra(request, name=""):
    context = basis(request)
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/extra.html"
        files = OperaFile.objects.filter(m_institution=context["actual_institution"]).select_related("m_institution")
        bool(files)
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None
    else:
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None
        template = "webpages/ctn_bpf/extra.html"
        files = OperaFile.objects.filter(is_public=1)
        bool(files)
    if name != None:
        tmp1 = files.filter(m_name__contains=name)
        tmp2 = list()  # files.filter(m_file__url__contains=name)
        files = list()
        for t in tmp1:
            files.append(t)
        for t in tmp2:
            files.append(t)
    paginator_o = Paginator(files, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context["g_v"] = "ex"
    context["menu"] = "x"
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def get_progressions(request):
    list_ids = request.GET.get('list_ids').split("#")[:-1]
    list_ids = [int(i) for i in list_ids]
    entities = Entity.objects.filter(id__in=list_ids)

    result = list()
    data_ids = list()
    type_Progression = request.GET.get("type_progression")
    if type_Progression == "P":
        for i in entities:
            result.append(i.progression())
            data_ids.append(str(i.id))
    elif type_Progression == "T":
        for i in entities:
            result.append(i.technical_progression())
            data_ids.append(str(i.id))
    elif type_Progression == "F":
        for i in entities:
            result.append(i.finan_progression())
            data_ids.append(str(i.id))
    data = {
        'result': result,
        'ids': data_ids
    }
    return JsonResponse(data, safe=False)


def get_indi_data(request):
    data_id = request.GET.get('indi_id')
    ind = Indicateur.objects.get(id=int(data_id))
    nums = list()
    ids = list()
    for i in ind.indi_numerateur():
        nums.append(str(i))
        ids.append(i.id)
    denums = list()
    for i in ind.indi_denum():
        denums.append(str(i))

    period = ind.m_periodicite
    sub_period = ind.m_sub_periodicite
    cibles = ind.m_cibles
    data = {
        'nom': str(ind),
        'nums': nums,
        'denums': denums,
        'ids': ids
    }
    return JsonResponse(data, safe=False)

from django.shortcuts import redirect
from django.contrib import messages  # For displaying user messages

def consult_oper(request):
    if request.method != "POST":
        messages.error(request, "Invalid request method. Please use POST.")
        return redirect("/error_page/")  # Redirect to operations page on error

    try:
        operation_id = int(request.POST["operation"])
        operation = Operation.objects.get(pk=operation_id)  # Use primary key (pk) for safety

        observations = request.POST["observations"]
        file = request.FILES.get('file', None)  # Handle optional file

        oC = OperationConsulted(m_operation=operation, m_observations=observations, file=file)
        oC.save()

        save_avis = HistoricRACI.objects.create(
            m_commentaire=observations,  # Use 'observations' for consistency
            m_role="C",
            m_operation_id=operation_id,
            file=file
        )
        save_avis.save()

        messages.success(request, "Operation successfully consulted and rapport created!")

    except (ValueError, Operation.DoesNotExist):
        messages.error(request, "Invalid operation ID or operation not found.")

    return redirect("/operations/")



@login_required(login_url='/log_account')
def personnels_raci(request, name=None):
    template = "webpages/ctn_bpf/persos_raci.html"
    context = basis(request)
    context['g_vs'] = 'p2'
    context['g_v'] = 'p2_RACI'

    context['searches'] = []
    context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
        actual_institution=context['actual_institution']).select_related('actual_institution')})
    context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
        institution=context['actual_institution']).select_related('institution')})

    ents = list()
    ieS = list(context['actual_institution'].get_entities())
    bool(ieS)
    # n = ieS.count()
    j = 0

    for i in ieS[:-2]:
        if True:
            tmp = {
                "hierachie": i.m_hierachie,
                "label": str(i),
                'entities': list()
            }
            if j == 0:
                tmp["entities"] = ieS[0].m_entity_type.lines()
            ents.append(tmp)
            j += 1
        else:
            pass
    context['ents'] = ents

    # context['matieres'] = ies[-2].lines()

    elements = list()
    tmps = Personnel.objects.filter()
    for t in tmps:
        if context['actual_institution'] in t.all_institutions():
            elements.append(t)

    akas = list()
    tmp_perso = Personnel.objects.filter()
    # pFs = Personnel_Function.objects.filter(m_institution=context["actual_institution"]).values("m_personnel")

    if True:
        for t in tmp_perso:
            if context['actual_institution'] in t.all_institutions():
                atmp = {
                    'id': t.id,
                    'prenom': t.prenom,
                    'nom': t.nom,
                    'photo': t.photo,
                    'get_function': t.get_function(context['actual_institution'].id),
                    'RACI_entities': t.RACI_entities()
                }
                akas.append(atmp)
            # lines2.add(t)
    else:
        context['lines'] = lis_peros

    if name != None:
        name = name.lower()
        tmps = akas
        akas = list()
        context['lines'] = list()
        for tt in tmps:
            ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
            for t in ta:
                if name in str(t):
                    akas.append(tt)
                    break

    paginator_o = Paginator(akas, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date

    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def data_sets(request, indi_id=0):
    context = basis(request)
    # data_set = DataSet.objects.get(id=indi_id)
    # context['data_set']=data_set
    periode = Periode.objects.all()
    context['periode'] = periode
    indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
    template = "webpages/ctn_bpf/data_sets.html"
    context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
    context["indicateurs"] = indicateurs
    context["menu"] = "h"
    # if indi_id != 0:
    # 	dataset = DataSet.objects.get(id=int(indi_id))
    # 	context["dataset"] = dataset
    """
	context["indicateur"] = indicateur
	context["element"]= indicateur.m_enti
	context["indi_id"] = indi_id
	"""
    return render(request, template, context)


def data_sets_design(request, dS_id):
    data_set = DataSet.objects.get(id=dS_id)
    template = "webpages/ctn_bpf/data_sets_design.html"
    context = basis(request)
    context["dataset"] = data_set
    context["design"] = 1
    return render(request, template, context)


# def ajax_form(request):
#     dF = DataSet.objects.get(id=int(request.GET.get("id_dataset")))
#     # dF = indicateur.dataset()
#     structures = list()
#     structure_id = list()
#     for s in dF.m_structures.filter():
#         structures.append(str(s))
#         structure_id.append(s.id)
#     data = {
#         'periode': dF.periodicite_id,
#         'subperiode': dF.m_sub_periode,
#         'structures': structures,
#         'structures_id': structure_id,
#         'form': dF.m_formulaire
#     }
#     return JsonResponse(data, safe=False)


def ajax_hiera_struc(request):
    institution = request.GET.get("institution")
    logic_strc = request.GET.get("logic_strc")
    m_institution = Institution.objects.get(id=int(institution))
    elt_logic = ""
    for e in logic_strc.split("|")[:-1]:
        a = e.split("#")
        if len(a) > 1:
            elt_logic += a[1] + "|"
        else:
            elt_logic += a[0] + "|"
    structures = Structure.objects.filter(institution=m_institution, values_hierachy__contains=elt_logic)
    data = {
        'ids': list(),
        'names': list()
    }
    data["nb_s"] = elt_logic
    for s in structures:
        data["ids"].append(s.id)
        data["names"].append(str(s))
    return JsonResponse(data, safe=False)


def ajax_RACI_user(request):
    type_RACI = request.GET.get("type_RACI")
    perso = request.GET.get("perso")
    institution = request.GET.get("institution")
    entity_filter = request.GET.get("entity_filter")

    data = dict()
    if type_RACI == "1":
        personnel = Personnel.objects.get(id=int(perso))
        rEL = list()
        data["elts"] = list()
        data["elts_id"] = list()
        data["elts_hierachy"] = list()

        if entity_filter not in ["0", None]:
            entity_filter = int(entity_filter)
            pR = PersonnelRACI.objects.get(id=entity_filter)
            data["elt_actu_id"] = str(pR.m_entity)
            data["elt_actu"] = pR.m_entity.id
        else:
            data["elt_actu_id"] = "#"
            data["elt_actu"] = "#"

        for p in personnel.get_function(institution).m_role.entity_levels():
            rEL.append(str(p))
            data["elts_hierachy"].append(p.m_hierachie)
            tmp_elt = list()
            tmp_id = list()
            for p2 in p.m_entity_type.lines():
                tmp_elt.append(str(p2))
                tmp_id.append(int(p2.id))
            data["elts"].append(tmp_elt)
            data["elts_id"].append(tmp_id)
        data["roles"] = rEL
    # data["test_rEL"] = rEL
    return JsonResponse(data, safe=False)


def ajax_RACI_user_manage(request):
    menu = request.GET.get("menu")
    # entity = Entity.objects.get(id=int(request.GET.get("entity")))
    if menu == "o":
        tache = Tache.objects.get(id=int(request.GET.get("entity")))
        perRACI = tache.personnelRACI()
        data = {
            "responsable": perRACI["responsable"],
            "accounted": perRACI["accounted"],
            "consulted": perRACI["consulted"],
            "informed": perRACI["informed"],
            "test": ""
        }
        allis = ["responsable", "accounted", "consulted", "informed"]
        for s in tache.sup_hierachie():
            all_none = False
            perRACI = s.personnelRACI()
            for al in allis:
                data["test"] += str(perRACI[al]) + "#"
                if data[al] == [None]:
                    all_none = True
                    if perRACI[al] != [None]:
                        data[al] = perRACI[al][1].id
                if all_none == False:
                    break
    return JsonResponse(data, safe=False)


def assign_RACI(request):
    personnel = Personnel.objects.get(id=int(request.POST["perso_assign"]))
    values_assign = request.POST["values_assign"].split("$")
    try:
        operations_check = request.POST["operations_recursive"]
    except:
        operations_check = None
    for v in values_assign[:-1]:
        # entity = Entity.objects.get(id=int(v.split("#")[0]))
        entity = int(v.split("#")[0].replace("'", ""))
        entity = Entity.objects.get(id=entity)
        raci_role = v.split("#")[1]
        if "1" in raci_role:
            if operations_check != None:
                operations = entity.operations()
                rs = raci_role.split("|")
                for o in operations:
                    if rs[0] == "1":
                        o.personnel = personnel
                    if rs[1] == "1":
                        o.accountable = personnel
                    if rs[2] == "1":
                        o.consulted = personnel
                    if rs[3] == "1":
                        o.informed = personnel
                    o.save()
            pR = PersonnelRACI(m_personnel=personnel, m_entity=entity, m_roles=raci_role)

            pR.save()
    return redirect("/personnels_raci/")


def print_pdf(request):
    name_pdf = request.GET.get("name_pdf")
    html = request.GET.get("html")
    html = html.replace("<table", "<table border='1' width='100%' cellpadding='5px'")
    html = html.replace("<td", "<td width='100' ")
    html = html.replace("<th", "<th width='100' ")

    data = dict()

    class MyFPDF(FPDF, HTMLMixin):
        pass

    pdf = MyFPDF()
    pdf.add_page()
    pdf.write_html(html)
    pdf.output('html3.pdf', 'F')
    return JsonResponse(data, safe=False)


# @login_required(login_url='/log_account')
# def List(request):
#     template = "webpages/ctn_bpf/tache_non.html"
#     operation = Operation.objects.all()
#     count = Operation.objects.count()
#     context = basis(request)
#     context["operation"] = operation
#     context["count"] = count
#     return render(request, template, context)


# def taches_effectuee(request):
#     template = "webpages/ctn_bpf/tache_effectuee.html"
#     operation_detail = OperationDetails.objects.all()
#     context = basis(request)
#     context['operation_detail'] = operation_detail
#     return render(request, template, context)


def Avis(request, id):
    #  template="webpages/ctn_bpf/avis_raci.html"
    operation_historic = HistoricRACI.objects.all()
    operation = Operation.objects.get(id=id)
    context = basis(request)
    context['operation_historic'] = operation_historic
    operation_rapport = operation.get_operation_details_invalid().last()
    context["operation_rapport"] = operation_rapport
    try:
        operation = Operation.objects.get(id=id)
        context['operation'] = operation
    except Operation.DoesNotExist:
        context['error_message'] = ""
    return render(request, "webpages/ctn_bpf/avis_raci.html", context)


def recuperer_personnel(request):
    result = Personnel.objects.filter(id=request.POST.get('mail')).values('nom', 'prenom', 'tel').first()
    if result is not None:
        return JsonResponse(result)
    else:
        return JsonResponse({'error': 'Aucun enregistrement trouve'})


def design_form(request):
    context = basis(request)
    if request.method == "POST":
        form_name = request.POST['form_name']
        elements = request.POST.getlist('element')
        indicateurs = request.POST.getlist('indicateur')
        periode = request.POST['periode']
        sub_periode = request.POST['sub_periode']
        actual_institution = context['actual_institution'].id
        role = request.POST.getlist('role')
        structure = request.POST.getlist('structure')
        # print("role:",role)
        # print("structure:",structure)
        # print("indicateur:",indicateurs)
        dS = DataSet.objects.create(m_name=form_name, m_periode=periode, m_sub_periode=sub_periode,
                                    m_institution_id=actual_institution)

        dS.save()
        dS.m_indicateurs.set(indicateurs)
        dS.m_dataelements.set(elements)
        dS.m_roles.set(role)
        dS.m_indicateurs.set(indicateurs)
        dS.m_structures.set(structure)
        responsemndjn = "/data_sets/design/" + str(dS.id) + "/"
        return redirect(responsemndjn)


# def edit_dataset(request, id=0):
#     context = basis(request)
#     data_set = DataSet.objects.get(id=id)
#     context['data_set'] = data_set
#     indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
#     template = "webpages/ctn_bpf/data_sets_edit.html"
#     context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
#     context["indicateurs"] = indicateurs
#     context["menu"] = "h"
#     if id != 0:
#         dataset = DataSet.objects.get(id=int(id))
#         context["dataset"] = dataset

#     return render(request, template, context)


def count_operations(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    count = Operation.objects.filter(m_institution_id=actual_institution, etat="0").count()
    return JsonResponse({'count': count})


def count_tache_consulted(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    count_tache_consulted = Operation.objects.filter(perso=personnel_id, etat="0").count()
    return JsonResponse({'count_tache_consulted': count_tache_consulted})


def count_informed(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    count_informed = OperationDetails.objects.filter(request.user.personnel == personnel.id, etat="2").count()

    return JsonResponse({'count_informed': count_informed})


# def Avis_informed(request, id=0):
#     context = basis(request)
#     template = "webpages/ctn_bpf/avis_informed.html"
#     operation = Operation.objects.get(id=int(id))
#     context['operation'] = operation
#     operation_historic = HistoricRACI.objects.all()
#     context['operation_historic'] = operation_historic
#     operation_rapport = operation.get_operation_details_invalid().last()
#     context["operation_rapport"] = operation_rapport
#     return render(request, template, context)


# def tache_consulted(request):
#     context = basis(request)
#     atual_institution = context['actual_institution']
#     operation = Operation.objects.all()
#     context['operation'] = operation
#     template = "webpages/ctn_bpf/tache_consulted.html"
#     return render(request, template, context)


def edit_data(request, id):
    if request.method == "POST":
        nom_donnee = request.POST['nom_donne']
        data_eltype = request.POST['data_eltype']

        aggregation = request.POST['aggregation']
        comment = request.POST['comment']
        default_value = request.POST['default_value']
        nature_donne = request.POST['nature_donne']
        data_element = DataElement.objects.filter(pk=id)

        data_element.update(m_name=nom_donnee, m_value_type=data_eltype, m_aggregation_type=aggregation,
                            m_description=comment, m_default_value=default_value, m_domain_type=nature_donne)
        # save_data.update()
        return redirect('../dataelts')


# def count_persos(request):
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     perso = request.user.personnel.id

#     count_persos = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="2").count()
#     return JsonResponse({'count_persos': count_persos})


# def count_accountable(request):
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     perso = request.user.personnel.id
#     operation = Operation.objects.all()
#     m_operation_consulted = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="1").count()
#     return JsonResponse({'m_operation_consulted': m_operation_consulted})


def count_effectuee(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    operation = Operation.objects.all()
    count_effect = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="1").count()
    return JsonResponse({'count_effect': count_effect})


# -*- coding: utf-8 -*-
from asgiref.sync import sync_to_async

from django.http import FileResponse, HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import render, redirect, get_object_or_404
from django.core.paginator import Paginator
from django.contrib.auth import authenticate, login, logout

from django.core.mail import send_mail, send_mass_mail

from django.core.mail import EmailMessage, EmailMultiAlternatives
from django.core.cache import cache
from django.views.decorators.cache import cache_page

from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.db.models import ProtectedError
from django.contrib.auth.decorators import login_required

from .models import *
from .utilities import get_period_values, set_pv_tp, subperiods_value, transform_to_plannify
from .utilities2 import split_extras1
import os
import datetime


@login_required(login_url='/log_account')
def admin_institution(request):
    template = "webpages/ctn_bpf/institution_admin.html"
    context = {
        'edit': 0
    }
    return render(request, template, context)


@login_required(login_url='/log_account')
def contact(request):
    template = "webpages/ctn_bpf/contact.html"
    context = {
        'edit': 0
    }
    return render(request, template, context)


def edit_institution(request, institution_id):
    template = "webpages/ctn_bpf/institution_admin.html"
    context = {
        'edit': 1,
        'institution': Institution.objects.get(id=int(institution_id))
    }
    return render(request, template, context)


def save_edit_institution(request):
    nom = request.POST["nom"]
    code = request.POST["code"]
    try:
        file = request.FILES["file"]
    except:
        file = None

    insti_id = int(request.POST['insti_id'])
    institution = Institution.objects.get(id=insti_id)
    institution.sigle = code
    institution.nom = nom
    if file != None:
        institution.img = file
    institution.save()
    return redirect('/')


# def save_institution(request):
#     nom = request.POST["nom"]
#     url= request.POST['url']
#     response = redirect("/")
#     try:
#         code = request.POST["code"]
#     except:
#         code = nom
#     try:
#         image = request.FILES["file"]
#     except:
#         image = OperaFile.objects.filter(m_name="IDF").first().m_file  # Instituti Defaut FIle
#     try:
#         desc = request.POST['desc']
#     except:
#         desc = " "
#     try:
#         app_code = request.POST['app_code']
#     except:
#         app_code = "#"
#     # Informations Savers
#
#     owner = Owner.objects.filter(m_code=app_code).first()
#     if owner == None:
#         response = specific_log(request, 2)
#     else:
#         nb_institutions = owner.nb_institutions()
#         if (owner.m_bought == False and nb_institutions == 0) or (
#                 owner.m_bought == True and nb_institutions <= owner.m_type):
#             institution = Institution(sigle=code, nom=nom, img=image,url=url)
#             institution.owner = owner
#             institution.save()
#             owner.m_user.personnel.actual_institution = institution
#             owner.m_user.personnel.save()
#             try:
#                 check_mail = request.POST['check_mail']
#             except:
#                 check_mail = False
#             if check_mail == True:
#                 owner.m_mail_notified = True
#                 owner.save()
#             # owner.save()
#             if request.user.is_authenticated == False:
#                 user = owner.m_user
#                 login(request, user)
#
#             # tache hierachy modifier
#             entity = EntityType(m_nom="Projet")
#             entity.m_fields = "Nom du Projet|Objectif du Projet|"
#             entity.m_type_fields = "text|text|"
#             entity.m_fields_rapported = "Commentaires|"
#             entity.m_type_fields_rapp = "text|"
#             entity.save()
#             type_entity = InsitutionEntities(m_hierachie=0)
#             type_entity.m_entity_type = entity
#             type_entity.m_institution = institution
#             type_entity.save()
#
#             # Tache Launcher
#             entity = EntityType(m_nom="Tache")
#             entity.is_tache = True
#             entity.m_fields = "Nom de la Tache|Objectif de la Tache|"
#             entity.m_type_fields = "text|text|"
#             entity.m_fields_rapported = "Commentaires|"
#             entity.m_type_fields_rapp = "text|"
#             entity.save()
#             type_entity = InsitutionEntities(m_hierachie=1)
#             type_entity.m_entity_type = entity
#             type_entity.m_institution = institution
#             type_entity.save()
#
#
#             personnel = Personnel.objects.get(bd_user__id=request.user.id)
#             role = Role(nom="Administrateur " + str(institution), description="Supervise la Plateforme",
#                         actual_institution=institution, permissions=100)
#             role.save()
#             function = Personnel_Function(m_institution=institution, m_personnel=personnel, m_role=role)
#             function.save()
#             role = Role(
#                 nom=" " + str(
#                     institution),
#                 description="",
#                 actual_institution=institution, permissions=0)
#             role.save()
#
#             # Initialisation des Structures
#             structure = Structure(nom=institution.sigle, designation=institution.nom)
#             structure.institution = institution
#             structure.save()
#             pers_struc = Personnel_Structure(m_personnel=personnel, m_structure=structure)
#             pers_struc.save()
#
#             # Initialisation des Periodes
#             configurations_periodes = Periode.objects.filter(m_initial=True)
#             for p in configurations_periodes:
#                 per = Institution_Periodes(m_periode=p, m_institution=institution, m_default=True)
#                 per.save()
#             institution.default_period = configurations_periodes.last()
#             institution.default_subperiod = institution.default_period.sub_periods().first()
#             institution.save()
#         else:
#             request.session['too_much_ins'] = 1
#             response = redirect('/log_account/')
#     return response


def set_default_period(request, period=0, sub_period="#"):
    # r_institution = request.COOKIES['institution']
    r_institution = request.user.personnel.actual_institution
    if int(period) != 0:
        r_periode = Periode.objects.get(id=int(period))
        r_institution.default_period = r_periode
        r_institution.default_subperiod = r_periode.sub_periods().last()
    if sub_period != "#":
        r_sub_period = SubPeriode.objects.get(id=int(sub_period))
        r_institution.default_subperiod = r_sub_period
    r_institution.save()
    return redirect('/configurations/')


def authorized_institutions(request):
    if request.user.is_staff:
        institutions = Institution.objects.filter()
    else:
        institutions = [request.user.personnel.get_institution]
    return institutions


def basis(request):
    permissions = list()
    actual_institution = None
    animate = None
    animate2 = None
    context = dict()
    user = request.user
    try:
        if request.session['logged'] == 1:
            request.session['logged'] = 0
            animate = 0
    except:
        pass
    try:
        if request.session['new_rapport'] == 1:
            request.session['new_rapport'] = 0
            animate2 = 0
        elif request.session['new_rapport'] == 2:
            request.session['new_rapport'] = 0
            animate2 = 1
    except:
        pass

    if request != None and user.is_authenticated:
        actual_institution = user.personnel.actual_institution
        bool(actual_institution)

        programmes = list()  # request.user.personnel.get_programmes()
        nb_programmes = 0

        personnel = request.user.personnel
        bool(personnel)

        prenom = personnel.prenom
        nom = personnel.nom
        role = personnel.get_function(actual_institution.id)
        picture = personnel.photo
        functi = role
        entity_manage = None
        if actual_institution.owner != None and actual_institution.owner.m_user == request.user:
            permissions = 100
        elif functi == None:
            permissions = 10
        else:
            permissions = functi.m_role.permissions
            if functi.m_role.m_nature == "1":
                # enti = funxti
                eRACI = personnel.RACI_manage()
                if eRACI != None:
                    if eRACI[0] != None:
                        entity_manage = eRACI[0]
            elif permissions < 0:
                entity_manage = functi.m_entity
        context = {
            'actual_institution': actual_institution,
            'animate': animate,
            'animate2': animate2,
            'prenom': prenom,
            'role': role,
            'nom': nom,
            'picture': picture,
            'permissions': permissions,
            'programmes': programmes,
            'nb_programmes': nb_programmes,
            'entity_manage': entity_manage
        }
        if entity_manage != None:
            context["my_entities"] = personnel.RACI_list()
            context["no_simple_user"] = context["my_entities"] != []
            context["type_ents"] = entity_manage.m_type_entity
            context["hierachie_ent"] = entity_manage.m_type_entity.hierachie()

        context['default_struc_name'] = actual_institution.default_struc_name
        context['this_period'] = datetime.datetime.now()
        context['operations_name'] = actual_institution.operations_name
        context['insti_structures'] = actual_institution.structures()
        context['default_period'] = context['actual_institution'].default_period

        get_entities = actual_institution.get_entities()

        context['get_entities'] = get_entities
        context['get_entities2'] = list(get_entities)[:-1]

        top_entity = context['actual_institution'].top_entity()
        bool(top_entity)
        context['top_entity'] = top_entity

        last_entity = context['actual_institution'].last_entity()
        bool(last_entity)
        context['last_entity'] = last_entity

        if actual_institution.finan_options != None:
            context["finances"] = actual_institution.finances()
            context["real_finances"] = 0
            context["finan_options"] = actual_institution.finan_options
            context["depenses_eff"] = actual_institution.depenses_eff

        tmp_week = int(max(1, context['this_period'].day / 7))
        if context['this_period'].day > context['this_period'].isoweekday() * tmp_week:
            tmp_week += 1
        context['this_week'] = tmp_week
        context['operations_modules'] = Aggregate.objects.filter(
            m_institution__id=context['actual_institution'].id).select_related('m_institution').first()


    else:
        actual_institution = None
        context["institution"] = None
    return context


def agenda(request):
    template = "webpages/ctn_bpf/agenda_week.html"
    context = basis(request)
    return render(request, template, context)


def log_account(request):
    template = "webpages/ctn_bpf/login.html"
    context = dict()
    try:
        if request.session['too_much_ins'] == 1:
            context['too_much_ins'] = True
            request.session['too_much_ins'] = None
    except:
        pass
    try:
        if request.session['new_user'] == 1:
            # request.session['new_user'] = 0
            animate = 1
            context['new_user'] = animate
            request.session['new_user'] = 0
    except:
        pass
    try:
        context['bad_log'] = (request.session['bad_log'] != None and request.session['try_log'] != None)
        request.session['try_log'] = None
    except:
        pass
    return render(request, template, context)


# @cache_page(60 * 15)
def index_log(request, nature):
    if True:
        context = basis(request)
        operation_m = Operation.objects.all()
        context['operation_m'] = operation_m
        operation_details = OperationDetails.objects.all()
        context['operation_details'] = operation_details
        context['menu'] = 'i'
        elements = list()
        top_entity = context['top_entity']

        tops = top_entity.lines()
        bool(tops)

        context['lvl'] = nature

        if nature == -1 and context['permissions'] >= 0:
            nature = 0

        if context['permissions'] == 0:
            nature = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
                'm_institution').last().m_hierachie
            bool(nature)

        context['nature'] = nature
        context['next_nature'] = nature + 1
        # If any Tops have been created, redirection

        if tops.first() == None:
            template = "webpages/ctn_bpf/index_empty.html"
            context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                'actual_institution']).select_related('m_institution').first().m_entity_type
            tmp_lines = list()
        else:
            if context["entity_manage"] != None:
                hierachy = context["entity_manage"].m_type_entity.hierachie()
                hierachi_id = context["entity_manage"].id
                return redirect("gestionnaire/" + str(hierachy) + "/" + str(hierachi_id) + "/")
            else:
                template = "webpages/ctn_bpf/operations_home.html"
            nb_elements = 0
            for t in tops:
                elements.append({'entity': t, 'values': t.levels(nature, context['actual_institution'])})

            context['elements'] = elements
            context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                'actual_institution']).select_related('m_institution').first()
            if context['type_entity'] != None:
                context["type_entity"] = context["type_entity"].m_entity_type
                tmp_lines = context['type_entity'].lines()
            else:
                tmp_lines = list()
        # Moyenne de Progression
        nb_elt = 0
        progress = 0
        """
		for elt in tmp_lines:
			progress += elt.progression()
			nb_elt += 1
		if nb_elt > 0:
			progress /= nb_elt
		"""

        progress = context['actual_institution'].progression()
        context['actual_progression'] = round(progress, 2)
        paginator_o = Paginator(elements, 6)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range

    return render(request, template, context)


def index(request, nature=-1):
    if request.user.is_authenticated:

        return index_log(request, nature)
    else:
        context = dict()
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None

        template = "webpages/ctn_bpf/presentation.html"
        # context['temoignages'] = Temoignage.objects.filter()[:3]
        context['institution_count'] = Institution.objects.count()
        context['projet_count'] = 0
        tmp1 = InsitutionEntities.objects.filter(m_hierachie=1)
        for t in tmp1:
            context['projet_count'] += t.m_entity_type.lines().count()
        context['operations_count'] = Operation.objects.count()
        context['personnel_count'] = Personnel.objects.count()
    try:
        if request.session['too_much_ins'] == 1:
            context['too_much_ins'] = True
        # request.session['too_much_ins'] = None
    except:
        pass
    try:
        if request.session['assistance'] == 1:
            context['assist_send'] = True
            request.session['assistance'] = None
    except:
        pass
    return render(request, template, context)


def bad_auth(request):
    template = "webpages/ctn_bpf/bad_auth.html"
    context = {
        'error': "Erreur au niveau de l'Adresse/Mot de Passe"
    }
    return render(request, template, context)


def main(request, menu_main=0):
    template = "webpages/ctn_bpf/main.html"
    if menu_main == 1:
        template = "webpages/ctn_bpf/presentation_framework.html"
    elif menu_main == 2:
        template = "webpages/ctn_bpf/presentation_documentation.html"
    docus = OperaFile.objects.filter(m_category="DOC")
    apps = OperaApp.objects.filter()
    context = {
        "docus": docus,
        "apps": apps
    }
    return render(request, template, context)


def gestionnaire_search(request):
    generator = request.POST['generator']
    name = request.POST['search']
    if generator == '0':
        hierachy = int(request.POST['hierachy'])
        gest = int(request.POST['gest'])
        response = gestionnaire(request, hierachy, gest, name)
    elif generator == 'o':
        gest = int(request.POST['gest'])
        response = ges_taches(request, gest, None, name)
    elif generator == 's':
        response = structures(request, name)
    elif generator == 'r':
        response = roles(request)
    elif generator == 'p':
        response = personnels(request, name)
    elif generator == 'i2':
        hierachy = int(request.POST['hierachy'])
        gest = int(request.POST['gest'])
        response = evaluer(request, hierachy, gest, name)
    elif generator == "ex":
        response = extra(request, name)
    elif generator == "dSV":
        pass
    return response


# @cache_page(60 * 15)
# @login_required(login_url='/log_account')
# def gestionnaire(request, gest_val, gest_id=0, name=None, structure=None, periode=None, enums="#"):
#     tmp_gest_val = gest_val
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     bool(actual_institution)

#     context['base_img_val'] = context['actual_institution'].img.url

#     if int(gest_val) == -1:
#         gest_val = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
#             'm_institution').last().m_hierachie
#         bool(gest_val)
#         tmp_gest_val = gest_val
#     try:
#         entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,
#                                                    m_institution=actual_institution).select_related(
#             'm_institution').first().m_entity_type
#     except:
#         entity = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
#             'm_institution').last().m_entity_type

#     is_tache = False
#     context['is_sub_tache'] = False
#     context['detail_g_v'] = False
#     context['sup_hierachy'] = list()
#     if gest_id != 0:
#         # gest_val = str(int(gest_val) + 1)
#         # entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,m_institution=context['actual_institution']).first().m_entity_type
#         sup_entity = Entity.objects.filter(id=gest_id).first()
#         if sup_entity != None:
#             lines = sup_entity.sub_entities()
#         else:
#             lines = list()
#         tmp_gest_val = str(int(gest_val) + 1)
#         sub_type = InsitutionEntities.objects.filter(m_hierachie=tmp_gest_val,
#                                                      m_institution=context['actual_institution']).select_related(
#             'm_institution').first()

#         if context["permissions"] <= 0 and sup_entity in context["my_entities"]:
#             context["autoE"] = 1
#         elif context["permissions"] <= 0:
#             for t in sup_entity.sup_hierachie():
#                 if t in context["my_entities"]:
#                     context["autoE"] = 1
#                     break
#         if sub_type != None:  # Ce n'est pas une tache
#             sub_type = sub_type.m_entity_type
#             fields = sub_type.fields()
#             context['is_sub_tache'] = sub_type.is_tache
#             context['sub_entity'] = sub_type
#             context['base_val'] = sup_entity
#             context['sub_entities'] = sup_entity.sub_entities()
#             context['gest_id'] = gest_id
#             context['objects_field'] = sub_type.objects_field()
#             context['calculates_field'] = sub_type.calculates_field()
#             if sup_entity != None:
#                 if sup_entity.m_type_entity.is_pic_represented == True and sup_entity.m_pic_represented != None:
#                     try:
#                         context['base_img_val'] = sup_entity.m_pic_represented.url
#                     except:
#                         pass
#             actu_entity = sub_type
#         else:
#             is_tache = True
#             fields = list()
#             actu_entity = entity
#         context['detail_g_v'] = True
#     else:
#         actu_entity = entity
#         enmPT = actu_entity.enum_fields()['result']
#         """
# 		test_PT = dict()
# 		for e in enmPT:
# 			test_PT[e['name']] = e['lines']
# 		"""
#         lines = entity.lines()
#         is_tache = entity.is_tache
#         fields = entity.fields()
#         context['objects_field'] = entity.objects_field()
#         context['calculates_field'] = entity.calculates_field()

#     if name != None:
#         tmp = list()
#         for l in lines:
#             if name in l.get_name():
#                 tmp.append(l)
#         lines = tmp

#     if structure != None:
#         tmp = list()
#         for l in lines:
#             if l.structure == structure:
#                 tmp.append(l)
#         lines = tmp

#     if periode != None:
#         tmp = list()
#         for l in lines:
#             if periode in l.plannification():
#                 tmp.append(l)
#         lines = tmp

#     context['is_tache'] = is_tache
#     context['hierachy'] = int(tmp_gest_val)
#     context['next_hierachy'] = int(tmp_gest_val) + 1
#     context['gest_val'] = int(gest_val)
#     context['entity'] = entity
#     context['actu_entity'] = actu_entity
#     context['sup_zone'] = entity.sup_entity(actual_institution.id)
#     context['fields'] = fields
#     # context['lines'] = lines
#     context['menu'] = 'g'
#     paginator_o = Paginator(list(lines), 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range

#     if int(tmp_gest_val) > 0 and gest_id != 0:
#         context['sup_hierachy'] = sup_entity.sup_hierachie()

#     if (int(tmp_gest_val) - 1 > 0) and InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
#                                                                          m_institution=context[
#                                                                              'actual_institution']).select_related(
#             'm_institution').first() == None:
#         context['none_search'] = True
#     else:
#         context['first_sup_search'] = True

#     if tmp_gest_val == '0' and entity.m_enum_values in ["", None]:
#         context['none_search'] = True
#     context['searches'] = list(InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
#                                                                  m_institution=context[
#                                                                      'actual_institution']).select_related(
#         'm_institution'))
#     """
# 	if is_tache or context['is_sub_tache']:
# 		context['searches'].append({'label':'Structure','code':'s','values':context['structures']})
# 	"""
#     try:
#         if context['base_val'] != None:
#             taches = list()  # context['base_val'].taches()
#             struc = set()
#             for t in taches:
#                 struc.add(t.structure)

#             context['structures_not_null'] = struc
#     except:
#         pass
#     try:

#         if context["entity_manage"] != None:
#             context["not_add"] = 1
#             entityd = Entity.objects.get(id=context['base_val'].id)
#             if entityd in context["my_entities"]:

#                 if context["role"].m_role.permissions >= 0:
#                     context["permissions"] = 0
#                 if context["permissions"] >= 0:
#                     request.session["permissions_valider"] = True
#             else:
#                 if request.session["permissions_valider"] == True:
#                     pass  # context["permissions"] = -100
#     except:
#         pass
#     if context['permissions'] < 0:
#         template = "webpages/ctn_bpf/entities_simple_user.html"
#         try:
#             if context['base_val'].id == context['entity_manage'].id:
#                 context["auto_simple"] = 1
#         except:
#             pass
#     else:
#         if is_tache or context['is_sub_tache'] == True:
#             template = "webpages/ctn_bpf/taches.html"
#             context['structures'] = Structure.objects.filter(institution=context['actual_institution']).select_related(
#                 'institution')
#         else:
#             template = "webpages/ctn_bpf/entities.html"

#     if enums != "#":
#         context['da_enums'] = enums
#     if is_tache and gest_id != 0:
#         response = redirect('/taches/' + str(gest_id) + '/')
#     else:
#         response = render(request, template, context)
#     return response


@login_required(login_url='/log_account')
def messengers(request):
    context = basis(request)
    template = "webpages/ctn_bpf/messengers.html"
    return render(request, template, context)


# @cache_page(60 * 15)
def ges_taches(request, tache_id, arg_period=None, search=None):
    context = basis(request)
    base_val = Tache.objects.get(id=int(tache_id))
    lines = Operation.objects.filter(tache=base_val).select_related('tache')
    lines_tache = lines
    context['sup_hierachy'] = base_val.sup_hierachie()

    if search != None:
        tmp = lines
        lines = list()
        for l in tmp:
            if search in str(l):
                lines.append(l)
    context['arg_period'] = arg_period
    if arg_period != None:
        periodes = base_val.plan_months()
        prd = periodes[(arg_period - 1)]
        context['periodes'] = prd
        lines = lines.filter(m_tache_plannification=prd)
        context['test'] = list()
        actual_institution = context['actual_institution']
        week = list()
        for t in actual_institution.default_subperiod.decoup_desc_slip2():
            week.append({'per': t, 'val': list()})
        for l in lines:
            ps = l.periodes()
            t_ps = ps.desc_split()
            i_p = 0
            for t in t_ps:
                if int(t) == 0:
                    week[i_p]['val'].append(l)
                    break
                i_p += 1
        context['test'] = week

    context['none_search'] = True
    context['entity'] = base_val.m_type_entity
    context['base_val'] = base_val
    context['sub_entity'] = context['actual_institution'].operations_name
    tmp_perso = Personnel.objects.filter()
    context['personnels'] = set()
    for t in tmp_perso:
        if context['actual_institution'] in t.all_institutions():
            context['personnels'].add(t)
    context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
        'actual_institution')
    plan = base_val.plannification()
    if plan != None:
        context['searches'] = [{'label': '', 'values': base_val.plannification().table(), 'not_filter': True}]
    else:
        context['searches'] = [{'label': '', 'values': ["Aucune Valeur"], 'not_filter': True}]
    context['g_v'] = 'o'
    context['menu'] = 'go'
    base_valE = Entity.objects.get(id=base_val.id)

    if context["permissions"] <= 0 and base_valE in context["my_entities"]:
        context["autoE"] = 1
    elif context["permissions"] <= 0:
        for t in base_val.sup_hierachie():
            if t in context["my_entities"]:
                context["autoE"] = 1
                break

    if context['permissions'] < 0:
        template = "webpages/ctn_bpf/operations_simple_user.html"
        if context['base_val'].id == context['entity_manage'].id:
            context["auto_simple"] = 1
            lines = lines_tache
    else:
        if arg_period is None:
            template = "webpages/ctn_bpf/operations.html"
        else:
            template = "webpages/ctn_bpf/operations_periodes.html"

    paginator_o = Paginator(lines, 12)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    context['lines'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    # context['roles_RACI'] =
    try:
        if request.session["permissions_valider"] == True:
            context["permissions"] = 0
            context["not_add"] = 1
    except:
        pass
    return render(request, template, context)


def structure_hie(request):
    return structures(request, None, 1)

#
# def structures(request, name=None, hierachie=None):
#     template = "webpages/ctn_bpf/structure.html"
#     context = basis(request)
#     context['entity'] = str(context['actual_institution'].default_struc_name)
#     context['lines'] = Structure.objects.filter(institution=context['actual_institution']).select_related('institution')
#     if name != None:
#         context['lines'] = context['lines'].filter(nom__contains=name)
#     context['fields'] = ['Logo', 'Nom',
#                          '',
#                          'Responsable', 'Total : ' + str(context['actual_institution'].last_entity())]
#     context['menu'] = 's'
#     context['personnels'] = Personnel.objects.filter(actual_institution=context['actual_institution']).select_related(
#         'actual_institution')
#     context['g_v'] = 's'
#     context['none_search'] = True
#     if hierachie != None:
#         stH = context["actual_institution"].Structure_Hierachy()
#         vals = ""
#         for s2 in stH:
#             s3 = s2.m_levels_fields.split("|")[:-1]
#             for s in s3:
#                 vals += str(request.POST[s]) + "|"
#         tmp = vals.split("#")
#         re = ""
#         for tm in tmp:
#             re += tm.split("|")[0] + "|"
#         vals = re
#         context['vals'] = vals
#         context['lines'] = context['lines'].filter(values_hierachy__contains=vals)
#         context["stH"] = stH[0].m_levels_fields
#     return render(request, template, context)


def structure_details(request, structure_id=0):
    template = "webpages/ctn_bpf/structure_details.html"
    context = basis(request)
    structure = Structure.objects.get(id=int(structure_id))
    entity = context['actual_institution'].last_entity()
    lines = Tache.objects.filter(structure=structure).select_related('structure')

    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    fields = entity.fields()

    context['structure'] = structure
    context['base_val'] = structure
    # context['gest_id']=gest_id
    context['entity'] = entity
    context['sub_entity'] = entity
    context['objects_field'] = entity.objects_field()
    context['fields'] = fields
    context['is_tache'] = True
    return render(request, template, context)


def users_simples(request, search=None):
    template = "webpages/ctn_bpf/roles.html"
    fields_personnel = ['', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', '']
    fields_roles = ['Role', 'Description', 'Entite']
    personnel = Personnel.objects.filter()
    context = basis(request)
    roles = Role.objects.filter(actual_institution=context['actual_institution'], is_simple_user=1).select_related(
        'actual_institution')

    if search != None:
        roles = roles.filter(nom__contains=search)
    context['entity'] = 'Utilisateur Simple'
    context['fields1'] = fields_personnel
    context['personnel'] = personnel
    context['fields'] = fields_roles
    context['lines'] = roles
    context['g_v'] = 'r'
    context['g_vs'] = 'u2'
    return render(request, template, context)


def personnels(request, name=None, lis_peros=None):
    template = "webpages/ctn_bpf/roles.html"
    context = basis(request)
    context['entity'] = 'Personnel'
    context['fields'] = ['', 'Nom', 'Prenom', 'Telephone', 'Email', 'Fonction', 'Structures']
    context['lines'] = list()
    lines2 = set()
    tmp_perso = Personnel.objects.filter()
    if lis_peros == None:
        for t in tmp_perso:
            if context['actual_institution'] in t.all_institutions():
                atmp = {
                    'id': t.id,
                    'photo': t.photo,
                    'prenom': t.prenom,
                    'nom': t.nom,
                    'tel': t.tel,
                    'mail': t.mail,
                    'get_function': t.get_function(context['actual_institution'].id),
                    'get_structure': t.get_structure(context['actual_institution'].id)
                }
                context['lines'].append(atmp)
                lines2.add(t)
    else:
        context['lines'] = lis_peros
    # context['lines'] = Personnel.objects.filter(actual_institution=context['actual_institution'])
    if name != None:
        name = name.lower()
        tmps = context['lines']
        context['lines'] = list()
        for tt in tmps:
            ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
            for t in ta:
                if name in str(t):
                    context['lines'].append(tt)
                    break
    paginator_o = Paginator(context['lines'], 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)

    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    context['menu'] = 'g'
    context['g_v'] = 'p2'
    context['g_vs'] = 'p2'
    context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
        'actual_institution')
    context['searches'] = []
    context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
        actual_institution=context['actual_institution']).select_related('actual_institution')})
    context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
        institution=context['actual_institution']).select_related('institution')})
    context['functions'] = list()
    context['structures'] = list()
    for p in lines2:
        context['functions'].append(p.get_function(context['actual_institution'].id))
        context['structures'].append(p.get_structure(context['actual_institution']))
    try:
        if request.session['perso_saved'] > 0:
            context['perso_saved'] = True
            tmp_user = Personnel.objects.get(id=request.session['perso_saved'])
            context['perso_get'] = tmp_user
            request.session['perso_saved'] = None
    except:
        pass
    return render(request, template, context)


# def personnel_id(request, perso_id):
#     context = basis(request)
#     template = "webpages/ctn_bpf/profile.html"
#     personnel = Personnel.objects.get(id=perso_id)
#     context["personnel"] = personnel
#     context["prenom"] = personnel.prenom
#     context["nom"] = personnel.nom
#     context["role"] = personnel.get_function(context["actual_institution"].id)
#     return render(request, template, context)


"""
def roles(request):
	template = "webpages/ctn_bpf/personnel_roles.html"
	context = basis(request)
	context['lines'] = Role.objects.filter(institution=context['actual_institution'])
	context['menu'] = 'g'
	return render(request,template,context)
"""


def filter_perso(request, structure_id=0, role_id=0):
    if structure_id == 0:
        structure = request.POST["Structure"]
        tds = structure
        if str(structure) != '0':
            structure = Structure.objects.get(id=int(structure))
    else:
        structure = Structure.objects.get(id=structure_id)

    if role_id == 0:
        role = int(request.POST["Fonction"])
        if str(role) != '0':
            role = Role.objects.get(id=role)
    else:
        role = Role.objects.get(id=role_id)
    personnel = Personnel.objects.filter()
    context = basis(request)
    result = list()
    if structure != '0':
        for p in personnel:
            if p.get_structure() != None and p.get_structure().m_structure == structure:
                result.append(p)
    if role != '0':

        if structure == '0':
            tmp = personnel
        else:
            tmp = result
        result = list()
        for p in tmp:

            if p.get_function() != None and p.get_function().m_role == role:
                result.append(p)
    return personnels(request, None, result)


def gestionnaire_id(request, gest_val, gest_id):
    pass


# def log(request, out=False):
#     if out == False:
#         response = "/log_account/"
#         result = False
#         try:
#             request.session['bad_log'] += 1
#             if request.session['bad_log'] > 0:
#                 response = "/bad_auth/"
#         except:
#             request.session['bad_log'] = 1
#             request.session['try_log'] = True
#         r_email = request.POST['email']
#         r_password = request.POST['password']
#         users = User.objects.filter(email=r_email)
#         r_username = User.objects.filter(email=r_email).last()
#         if r_username != None:
#             r_username = r_username.username
#             user = authenticate(username=r_username, password=r_password)
#             if user:
#                 login(request, user)
#                 result = True
#                 response = "/"
#             else:
#                 if users.count() > 2:
#                     for u in users:
#                         r_username = u.username
#                         u_tmp = authenticate(username=r_username, password=r_password)
#                         if u_tmp:
#                             login(request, u_tmp)
#                             result = True
#                             response = "/"
#             request.session['logged'] = 1
#             request.session['bad_log'] = None
#     else:
#         logout(request)
#         response = "/"
#     return redirect(response)


def specific_log(request, type_view=0):
    template = "webpages/ctn_bpf/specific_log.html"
    context = {

    }
    if type_view == 2:
        context['specific'] = 0  # Not Code
    return render(request, template, context)


def save_entity(request):
    try:
        institution = Institution.objects.get(id=int(request.POST['institution']))
    except:
        institution = basis(request)['actual_institution']
    try:
        operation_aggregate = request.POST['ope_aggregate']
    except:
        entity_nom = request.POST['entity_nom']
        entity_hierachy = request.POST['entity_hierachy']
        fields_name = request.POST['fields_name']
        fields_type = request.POST['fields_type']
        rapp_fields_name = request.POST['fields_name2']
        rapp_fields_type = request.POST['fields_type2']
        if request.POST['entity_image'] == '0':
            entity_image = False
        else:
            entity_image = True
        edit_or_create = request.POST['edit_or_create']
        operation_aggregate = None
        enum_fields = request.POST['enum_fields']
    if operation_aggregate is None:
        if edit_or_create == 'e':
            edit_id = request.POST['edit_id']
            institutionEntity = InsitutionEntities.objects.get(id=int(edit_id))
            entity = institutionEntity.m_entity_type
            actual_fields = entity.fields()
            actual_values = entity.lines()
            for l in actual_values:
                value = l.m_value_fields
                tmp = ""
                for f in fields_name.split("|")[:-1]:
                    if f not in actual_fields:
                        tmp += " |"
                    else:
                        tmp += str(l.get_value(f)) + "|"
                l.m_value_fields = tmp
                l.save()
        else:
            entity = EntityType(m_nom=entity_nom)
        entity.is_pic_represented = entity_image
        entity.m_nom = entity_nom
        entity.m_fields = fields_name
        entity.m_type_fields = fields_type
        entity.m_fields_rapported = rapp_fields_name
        entity.m_type_fields_rapp = rapp_fields_type
        entity.m_enum_values = enum_fields
        entity.indicateur_fields = request.POST['indicateurs_field']
        entity.save()
        # tache hierachy modifier
        hierachie = int(entity_hierachy) + 1

        # Decalage des Relations
        if edit_or_create != 'e':

            to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
            for d in to_decaler:
                d.m_hierachie += 1
                d.save()
            institutionEntity = InsitutionEntities(m_hierachie=hierachie, m_entity_type=entity,
                                                   m_institution=institution)
            if to_decaler.first() == None:
                institutionEntity.m_entity_type.is_tache = True
                institutionEntity.m_entity_type.save()
        else:
            institutionEntity.m_hierachie = hierachie
        institutionEntity.save()
    else:
        edit_or_create = request.POST['edit_or_create_O']
        aggregate_name = request.POST['aggregate_name']
        aggregate_fields_name = request.POST['aggregate_fields_name']
        aggregate_fields_type = request.POST['aggregate_fields_type']
        aggregate_rap_fields_name = request.POST['aggregate_rap_fields_name']
        aggregate_rap_fields_type = request.POST['aggregate_rap_fields_type']

        # Aggregates launching
        aggregates = institution.operations_modules()
        # Aggregates launching

        if aggregates == None:
            aggregates = Aggregate(m_institution=institution)

        aggregates.m_nom = aggregate_name
        aggregates.m_fields = aggregate_fields_name
        aggregates.m_type_fields = aggregate_fields_type
        aggregates.m_fields_rapported = aggregate_rap_fields_name
        aggregates.m_type_fields_rapp = aggregate_rap_fields_type
        aggregates.save()
    return redirect('/configurations/')


# def save_entity_value(request):
#     institution = int(request.POST['institution'])
#     hierachie = int(request.POST['hierachie'])
#     if hierachie != -1:
#         type_entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution__id=institution).first()
#     else:
#         type_entity = InsitutionEntities.objects.filter(m_institution__id=institution).last()
#     type_entity = type_entity.m_entity_type
#     fields_value = request.POST['fields']
#     edit_or_create = request.POST['edit_or_create']

#     is_tache = request.POST['is_tache']
#     if is_tache == 'True':
#         if edit_or_create == 'e':
#             edit_id = request.POST['edit_id']
#             entity = Tache.objects.get(id=int(edit_id))
#             entity.m_value_fields = fields_value
#             entity.m_type_entity = type_entity
#         else:
#             entity = Tache(m_value_fields=fields_value, m_type_entity=type_entity)
#         structures_list = request.POST['structures_list']  # getFieldValues()
#         structures_roles = request.POST['structures_roles']
#         try:
#             entity.montant = float(request.POST["finances"])
#         except:
#             pass
#         entity.save()
#         r_struc = list()
#         tmp_struc = list()
#         r_roles = structures_roles
#         r_roles = r_roles.split('\n')
#         i = 0

#         for s in structures_list.split('|')[:-1]:
#             if s not in tmp_struc:
#                 tmp_struc.append(s)
#         for s in tmp_struc:
#             r_struc.append(Structure.objects.get(id=int(s)))
#         r_struc.sort(key=lambda x: x.nom)
#         try:
#             if edit_or_create == 'e':
#                 for s in entity.structures.filter():
#                     s.delete()
#             for s in r_struc:
#                 if s == 0:
#                     pass
#                 else:
#                     r_str = StructureRole(m_structure=s, m_role=r_roles[i])
#                     r_str.save()
#                     entity.structures.add(r_str)
#                     i += 1
#             entity.structure = entity.structures.first().m_structure  # next(iter(r_struc)).m_structure
#         except:
#             pass

#         entity.save()
#         calendar = request.POST['calendar_selected']
#         periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
#         if edit_or_create == 'e' and calendar != "#":
#             plani_tche = TachePlannify.objects.filter(m_tache=entity)
#             for p in plani_tche:
#                 p.delete()
#         if calendar != "#":
#             plani_tche = TachePlannify(m_tache=entity, m_planify=calendar, m_periode=periode)
#             plani_tche.save()
#             set_pv_tp(plani_tche)
#     else:
#         if edit_or_create == 'e':
#             edit_id = request.POST['edit_id']
#             entity = Entity.objects.get(id=int(edit_id))
#             entity.m_value_fields = fields_value
#             entity.m_type_entity = type_entity
#         else:
#             entity = Entity(m_value_fields=fields_value, m_type_entity=type_entity)
#         entity.save()
#     try:
#         sup_entity = request.POST['sup_entity']
#     except:
#         sup_entity = None
#     # relations_entities
#     if sup_entity != None:
#         sup_entity = Entity.objects.get(id=int(sup_entity))

#         if edit_or_create == 'e':
#             delete_hierachie = EntityHierachie.objects.filter(m_sub_entity=entity).first()
#             if delete_hierachie != None:
#                 delete_hierachie.delete()
#         entity_hierachie = EntityHierachie(m_sub_entity=entity, m_sup_entity=sup_entity)
#         entity_hierachie.save()

#     # Image de Couverture
#     try:
#         entity.m_pic_represented = request.FILES["cover_img"]
#         entity.save()
#     except:
#         pass

#     i_f = 0
#     fields_name = entity.m_type_entity.fields()
#     for f in entity.m_type_entity.type_fields():
#         if f in ['file', 'image']:
#             try:
#                 eF = EntityFile(m_entity=entity, m_field=f, m_file=request.FILES[fields_name[i_f]])
#                 eF.save()
#                 entity.set_value(fields_name[i_f], str(eF.id))
#             except:
#                 entity.set_value(fields_name[i_f], str("Aucun Fichier"))
#             entity.save()
#         i_f += 1
#     base_val = request.POST["base_val"]

#     # Enumerations Values
#     split_extras1(entity)  # Clean the Error Files

#     if base_val not in ['', ' ', '0', None]:
#         response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
#     else:
#         response = "/gestionnaire/" + str(hierachie) + "/"
#     response = redirect(response)
#     return response


# def save_gestion(request):
#     context = basis(request)
#     generator = request.POST['generator']
#     edit_or_create = request.POST['edit_or_create']
#     try:
#         r_redirect = request.POST['redirect']
#     except:
#         pass
#     if generator == 'i':
#         r_sigle = request.POST['sigle']
#         r_nom = request.POST['nom']
#         r_image = request.FILES['image']
#         institution = Institution(sigle=r_sigle, nom=r_nom, img=r_image)
#         institution.save()
#         response = "/gestionnaire/i/"
#     elif generator == 'eD':
#         r_nom = request.POST['nom']
#         # r_fields_type = request.POST['fields_type']
#         # r_fields = request.POST['fields']
#         r_domain_type = request.POST['domain_type']
#         r_value_type = request.POST['value_type']
#         r_aggregation_type = request.POST['aggregation_type']
#         r_description = request.POST['description']
#         try:
#             r_null_conserv = request.POST['null_conserv']
#         except:
#             r_null_conserv = 0
#         try:
#             r_fill_valid = request.POST['fill_valid']
#         except:
#             r_fill_valid = 0
#         try:
#             r_logo = request.FILES['logo']
#         except:
#             r_logo = None
#         r_default_value = request.POST["default_value"]

#         dE = DataElement(m_name=r_nom)
#         if r_logo != None:
#             m_logo = r_logo
#         dE.m_domain_type = r_domain_type
#         dE.m_value_type = r_value_type
#         dE.m_aggregation_type = r_aggregation_type
#         dE.m_description = r_description

#         try:
#             if int(r_null_conserv) == 1:
#                 dE.is_zero_collect = True
#         except:
#             dE.is_zero_collect = False
#         try:
#             if int(r_fill_valid) == 1:
#                 if request.POST['default_value'] == None:
#                     tmp = 0
#                 else:
#                     tmp = request.POST['default_value']
#                 dE.m_default_value = int(tmp)
#         except:
#             dE.m_default_value = None
#         actual_institution = context['actual_institution']
#         dE.m_institution = actual_institution
#         dE.save()
#         response = "/dataelts/"
#     elif generator == 'a0':
#         r_user = User.objects.get(id=int(request.POST['user']))
#         r_message = request.POST['message']
#         a = Assistance(m_user=r_user, m_message=r_message)
#         a.save()
#         request.session['assistance'] = 1
#         response = "/assistance/"
#     elif generator == "str":
#         actual_institution = context['actual_institution']
#         r_value = request.POST['value']
#         actual_institution.default_struc_name = r_value
#         actual_institution.save()
#         response = "/structures/"
#     elif generator == "p2":
#         r_nom = request.POST['nom']
#         r_prenom = request.POST['prenom']
#         r_mail = request.POST['mail']
#         r_tel = request.POST['tel']
#         personnel_saved = Personnel.objects.filter(mail=r_mail).first()
#         try:
#             r_img = request.FILES['photo']
#         except:
#             if edit_or_create != 'e':
#                 r_img = OperaFile.objects.filter(m_name="USR").first().m_file
#             else:
#                 r_img = None
#         if personnel_saved == None:
#             tes_none = (User.objects.filter(email=r_mail).first())
#             if tes_none != None:
#                 try:
#                     personnel_saved = tes_none.personnel
#                 except:
#                     personnel_saved = Personnel(bd_user=tes_none, nom=r_nom, prenom=r_prenom, mail=r_mail, photo=r_img,
#                                                 actual_institution=context['actual_institution'],tel=r_tel)
#                     personnel_saved.save()

#         try:
#             r_structure = request.POST['Structure']
#         except:
#             r_structure = '0'
#         if r_structure != '0':
#             r_structure = Structure.objects.get(id=int(r_structure))
#         else:
#             r_structure = None
#         r_role = request.POST['Fonction']
#         r_role = Role.objects.get(id=int(r_role))
#         edit_or_create = request.POST['edit_or_create']
#         if edit_or_create != 'e':
#             if personnel_saved == None:
#                 
#                 password = ""
#                 for i in range(0, 8):
#                     password += str(random.randint(0, 9))
#                 usn = str(password) + str(User.objects.count() + 2)
#                 r_bd_user = User(username=usn, email=r_mail)
#                 subject = "Nouveau Compte Opera +"
#                 message_context = {
#                     'password': password,
#                     'name': r_nom + "" + r_prenom
#                 }
#                 message = render_to_string('webpages/ctn_bpf/mails/new_personnel.html', message_context)
#                 email = r_mail
#                 email_from = settings.EMAIL_HOST_USER
#                 recipient_list = [email, ]
#                 msg = EmailMessage(subject, message, email_from, recipient_list)
#                 msg.content_subtype = 'html'
#                 try:
#                     msg.send()
#                     r_bd_user.set_password(password)
#                 except:
#                     r_bd_user.set_password("user1234")
#                 # r_bd_user.set_password('User'+password)
#                 r_bd_user.save()
#                 personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, photo=r_img,
#                                       actual_institution=context['actual_institution'])
#                 personnel.bd_user = r_bd_user
#             else:
#                 personnel = personnel_saved
#         else:
#             edit_id = request.POST['edit_id']
#             if personnel_saved == None:
#                 personnel = Personnel.objects.get(id=int(edit_id))
#             else:
#                 personnel = personnel_saved
#             personnel.nom = r_nom
#             personnel.prenom = r_prenom
#             personnel.mail = r_mail
#             personnel.bd_user.email = r_mail
#             personnel.m_tel = r_tel
#             personnel.bd_user.save()
#             if r_img != None:
#                 personnel.photo = r_img
#         if personnel_saved == None:
#             personnel.save()
#         else:
#             request.session['perso_saved'] = personnel_saved.id
#         try:
#             simple_user = request.POST['simple_user']
#         except:
#             simple_user = '0'
#         if simple_user == '0':
#             ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
#             ps.save()
#             pf = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             if pf == None:
#                 pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
#                                         m_institution=context['actual_institution'])
#             else:
#                 pf.m_role = r_role
#             pf.save()
#         else:
#             entity = Entity.objects.get(id=int(simple_user))
#             pf = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             if pf == None:
#                 pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
#                                         m_institution=context['actual_institution'])
#             pf.m_entity = entity
#             pf.save()

#             ps = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
#             ps.save()
#         response = "/personnels/"
#     elif generator == "r":  # Role
#         r_nom = request.POST['nom']
#         r_description = request.POST['description']
#         r_permission = request.POST['permission']
#         r_institution = Institution.objects.get(id=int(request.POST['institution']))
#         r_ros_click = request.POST["ros_click"]

#         if int(r_ros_click) in [1, 2]:
#             r_permission = "-1"

#         if r_permission == '-1':
#             r_permission = 0
#         else:
#             permissions_hierachie = InsitutionEntities.objects.filter(m_institution=r_institution).last().m_hierachie
#             if (permissions_hierachie + 1) >= int(r_permission):
#                 r_permission = 0  # (permissions_hierachie+1) - int(r_permission)
#             else:
#                 r_permission = int(r_permission)
#         if edit_or_create == 'c':
#             role = Role(actual_institution=r_institution, nom=r_nom, description=r_description,
#                         permissions=r_permission)
#         else:
#             edit_id = request.POST['edit_id']
#             role = Role.objects.get(id=int(edit_id))
#             role.nom = r_nom
#             role.description = r_description
#             role.permissions = r_permission
#         if int(r_ros_click) == 1:
#             r_entity_administr = request.POST["permission_entity"]
#             eH = InsitutionEntities.objects.filter(id=int(r_entity_administr)).first().m_entity_type
#             role.m_simple_auth = eH
#             entities = list()
#             """
# 			for e in r_entity_administr.split("#")[:-1]:
# 				entities.append(Entity.objects.get(id=int(e)))
# 			"""
#             role.save()
#             # role.m_entities.set(entities)
#             role.m_nature = "1"
#         elif int(r_ros_click) == 2:
#             role.permissions = -100
#             user_simple_entity = request.POST['user_simple_entity']
#             role.is_simple_user = 1
#             role.m_simple_auth = EntityType.objects.get(id=int(user_simple_entity))
#         role.save()
#         response = "/roles/"
#     elif generator == "s":
#         try:
#             r_pic = request.FILES["logo"]
#         except:
#             r_pic = None
#         r_nom = request.POST['nom']
#         r_designation = request.POST['designation']
#         r_institution = request.POST['Institution']
#         r_institution = Institution.objects.filter(id=int(r_institution)).first()
#         try:
#             r_responsable = Personnel.objects.filter(id=int(request.POST['responsable'])).first()
#         except:
#             r_responsable = None
#         if edit_or_create == 'e':
#             edit_id = int(request.POST['edit_id'])
#             structure = Structure.objects.get(id=int(edit_id))
#             structure.photo = r_pic
#             structure.nom = r_nom
#             structure.designation = r_designation
#             structure.institution = r_institution
#         else:
#             structure = Structure(nom=r_nom, designation=r_designation,
#                                   institution=r_institution)  # ,responsable=r_responsable
#             if r_pic != None:
#                 structure.photo = r_pic
#         structure.save()

#         if r_responsable != None:
#             if edit_or_create == 'c':
#                 sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
#             else:
#                 edit_id = int(request.POST['edit_id'])
#                 structure = Structure.objects.get(id=int(edit_id))
#                 sR = StructureResponsable.objects.filter(m_structure=structure).first()
#                 if sR == None:
#                     sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
#                 else:
#                     sR.m_responsable = r_responsable
#             sR.save()
#         response = "/structures/"
#     elif generator == 'd_s_1':
#         if edit_or_create == "c":
#             dS = DataSet()
#             dS.save()
#             response = "/data_sets/design/" + str(dS.id) + "/"
#             form_part = False
#         else:
#             edit_id = request.POST["edit_id"]
#             dS = DataSet.objects.get(id=int(edit_id))

#             try:
#                 form_html = request.POST["form_design"]
#                 response = "/data_form/-1/0/"
#                 form_part = True
#                 for v in dS.m_dataelements.filter():
#                     form_html = form_html.replace("dE$" + str(v.id) + "$",
#                                                   "<div class='variableSelector'>  <div><input class='form-control' name='D0elt" + str(
#                                                       v.id) + "' type='text'></div> </div>")  # <div><label><small>"+str(v)+"</small></label></div>
#                 for v in dS.m_indicateurs.filter():
#                     form_html = form_html.replace("dI$" + str(v.id) + "$",
#                                                   "<div class='indicSelector' data-id='" + str(v.id) + "'> </div>")
#                 dS.m_formulaire = form_html
#             except:
#                 response = "/data_sets/design/" + str(dS.id) + "/"
#                 form_part = False
#         if not form_part:
#             form_name = request.POST["form_name"]
#             if form_name not in [None, ""]:
#                 dS.m_name = form_name
#             dS.m_periode = request.POST["periode"]
#             dS.m_sub_periode = request.POST["sub_periode"]

#             """
# 			r_indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
# 			dS.m_indicateur = r_indicateur
# 			"""
#             dS.m_institution = context["actual_institution"]
#             # ephoxVariables_input = request.POST["ephoxVariables_input"]
#             variables_list = request.POST["variables_list"].split("#")
#             indicateurs_list = request.POST["indicateurs_list"].split("#")
#             variables_set = set()
#             indicateurs_set = set()

#             for v in variables_list[:-1]:
#                 dE = DataElement.objects.get(id=int(v))
#                 variables_set.add(dE)

#             for v in indicateurs_list[:-1]:
#                 dI = Indicateur.objects.get(id=int(v))
#                 indicateurs_set.add(dI)

#             """
# 			if ephoxVariables_input != "#":
# 				id_insert = 1
# 				ephoxVar = ephoxVariables_input.split("#")
# 				for v in ephoxVar[1:-1]:
# 					dE = DataElement.objects.get(id=int(v))
# 					dS.m_formulaire = dS.m_formulaire.replace("de$"+str(v)+"$","<div class='variableSelector'> <div><label><small>"+str(dE)+"</small></label></div> <div><input class='form-control' name='"+str(id_insert)+"' type='text'></div> </div>")
# 					id_insert += 1
# 					variables_set.add(dE)
# 				dS.save()
# 			"""
#             variables_set = list(variables_set)
#             indicateurs_set = list(indicateurs_set)
#             dS.m_dataelements.set(variables_set)
#             dS.m_indicateurs.set(indicateurs_set)

#             r_structure = request.POST["structures_list"].split("$")
#             structures_set = list()
#             for r in r_structure[:-1]:
#                 structures_set.append(Structure.objects.get(id=int(r)))
#             dS.m_structures.set(structures_set)

#             r_role = request.POST["roles_list"].split("$")
#             roles_set = list()
#             for r in r_role[:-1]:
#                 roles_set.append(Role.objects.get(id=int(r)))
#             dS.m_roles.set(roles_set)

#         dS.save()
#     elif generator == 'o':
#         r_m_tache_plannification = request.POST['tache_periode']
#         r_tache = request.POST['tache']
#         response = "/taches/" + r_tache + "/"
#         r_tache = Tache.objects.get(id=int(r_tache))

#         # r_code = request.POST['code']

#         r_nom = request.POST['nom']
#         r_perso = request.POST['perso']
#         r_accountable = request.POST['accountable']
#         r_consulted = request.POST['consulted']
#         r_informed = request.POST['informed']
#         date_echeance_str = request.POST['date_echeance']
#         try:
#             r_role = request.POST['role']
#         except:
#             pass
#         if r_perso != "0":
#             r_perso = Personnel.objects.get(id=int(r_perso))
#         else:
#             r_perso = None
#         if r_accountable != "0":
#             r_accountable = Personnel.objects.get(id=int(r_accountable))
#         else:
#             r_accountable = None
#         if r_consulted != "0":
#             r_consulted = Personnel.objects.get(id=int(r_consulted))
#         else:
#             r_consulted = None
#         if r_informed != "0":
#             r_informed = Personnel.objects.get(id=int(r_informed))
#         else:
#             r_informed = None

#         """		try:
# 			r_perso = Personnel.objects.get(id=int(r_perso))
# 			r_accountable = Personnel.objects.get(id=int(r_accountable))
# 			r_consulted = Personnel.objects.get(id=int(r_consulted))
# 			r_informed	 = Personnel.objects.get(id=int(r_informed))
# 		except:
# 			pass"""
#         try:
#             r_montant = int(request.POST['montant'])
#         except:
#             r_montant = 0
#         file_oko = None
#         r_chronogr = request.POST['chronogr']
#         r_who_assign = int(request.POST['who_assign'])
#         r_sub_period = request.POST['sub_period']
#         r_notification = request.POST['notification']
#         r_priorite = request.POST['priorite']
#         try:
#             r_operation_aggregates = request.POST['operation_aggregates']
#         except:
#             r_operation_aggregates = None
#         if edit_or_create == 'c':
#             operation = Operation(tache=r_tache, nom=r_nom, montant=r_montant, notification=r_notification,
#                                   priorite=r_priorite, date_echeance=date_echeance_str)
#             operation.m_value = ""
#             t2 = r_tache.sup_entity()
#             tmp = str(r_tache.id) + "#"
#             while t2 != None:
#                 tmp = str(t2.id) + "#" + tmp
#                 t2 = t2.sup_entity()
#             operation.code = tmp

#             if context['actual_institution'].default_options != True:
#                 try:
#                     if r_operation_aggregates is not None:
#                         operations_values = r_operation_aggregates.split("|")
#                         i_val = 0
#                         for val in context['actual_institution'].operations_modules().fill_fields():
#                             if val["type"] in ['file', 'image']:
#                                 try:
#                                     oF = OperationFile(operation=operation, m_field=val['field'],
#                                                        m_file=request.FILES[val['field'] + '_nam'])
#                                     operation.save()
#                                     oF.save()
#                                 except:
#                                     pass
#                             operation.m_value += str(
#                                 operations_values[i_val]) + "|"  # str(operations_values[i_val]) + "|"
#                             i_val += 1
#                     else:
#                         operation.m_value = r_operation_aggregates
#                 except:
#                     pass
#                 operation.m_value += " "
#             else:
#                 try:
#                     file_oko = request.FILES['file_oko']
#                     operation.fichier_joint = file_oko
#                 except:
#                     pass
#         else:

#             edit_id = request.POST['edit_id']
#             operation = Operation.objects.get(id=int(edit_id))
#             operation.nom = r_nom
#             operation.montant = r_montant
#             operation.notification = r_notification
#             operation.priorite = r_priorite
#             if r_operation_aggregates is None:
#                 for val in context['actual_institution'].operations_modules().fields_rapported()[:-1]:
#                     operation.m_value += " " + "|"
#             else:
#                 operation.m_value = r_operation_aggregates
#         operation.m_tache_plannification = r_m_tache_plannification
#         # Add Institution to Operation
#         operation.m_institution = context["actual_institution"]

#         list_operations = list()
#         if r_who_assign == 0:
#             if r_perso != "0":
#                 operation.personnel = r_perso
#             if r_accountable != "0":
#                 operation.accountable = r_accountable
#             if r_consulted != "0":
#                 operation.consulted = r_consulted
#             if r_informed != "0":
#                 operation.informed = r_informed
#             list_operations.append(operation)
#         elif r_who_assign == 1:
#             role = Role.objects.get(id=int(r_role))
#             for perso in role.persos():
#                 operation.personnel = perso.m_personnel
#                 list_operations.append(operation)
#         else:
#             list_operations.append(operation)

#         for o in list_operations:
#             o.save()
#             if edit_or_create == 'e':
#                 op = OperationPeriode.objects.filter(m_operation=o).first()
#                 if op != None:
#                     tmp_chrono = SubPeriode.objects.filter(id=int(r_sub_period)).first()
#                     if tmp_chrono != None:
#                         op.m_chronogramme = tmp_chrono
#                     op.m_desc_realisation = r_chronogr
#                     op.save()
#                 else:
#                     op = OperationPeriode(m_operation=o, m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
#                                           m_desc_realisation=r_chronogr)
#                     op.save()
#             else:
#                 op = OperationPeriode(m_operation=o, m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
#                                       m_desc_realisation=r_chronogr)
#                 op.save()
#         subject = "Attribution - " + str(operation.institution().operations_name())
#         email_from = settings.EMAIL_HOST_USER
#         try:
#             raci_roles = [operation.personnel, operation.accountable, operation.consulted, operation.informed]
#             all_emails = list()
#             msg_emails = list()
#             i_r = 0
#             for r in raci_roles:
#                 i_r += 1
#                 if r is not None:
#                     tmp_context = {
#                         'operation': operation,
#                         'personnel': r,
#                         'tache': operation.tache,
#                         'institution': operation.institution()
#                     }
#                     if i_r == 2:
#                         tmp_context['role'] = 'A'
#                     elif i_r == 3:
#                         tmp_context['role'] = 'C'

#                     elif i_r == 4:
#                         tmp_context['role'] = 'I'
#                     else:
#                         tmp_context['role'] = 'Responsable'
#                     message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', tmp_context)
#                     # message2 = (subject, message, email_from, [r_role.m_personnel.mail])
#                     message2 = EmailMessage(subject, message, email_from, [r.mail, ])
#                     message2.content_subtype = 'html'

#                     msg_emails.append(message2)
#                     try:
#                         message2.send()
#                     except:
#                         pass
#         # recipient_list = all_emails
#         # send_mass_mail((msg_emails), fail_silently=False)
#         except:
#             message_context = {
#                 'operation': operation,
#                 'personnel': operation.personnel,
#                 'tache': operation.tache,
#                 'institution': operation.institution()
#             }
#             message = "<html><head></heady><body><b>Vous avez une </b></body></html>"
#             message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', message_context)
#             if r_perso != '0':
#                 email = r_perso.mail
#                 recipient_list = [email, ]
#                 msg = EmailMessage(subject, message, email_from, recipient_list)
#                 msg.content_subtype = 'html'
#                 try:
#                     if file_oko != None:
#                         msg.attach(file_oko.name, file_oko.read(), file_oko.content_type)
#                     msg.send()
#                 except:
#                     pass
#         """
# 		try:
# 			send_mail( subject, message, email_from, recipient_list, fail_silently=False)
# 			msg = EmailMessage(subject, message, email_from, recipient_list)
# 			msg.content_subtype = 'html'
# 			msg.send()
# 		except:
# 			pass
# 		"""
#     elif generator == 'w':
#         r_nom = request.POST['nom']
#         r_prenom = request.POST['prenom']
#         r_mail = request.POST['mail']
#         r_password = request.POST['password']
#         r_username = User.objects.count() + 1
#         try:
#             r_user = User(username=r_username, email=r_mail)
#             r_user.set_password(r_password)
#             r_user.save()
#         except:
#             r_user = User(username='ngb' + str(r_username + 1000), email=r_mail)
#             r_user.set_password(r_password)
#             r_user.save()

#         # Code generator
#         code = ""
#         
#         for i in range(6):
#             code += str(random.randint(0, 9))
#         # code = "000111"
#         owner = Owner(m_user=r_user, m_code=code)
#         owner.save()
#         personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, bd_user=r_user)
#         personnel.photo = OperaFile.objects.filter(m_name="USR").first().m_file
#         personnel.save()
#         subject = " d'une Institution Opera +"
#         message = " Bonjour, utilisez ce code pour renseigner une Institution au sein d'Opera " + str(code)
#         email = r_mail
#         email_from = settings.EMAIL_HOST_USER
#         recipient_list = [email, ]
#         try:
#             send_mail(subject, message, email_from, recipient_list, fail_silently=False)
#         except:
#             pass  # No cconnexion
#         response = "/log_account/"
#         request.session['new_user'] = 1
#     elif generator == "i2":
#         id_e = int(request.POST["entity_id"])
#         entity = Entity.objects.get(id=id_e)
#         for i in entity.get_indicateurs():
#             tmp_per = request.POST["period" + str(i.id)]
#             tmp_num = request.POST["numer" + str(i.id)]
#             tmp_field = request.POST["id" + str(i.id)]
#             tmp_field = DataElement.objects.filter(id=int(tmp_field)).first()
#             # i.m_values = str(tmp_per)+"#"+str(tmp_num)+"\n" + str(i.m_values)
#             iV = IndicateurVal(m_indicateur=i, m_periode=tmp_per, m_valeur=tmp_num, m_numerateur=tmp_field)
#             iV.save()

#         entity.is_rapported = True
#         entity.save()
#         response = "/chaine_indicateurs/"
#         context['indique'] = True
#     elif generator == "dSv":
#         r_dataset = DataSet.objects.get(id=int(request.POST["dSv_id"]))
#         r_user = request.user.personnel
#         r_variables = r_dataset.m_dataelements
#         r_values = request.POST["variables_value"].split("#")
#         r_values_names = request.POST["variables_names"].split("#")
#         r_values_dict = dict()

#         for v in r_variables.filter():
#             r_values_dict["D0elt" + str(v.id)] = None

#         for i in range(len(r_values)):
#             r_values_dict[r_values_names[i]] = r_values[i]

#         r_structures = [request.POST["struc_selec"]]
#         r_period1 = request.POST["period1_saisie"]
#         r_period2 = request.POST["period2_saisie"]
#         entity = DataSetValue(m_dataset=r_dataset, m_user=r_user, m_period_value=r_period1,
#                               m_sub_period_value=r_period2)
#         entity.save()

#         i = 0
#         for v in r_variables.filter():
#             dt = DSet_DElt(m_dataelement=v, m_dataset_value=entity,
#                            m_value=r_values_dict["D0elt" + str(v.id)])  # r_values[i])
#             dt.save()
#             i += 1
#         for v in r_structures:
#             stru = Structure.objects.get(id=int(v))
#             entity.m_structures.add(stru)
#         entity.save()
#         response = "/data_form/" + str(r_dataset.id) + "/" + str(0) + "/"
#     elif generator == "ieD":
#         formula = request.POST["formule"]
#         indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
#         indicateur.m_datalets_calcul = formula
#         indicateur.save()
#         response = "/dataelts/indic/"
#     elif generator == "pass":
#         password = request.POST["password"]
#         user = request.user
#         user.set_password(password)
#         user.save()
#         response = "/profile/"
#     elif generator == "ind_va":
#         entity = EntityType.objects.get(id=int(request.POST["entity_ind_id"]))
#         entity.indicateur_fields = request.POST["ind_val"]
#         entity.save()
#         response = "/configurations/"
#     elif generator == "cOi":
#         entity = Tache.objects.get(id=request.POST["configOp_id"])
#         tA = TacheAggregate.objects.filter(m_tache=entity).first()
#         if tA == None:
#             tA = TacheAggregate(m_tache=entity)
#         i = 1
#         for i1 in context["actual_institution"].operations_modules().fields():
#             if request.POST["fiel1" + str(i)] not in ["#", "", " "]:
#                 tA.m_values1 += request.POST["fiel1" + str(
#                     i)] + ""
#             else:
#                 tA.m_values1 += "#" + ""
#         i = 1
#         for i1 in context["actual_institution"].operations_modules().fill_fields_rapp():
#             if request.POST["fiel2" + str(i)] not in ["#", "", " "]:
#                 tA.m_values2 += request.POST["fiel2" + str(
#                     i)] + ""
#             else:
#                 tA.m_values2 += "#" + ""
#             i += 1
#         tA.save()
#         response = "/taches/" + str(entity.id)
#     return redirect(response)


def planifier2(request, period_id=0):
    template = "webpages/ctn_bpf/plannifier.html"
    annees = set()
    context = basis(request)
    entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
    tasks = entity.lines()

    # actual_period =

    context['searches'] = list()
    context['g_v'] = '1'
    context['institution'] = Institution.objects.last()
    if period_id != 0:
        context['actual_period'] = Institution_Periodes.objects.get(id=int(period_id))
    else:
        period = request.user.personnel.actual_institution.default_period
        institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                            m_periode=period).first()
        context['actual_period'] = institutionPe
    context['taches'] = tasks
    context['ranges'] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
    return render(request, template, context)


def roles(request, search=None):
    template = "webpages/ctn_bpf/roles.html"
    fields_personnel = ['', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', '']
    fields_roles = ['Role', 'Description', 'Permissions',
                    'Entite']
    personnel = Personnel.objects.filter()
    context = basis(request)
    roles = Role.objects.filter(actual_institution=context['actual_institution']).select_related('actual_institution')
    if search != None:
        roles = roles.filter(nom__contains=search)
    context[
        'entity'] = 'Role'
    context['fields1'] = fields_personnel
    context['personnel'] = personnel
    context['fields'] = fields_roles
    context['lines'] = roles
    context['g_v'] = 'r'
    context['g_vs'] = 'r2'
    return render(request, template, context)


def repartir_tache(request):
    r_tache = request.POST['tache']
    r_roles_tache = request.POST['roles_tache']
    r_personnel_tache = request.POST['personnel_tache']
    roles = r_roles_tache.split("_")
    personnels = r_personnel_tache.split("_")
    r_roles = list()
    r_persos = list()
    for r in roles:
        if r != '':
            r_roles.append(Role.objects.get(id=int(r)))
    for p in personnels:
        if p != '':
            r_persos.append(Personnel.objects.get(id=int(p)))
    tache = Tache.objects.get(id=int(r_tache))
    subject = "Attribution de la Tache"
    message = " Vous avez une Tache qui vouis a ete"
    email = r_persos[0].mail
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    # send_mail( subject, message, email_from, recipient_list, fail_silently=False)

    repartition = TacheRepartition(m_tache=tache)
    repartition.save()
    repartition.m_personnels.set(r_persos)
    repartition.m_roles.set(r_roles)
    repartition.save()
    return redirect("/gestionnaire/t/")


def modify(request, arg_val=""):
    r_personnel_id = request.POST['personnel']
    r_role_id = request.POST['role']
    personnel = Personnel.objects.get(id=int(r_personnel_id))
    role = Role.objects.get(id=int(r_role_id))
    r_institution = Institution.objects.get(id=int(request.POST['institution']))
    p_f = Personnel_Function(m_personnel=personnel, m_role=role, m_institution=r_institution)
    p_f.save()
    return redirect('/personnels/')


def save_plannify(request):
    tache_id = request.POST['calendar_tache']
    calendar = request.POST['calendar_selected']
    periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
    tache = Tache.objects.get(id=int(tache_id))
    try:
        plani_tche = TachePlannify.objects.filter(m_tache__id=int(tache_id)).first()
        plani_tche.m_planify = calendar
        plani_tche.m_periode = periode
    except:
        plani_tche = TachePlannify(m_tache=tache, m_planify=calendar, m_periode=periode)
    plani_tche.save()
    institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                        m_periode=periode)
    return redirect("/planifier/" + str(institutionPe.first().id) + "/")


# @cache_page(60 * 15)
def operations_home(request, lvl=-1, arg_structure="#", periode="#", search="#", only_not=0):
    template = "webpages/ctn_bpf/index.html"
    context = basis(request)
    if lvl == -1:
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
    else:
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution'],
                                                   m_hierachie=lvl).last().m_entity_type
    lines = entity.lines()
    tache_lvl = entity.is_tache
    if arg_structure not in ["#", '0']:
        tmp_structure = Structure.objects.get(id=int(arg_structure))
        try:
            tmp = list()
            for l in lines:
                if l.structure == tmp_structure:
                    tmp.append(l)
                else:
                    pass
            lines = tmp
            context['arg_structure'] = int(arg_structure)
        except:
            pass
    if periode not in ["#", '0']:
        try:
            tmp = list()
            for t in lines:
                if periode in t.plannification().table():
                    tmp.append(t)
            lines = tmp
        except:
            pass
    if search != "#":
        tmp = list()
        for t in lines:
            if search in t.get_name():
                tmp.append(t)
        lines = tmp
    context['entity'] = entity
    context['sup_entity'] = entity.sup_entity(context['actual_institution'].id)
    context['lines'] = lines
    context['fields'] = entity.fields()
    context['operation'] = 1
    context['personnel'] = Personnel.objects.filter()
    context['menu'] = 'o'
    context['lvl'] = lvl
    context['g_v'] = 'o'
    context['periode'] = periode
    context["tache_lvl"] = tache_lvl

    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


@login_required(login_url='/log_account')
def notifications(request):
    template = "webpages/ctn_bpf/index.html"
    context = basis(request)
    entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
        'm_institution').last().m_entity_type
    lines = list()
    for l in entity.lines():
        if l.progression() < 100:
            operations = l.operations()
            appd = False
            for o in operations:
                if o.personnel == request.user.personnel:
                    lines.append(l)
                    break
    context['notif'] = True
    context['entity'] = entity

    # context['lines'] = lines
    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    context['fields'] = entity.fields()
    context['personnel'] = Personnel.objects.filter()
    context['menu'] = 'o'
    context['g_v'] = 'o'
    return render(request, template, context)


# @login_required(login_url='/log_account')
# def alert_notifs(request, search=None, tree=None, report=0):
#     context = basis(request)
#     template = "webpages/ctn_bpf/alert_notifs.html"
#     operation_historic = HistoricRACI.objects.all()
#     perso = request.user.personnel
#     context['report'] = report
#     context['operation_historic'] = operation_historic
#     repeat_mode = context["actual_institution"].repeat_mode
#     if repeat_mode:
#         na_class = OperationDetails
#         if report == 0:
#             main_operations = Operation.objects.filter(personnel=perso.id,
#                                                        etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 1:
#             main_operations = na_class.objects.filter(m_operation__accountable=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 2:
#             main_operations = na_class.objects.filter(m_operation__consulted=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 3:
#             main_operations = na_class.objects.filter(m_operation__informed=perso.id,
#                                                       etat='2')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 100:
#             main_operations = na_class.objects.filter()
#     else:
#         na_class = Operation
#         if report == 0:
#             main_operations = na_class.objects.filter(personnel=perso.id,
#                                                       etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 1:
#             main_operations = na_class.objects.filter(accountable=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 2:
#             main_operations = na_class.objects.filter(consulted=perso.id,
#                                                       etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 3:
#             main_operations = na_class.objects.filter(informed=perso.id,
#                                                       etat='2')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 100:
#             main_operations = na_class.objects.filter()
#     bool(main_operations)
#     if repeat_mode and report != 0:
#         tmp = list()
#         for n in main_operations:
#             tmp.append(n.m_operation.id)
#         main_operations = Operation.objects.filter(id__in=tmp)

#     main_operations = main_operations.order_by('-date_creation')
#     if tree == '1':
#         entHidden = request.POST["entHidden"]
#         context["entHidden"] = entHidden.split("#")
#         main_operations = main_operations.filter(code__contains=entHidden)
#     tmp = list()
#     try:
#         n = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).count()
#     except:
#         n = 0

#     for i in range(n):
#         tmp.append(set())

#     for o in main_operations:
#         if o.code != None:
#             o2 = o.code.split("#")
#             try:
#                 for i in range(n):
#                     tmp[i].add(o2[i])
#             except:
#                 pass

#     ents = list()
#     for i in range(n):
#         try:
#             ents.append({
#                 "hierachie": i,
#                 'entities': Entity.objects.filter(id__in=list(tmp[i]))
#             })
#         except:
#             pass
#     context['ents'] = ents
#     context['n'] = n

#     main_operations2 = OperationRole.objects.filter(m_personnel=perso.id).values('m_operation')
#     context['main_operations2'] = main_operations2
#     # operations = perso.get_taches() #get_operations()

#     results = list()
#     results = list(main_operations)
#     """
# 	for o in operations:
# 		if o.progression() == 0 and o.rapported() in ['0',None] :
# 			results.append(o)
# 	"""
#     paginator_o = Paginator(results, 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     context['menu'] = 'aN'
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range
#     context['lines'] = context['pages_o']
#     return render(request, template, context)


# def save_rapport(request):
#     context = basis(request)
#     r_operation = Operation.objects.get(id=int(request.POST['operation_id']))
#     actual_institution = context['actual_institution']

#     r_operation.etat = "1"
#     r_operation.save()
#     if request.method == "POST":
#         operation_comm = request.POST.get('operation_comm')
#         operation_raci = HistoricRACI.objects.create(m_commentaire=operation_comm,
#                                                      m_operation_id=request.POST['operation_id'], m_role="R")
#         operation_raci.save()
#         if context["actual_institution"].repeat_mode == True:
#             r_operation = OperationDetails(m_operation=r_operation)
#             r_operation.personnel = request.user.personnel
#             r_operation.m_institution_id = actual_institution
#             r_operation.save()
#             fil_class = OperationDetailsFile
#     else:
#         fil_class = OperationFile
#     try:
#         r_commentaire = request.POST['operation_comm']
#     except:
#         r_commentaire = None
#     try:
#         r_fichier = request.FILES['operation _fichier']
#     except:
#         r_fichier = None
#     if context['actual_institution'].default_options != True:
#         rapport_input = request.POST['rapport_input']
#         rapport_values = request.POST['rapport_values']
#         try:
#             aggregates = context['actual_institution'].operations_modules().type_fields_rapported()
#             aggs_fields = context['actual_institution'].operations_modules().fields_rapported()
#         except:
#             aggregates = list()
#         i = 1
#         for a in aggregates:
#             if a == 'file':
#                 delet = fil_class.objects.filter(m_field=aggs_fields[(i - 1)], operation=r_operation)
#                 delet.delete()
#                 oF = fil_class.objects.create(m_field=aggs_fields[(i - 1)], operation=r_operation)
#                 try:
#                     oF.m_file = request.FILES['file_r' + str(i)]
#                 except:
#                     pass
#                 oF.save()
#             i += 1
#         r_operation.m_value_reported = rapport_values
#         r_operation.etat = '1'
#         r_operation.date_rapported = datetime.datetime.now()
#         r_operation.m_commentaire = r_commentaire
#         r_operation.save()
#     else:
#         r_operation.etat = '1'
#         rapport_input = request.POST['rapport_input']
#         if rapport_input != 'c':
#             rapport = OperationRapport(operation=r_operation, commentaire=r_commentaire)
#         else:
#             # r_nom = request.POST['operation_nom']
#             rapport = OperationRapport(piece_jointe=r_fichier, operation=r_operation, commentaire=r_commentaire)
#             # r_operation.etat = '1' #nom_piece_jointe=r_nom
#             periode = r_operation.periodes()
#             desc_tmp = periode.desc_split()
#             desc_tmp.append("")
#             index = 0
#             for i in desc_tmp:
#                 if i == '9':
#                     pass
#                 elif i == '0':
#                     desc_tmp[index] = '1'
#                     rapport.period = index
#                     rapport.save()
#                     request.session['new_rapport'] = 1
#                     break
#                 elif i == '1':
#                     request.session['have_to_done'] = 1
#                     break
#                 index += 1
#             desc_tmp = "_".join(desc_tmp)

#             periode.m_desc_realisation = desc_tmp
#             periode.save()
#     try:
#         finances = request.POST["finances"]
#         r_operation.montant2 = int(finances)
#     except:
#         r_operation.montant2 = 0
#     r_operation.save()
#     request.session['new_rapport'] = 1
#     try:
#         operation = r_operation
#         peA = None
#         tmps = [operation.accountable, operation.consulted]
#         message_context1 = {
#             'operation': operation,
#             'role': 'A',
#             'commentaires': r_commentaire,
#             'lien': "/decision/o/" + str(operation.id) + "/",
#             'institution': operation.institution()
#         }
#         message_context2 = {
#             'operation': operation,
#             'role': 'C',
#             'commentaires': r_commentaire,
#             'lien': "/decision/o/" + str(operation.id) + "/",
#             'institution': operation.institution()
#         }

#         subject = str(operation) + " - attente de validation"
#         message1 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context1)
#         message2 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context2)
#         recipient_list1 = [operation.accountable.bd_user.email, ]
#         if operation.consulted != None:
#             recipient_list2 = [operation.consulted.bd_user.email, ]
#         else:
#             recipient_list2 = list()
#         email_from = settings.EMAIL_HOST_USER
#         msg1 = EmailMessage(subject, message1, email_from, recipient_list1)
#         msg1.content_subtype = 'html'
#         msg2 = EmailMessage(subject, message2, email_from, recipient_list2)
#         msg2.content_subtype = 'html'
#         try:
#             if r_fichier != None:
#                 msg1.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
#                 msg2.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
#             msg1.send()
#             msg2.send()
#         except:
#             pass
#     except:
#         pass
#     response = redirect('/operations/')
#     return response


def assign_supervisor(request):
    tache = Tache.objects.get(id=int(request.POST["assign"]))
    supervisor = Personnel.objects.get(id=int(request.POST['perso']))
    tache.superviseur = supervisor
    tache.save()
    return redirect('/gestionnaire/t/')


# def valid_rapport(request):
#     opera_valider_id = request.POST['opera_valider_id']
#     operation = Operation.objects.get(id=int(opera_valider_id))
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     try:
#         operation_rapport = request.POST["operation_rapport"]
#         operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
#         operation_rapport.etat = "2"
#         operation_rapport.m_institution_id = actual_institution
#         operation_rapport.save()
#     except:
#         operation.etat = '2'

#     index = 0
#     if request.method == "POST":
#         m_commentaire = request.POST.get('opera_valider_comment')
#         # date_realisation = date.today()
#         # date_realisation = datetime.today().date()
#         save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
#                                                     m_operation_id=request.POST['opera_valider_id'], m_role='A')
#         save_historic.save()
#     # if defaulted configurations
#     try:
#         periode = operation.periodes()
#         desc_tmp = periode.desc_split()
#         desc_tmp.append("")
#         for i in desc_tmp:
#             if i in ['9', '0']:
#                 pass
#             elif i == '1':
#                 desc_tmp[index] = '2'
#                 request.session['validation_done'] = 1
#                 break
#             index += 1
#         desc_tmp = "_".join(desc_tmp)
#         periode.m_desc_realisation = desc_tmp
#         periode.save()
#     except:
#         pass
#     operation.save()

#     subject = " Evolution " + str(operation)
#     message_context = {
#         'operation': operation,
#     }
#     message = render_to_string('webpages/ctn_bpf/mails/inform_evolution.html', message_context)

#     email_from = settings.EMAIL_HOST_USER
#     recipient_list = [operation.personnel.bd_user.email, ]
#     if operation.informed != None:
#         recipient_list.append(operation.informed.bd_user.email)
#     msg = EmailMessage(subject, message, email_from, recipient_list)
#     msg.content_subtype = 'html'
#     try:
#         msg.send()
#         send = '0'
#     except:
#         send = '1'

#     return redirect('/operations/')


def in_valid_rapport(request):
    opera_invalider_id = request.POST['opera_invalider_id']
    commentaire = request.POST["opera_invalider_comment"]
    operation = Operation.objects.get(id=int(opera_invalider_id))
    operation.etat = '0'
    periode = operation.periodes()
    desc_tmp = periode.desc_split()
    desc_tmp.append("")
    try:
        operation_rapport = request.POST["operation_rapport"]
        operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
        operation_rapport.etat = 0
        operation_rapport.save()  #:save()
    except:
        operation_rapport.etat = 0
        pass
    index = 0
    if request.method == "POST":
        m_commentaire = request.POST.get('opera_invalider_comment')
        # date_realisation = date.today()
        # date_realisation = datetime.today().date()
        save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
                                                    m_operation_id=request.POST['opera_invalider_id'], m_role='A')
        save_historic.save()
    for i in desc_tmp:
        if i in ['1']:
            desc_tmp[index] = '0'
            request.session['validation_done'] = 1
        index += 1
    desc_tmp = "_".join(desc_tmp)
    periode.m_desc_realisation = desc_tmp
    periode.save()
    operation.save()
    message_context = {
        'operation': operation,
        'commentaire': commentaire
    }

    subject = " Rapport non Valide"
    message = render_to_string('webpages/ctn_bpf/mails/operation_invalid.html', message_context)
    email = operation.personnel.bd_user.email
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    msg = EmailMessage(subject, message, email_from, recipient_list)
    msg.content_subtype = 'html'
    try:
        msg.send()
        send = '0'
    except:
        send = '1'

    return redirect('/operations/')


def delete(request):
    id_entity = request.POST['id_entity']
    generator = request.POST['generator']
    try:
        force = False
        if generator == 'o':
            entity = Operation.objects.get(id=int(id_entity))
            response = redirect('/taches/' + str(entity.tache.id) + '/')
        elif generator == 'eD':
            entity = DataElement.objects.get(id=int(id_entity))
            response = redirect('/dataelts/')
        elif generator == 'p2':
            entity = Personnel.objects.get(id=int(id_entity))
            response = redirect('/personnels/')
        elif generator == 'r':
            entity = Role.objects.get(id=int(id_entity))
            response = redirect('/roles/')
        elif generator == 's':
            entity = Structure.objects.get(id=int(id_entity))
            response = redirect('/structures/')
        elif generator == 'e':
            entity = InsitutionEntities.objects.get(id=int(id_entity))
            hierachie = entity.m_hierachie
            institution = entity.m_institution
            to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
            for d in to_decaler:
                d.m_hierachie -= 1
                d.save()
            response = redirect('/configurations/')
            entity = entity.m_entity_type
        elif generator == 'i2':
            entity = Indicateur.objects.get(id=int(id_entity))
            response = redirect('/evaluer/' + str(entity.m_enti.m_type_entity.hierachie()))
        elif generator == 'iF3':
            entity = IndicateurVal.objects.get(id=int(id_entity))
            sup = entity.m_indicateur.m_enti
            try:
                s_sup = sup.sup_entity().id
                sup_hierachie = sup.m_type_entity.hierachie()

                response = redirect('/data_form/' + str(sup_hierachie) + '/' + str(s_sup) + '/')
            except:
                response = redirect('/data_form/-1/0/')
        elif generator == 'y':
            entity = Institution_Periodes.objects.get(id=int(id_entity))
            response = redirect('/configurations/')
        elif generator == 'z':
            entity = SubPeriode.objects.get(id=int(id_entity))
            response = redirect('/configurations/')
        elif generator == 'p2_RACI':
            entity = PersonnelRACI.objects.get(id=int(id_entity))
            response = redirect('/personnels_raci/')
        elif generator == "dSV":
            entity = DataSet.objects.get(id=int(id_entity))
            response = redirect("/data_form/-1/0/")
        else:
            hierachie = int(request.POST['hierachy'])
            try:
                base_val = int(request.POST["base_val"])
            except:
                base_val = "0"
            if base_val not in ['', '0', None]:
                response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
            else:
                response = "/gestionnaire/" + str(hierachie) + "/"

            entity = Entity.objects.get(id=int(id_entity))
            response = redirect(response)
        entity.delete()
    except ProtectedError:
        # render the template with your message in the context
        # or you can use the messages framework to send the message:
        template = "webpages/ctn_bpf/error_delete.html"
        context = basis(request)
        entity = Entity.objects.filter(id=int(id_entity)).first()
        if entity != None:
            context["entity"] = entity
            tmp_hierachie = entity.m_type_entity.hierachie()
            context['hierachie'] = tmp_hierachie
            if entity.m_type_entity.is_tache == True:
                subs = context["actual_institution"].operations_name
            else:
                tmp_hierachie += 1
                subs = InsitutionEntities.objects.filter(m_institution=context["actual_institution"],
                                                         m_hierachie=tmp_hierachie).first()
            context['subs'] = subs
            context['element'] = 1
        response = render(request, template, context)
    return response


def ajax_lines(request):
    type_search = request.GET.get('type_search')
    value_search = request.GET.get('value_search')
    sub_search = request.GET.get('sub_search')
    results = list()
    lines = list()
    progressions = list()
    lines_count = 0

    if value_search != "|":
        results = objets[type_search].objects.filter(nom__contains=value_search)
    else:
        pass

    if type_search == 'o':
        for r in results:
            progressions.append(r.progression())
            lines.append(r.nom + "|" + str(r.personnel) + "|" + str(r.montant) + "|" + r.semaines + "|")

    lines_count = results.count()
    data = {
        'progressions': progressions,
        'lines': lines,
        'lines_count': lines_count
    }
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def configurations(request):
    template = "webpages/ctn_bpf/configurations.html"
    context = basis(request)
    context['institution'] = request.user.personnel.actual_institution
    context['menu'] = 'c'
    context['g_v'] = 'e'
    context['basis_periodes'] = Periode.objects.filter(m_initial=True)
    return render(request, template, context)


# def profile(request):
#     template = "webpages/ctn_bpf/profile.html"
#     context = basis(request)
#     context['institution'] = context['actual_institution']
#     context["personnel"] = request.user.personnel
#     return render(request, template, context)


def filter_op_search(request):
    search = request.POST['search']
    return filter_op(request, search)


def filter_op(request, search="#"):
    try:
        niveau = int(request.POST['niveau'])
        periode = request.POST['periode']
        structure = request.POST['structure']
    except:
        niveau = -1
        periode = "#"
        structure = "#"
    try:
        only_not = int(request.POST["only_not"])
    except:
        only_not = 0
    return operations_home(request, niveau, structure, periode, search, only_not)


# def notifs(request):
#     user_id = request.GET.get('value')
#     insti_id = request.GET.get('institution')
#     actual_institution = Institution.objects.get(id=int(insti_id))
#     perso = Personnel.objects.get(bd_user__id=int(user_id))
#     if actual_institution.repeat_mode == False:
#         operations1 = list()
#         operations = Operation.objects.filter(personnel=perso)
#         operations_report = Operation.objects.filter(accountable=perso, etat='1')
#         count_is_consulted = Operation.objects.filter(consulted=perso, etat='1').count()
#         count_is_informed = Operation.objects.filter(informed=perso, etat='2').count()


#     else:
#         operations1 = Operation.objects.filter(personnel=perso)
#         operations = OperationDetails.objects.filter(m_operation__personnel=perso)
#         operations_report = OperationDetails.objects.filter(m_operation__accountable=perso, etat='1')
#         count_is_consulted = OperationDetails.objects.filter(m_operation__consulted=perso, etat='1').count()
#         count_is_informed = OperationDetails.objects.filter(m_operation__informed=perso, etat='2').count()

#     # General_Results
#     nb_taches = 0
#     nb_have_rapported = 0
#     nb_is_done = 0
#     nb_have_to_do = 0
#     nb_observations = 0

#     nb_have_rapported2 = 0
#     nb_is_done2 = 0
#     nb_have_to_do2 = 0
#     nb_observations2 = 0
#     if True:
#         for o in operations1:
#             if o.etat == '0':
#                 nb_have_to_do += 1
#                 nb_taches += 1
#                 if o.institution() == actual_institution:
#                     nb_have_to_do2 += 1
#         for o in operations:
#             if o.etat == '1':
#                 nb_have_rapported += 1
#                 if o.institution() == actual_institution:
#                     nb_have_rapported2 += 1
#             else:
#                 nb_is_done += 1
#                 if o.institution() == actual_institution:
#                     nb_is_done2 += 1

#         for o in operations_report:
#             nb_observations += 1
#             if o.institution() == actual_institution:
#                 nb_observations2 += 1

#     data = {
#         'result': nb_taches,
#         'have_to_done': nb_have_to_do,
#         'is_done': nb_is_done,
#         'have_rapported': nb_have_rapported,
#         'have_to_done2': nb_have_to_do2,
#         'is_done2': nb_is_done2,
#         'have_rapported2': nb_have_rapported2,
#         'nb_observations': nb_observations,
#         'nb_observations2': nb_observations2,
#         'count_is_consulted': count_is_consulted,
#         'count_is_informed': count_is_informed
#     }
#     # entities = institution.get_entities()
#     indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution).count()
#     data["indi_total"] = indicateurs_all
#     return JsonResponse(data)


def indicateurs_ajax(request):
    actual_institution = request.GET.get("institution")
    actual_year = request.GET.get("actual_year")

    try:
        entity_type = int(request.GET.get("entity_type"))
        type_indic = request.GET.get("type_indic")
    except:
        entity_type = None

    try:
        id_entity = int(request.GET.get("id_entity"))
        id_entity = Entity.objects.get(id=id_entity)
    except:
        id_entity = None

    if entity_type == None:
        if id_entity != None:
            indicateurs_all = Indicateur.objects.filter(m_enti=id_entity)
        else:
            indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution)
        nb_all = indicateurs_all.count()
        indicateurs_renseignes = list()
        nb_renseignes = 0

        for i in indicateurs_all:
            if i.actu_value != None:
                indicateurs_renseignes.append(i)
                nb_renseignes += 1

        indicateurs_values = list()
        cibles = list()
        for i in indicateurs_renseignes:
            cibles.append(i.get_cibles(actual_year))
            indicateurs_values.append(i.actu_value())
        data = {
            'all': nb_all,
            'nb_renseignes': nb_renseignes,
            'cibles': cibles,
            'indicateurs_values': indicateurs_values
        }
    elif type_indic == "F":
        if id_entity == None:
            eT = EntityType.objects.filter(id=entity_type).first()
            entities = eT.lines()
        else:
            eT = id_entity.m_type_entity
            entities = id_entity.sub_entities()
        resul1 = list()
        resul2 = list()
        for e in entities:
            try:  # it may be Operation
                operations = e.operations()
                if eT.is_tache == False:
                    taches = e.taches()
                else:
                    taches = [e]
                tmp = 0
                tmp2 = 0
                for t in taches:
                    if t.montant != None:
                        tmp += int(t.montant)
                for o in operations:
                    tmp2 += int(o.montant2)
                resul1.append(tmp)
                resul2.append(tmp2)
            except:
                pass

        data = {
            'list_montant1': resul1,
            'list_montant2': resul2
        }
        entq = list()
        entq_id = list()
        for e in entities:
            entq.append(str(e))
            entq_id.append(str(e.id))
        data['entities'] = entq
        data["entities_id"] = entq_id
    else:
        if id_entity == None:
            eT = EntityType.objects.filter(id=entity_type).first()
            entities = eT.lines()
        else:
            entities = [id_entity]
        indicateurs_all = Indicateur.objects.filter(m_enti__in=entities)
        ens = dict()
        ens_good = dict()
        ens_bad = dict()
        nbE = indicateurs_all.count()
        for i in entities:
            ens[str(i.id)] = 0
            ens_good[str(i.id)] = 0
            ens_bad[str(i.id)] = 0

        for i in indicateurs_all:
            ens[str(i.m_enti.id)] += 1
            try:
                if int(i.get_cibles(actual_year)) > int(i.actu_value()):
                    ens_bad[str(i.m_enti.id)] += 1
                else:
                    ens_good[str(i.m_enti.id)] += 1
            except:
                pass

        if nbE > 0:
            for i in entities:
                ens[str(i.id)] = ens[str(i.id)]  # *100/nbE
                ens_good[str(i.id)] = ens_good[str(i.id)]  # *100/nbE
                ens_bad[str(i.id)] = ens_bad[str(i.id)]  # *100/nbE

        list_ens = list()
        list_ens_good = list()
        list_ens_bad = list()
        for i in entities:
            list_ens.append(ens[str(i.id)])
            list_ens_good.append(ens_good[str(i.id)])
            list_ens_bad.append(ens_bad[str(i.id)])
        data = {
            'list_ens': list_ens,
            'list_ens_good': list_ens_good,
            'list_ens_bad': list_ens_bad
        }
        entq = list()
        entq_id = list()
        for e in entities:
            entq.append(str(e))
            entq_id.append(str(e.id))
        data['entities'] = entq
        data["entities_id"] = entq_id
    return JsonResponse(data, safe=False)


def institutions(request, search=None):
    template = "webpages/ctn_bpf/institution.html"
    context = basis(request)
    institutions1 = list()
    structures = Personnel_Structure.objects.filter(m_personnel=request.user.personnel)
    for s in structures:
        if s.m_structure.institution not in institutions1:
            institutions1.append(s.m_structure.institution)
    for i in Institution.objects.filter(owner__m_user__id=request.user.id):
        if i not in institutions1:
            institutions1.append(i)
    if search != None:
        tmp = institutions1
        institutions1 = list()
        for i in tmp:
            if search in i.nom or search in i.sigle:
                institutions1.append(i)
    institutions1 = sorted(institutions1, key=lambda t: t.sigle)
    paginator_o = Paginator(institutions1, 12)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['institutions1'] = elements_page
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    context['menu'] = 'i'
    return render(request, template, context)


def set_institution(request, institution_id):
    institution = Institution.objects.get(id=institution_id)
    request.user.personnel.actual_institution = institution
    request.user.personnel.save()
    return redirect("/")


def operations_details_list(request, operation_id):
    template = "webpages/ctn_bpf/operations_details_list.html"
    context = basis(request)
    operation = Operation.objects.get(id=operation_id)
    context["operation"] = operation
    return render(request, template, context)


# def operations_details(request, operation_id):
#     template = "webpages/ctn_bpf/operations_details.html"
#     context = basis(request)
#     operation = Operation.objects.get(id=operation_id)
#     actual_institution = context['actual_institution']
#     if operation.institution() != context['actual_institution']:
#         request.user.personnel.actual_institution = operation.institution()
#         request.user.personnel.save()
#         context = basis(request)
#     lines = list()

#     tache = operation.tache
#     if actual_institution.default_options != True:
#         try:
#             i = 0
#             for th in actual_institution.operations_modules().fill_fields_rapp():
#                 a = th
#                 if a["type"] == "choix":
#                     a["extras"] = operation.get_value(a["field"])
#                 lines.append(a)
#             aggs2 = tache.aggregates2()
#             for a in aggs2:
#                 lines[i]["field"] = a
#                 i += 1
#         except:
#             pass
#     context["lines"] = lines

#     tache = operation.tache
#     context['operation'] = operation
#     context['tache'] = tache
#     context['institutions'] = Institution.objects.filter()
#     context['menu'] = 'o'
#     return render(request, template, context)


# def history(request, dates="#"):
#     template = "webpages/ctn_bpf/history.html"
#     context = basis(request)
#     entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
#         'm_institution').last().m_entity_type
#     tasks = entity.lines()
#     if context['actual_institution'].default_options == True:
#         context['fields'] = [entity.m_nom, 'Operation', 'Personnel', 'Rapport Technique', 'Date']
#         unsorted_results = list()
#         for t in tasks:
#             for o in t.operations():
#                 aka = OperationRapport.objects.filter(operation__id=o.id)
#                 for o2 in aka:
#                     unsorted_results.append(o2)
#     else:
#         if context["actual_institution"].repeat_mode == True:
#             template = "webpages/ctn_bpf/history_rapport.html"
#             tasks = context["actual_institution"].taches()
#             context["taches"] = tasks

#             context['menu'] = 'h'
#             # context['dates'] = dates
#             paginator_o = Paginator(tasks, 10)
#             page_number_o = request.GET.get('page')
#             elements_page = paginator_o.get_page(page_number_o)
#             # oeuvres_date
#             context['pages_o'] = elements_page
#             context['num_pages'] = paginator_o.num_pages
#             context['page_range'] = paginator_o.page_range
#             """
# 			paginator_o = Paginator(sorted_result,10)
# 			page_number_o = request.GET.get('page')
# 			elements_page = paginator_o.get_page(page_number_o)
# 			#oeuvres_date
# 			context['pages_o']=elements_page
# 			context['num_pages']=paginator_o.num_pages
# 			context['page_range']=paginator_o.page_range
# 			"""
#         else:
#             tmpas = context['actual_institution'].operations_modules().fill_fields_rapp()
#             aggregates = list()
#             for t in tmpas:
#                 if t['type'] == 'choix':
#                     aggregates.append(t['extras'])
#                 else:
#                     aggregates.append(t['field'])
#             context['fields'] = [entity.m_nom, context['actual_institution'].operations_name] + aggregates + [
#                 'Personnel', 'Date']

#             unsorted_results = list()
#             for t in tasks:
#                 for o in t.operations():
#                     unsorted_results.append(o)

#             sorted_result = sorted(unsorted_results, key=lambda t: t.date_creation)
#             if dates != "#":
#                 start_date = request.POST['start_date']
#                 end_date = request.POST['end_date']
#                 context['start_date'] = start_date
#                 context['end_date'] = end_date

#                 start_date = start_date.split("-")
#                 end_date = end_date.split("-")
#                 start_date = [int(elt) for elt in start_date]
#                 end_date = [int(elt) for elt in end_date]

#                 result = list()
#                 for t in sorted_result:
#                     start_date_cmp = start_date == list() or (
#                                 t.date_creation.year > start_date[0] or t.date_creation.year == start_date[
#                             0] and t.date_creation.month > start_date[1] or t.date_creation.year == start_date[
#                                     0] and t.date_creation.month == start_date[1] and t.date_creation.day >= start_date[
#                                     2])
#                     end_date_cmp = end_date == list() or (
#                                 t.date_creation.year < end_date[0] or t.date_creation.year == end_date[
#                             0] and t.date_creation.month < end_date[1] or t.date_creation.year == end_date[
#                                     0] and t.date_creation.month == end_date[1] and t.date_creation.day <= end_date[2])

#                     if start_date_cmp and end_date_cmp:
#                         result.append(t)
#             sorted_result = result

#             context['lines'] = sorted_result
#             context['nb_lines'] = len(sorted_result)
#             context['institutions'] = Institution.objects.filter()
#             context['menu'] = 'h'
#             context['dates'] = dates
#             paginator_o = Paginator(sorted_result, 10)
#             page_number_o = request.GET.get('page')
#             elements_page = paginator_o.get_page(page_number_o)
#             # oeuvres_date
#             context['pages_o'] = elements_page
#             context['num_pages'] = paginator_o.num_pages
#             context['page_range'] = paginator_o.page_range
#     return render(request, template, context)


def calendar(request):
    template = "webpages/ctn_bpf/agenda_week.html"
    context = basis(request)
    return render(request, template, context)


def save_period(request):
    institution = request.POST['institution']
    periode = request.POST['periode']
    decoupage = request.POST['decoupage']
    edit_or_create = request.POST['edit_or_create']
    try:
        big_period = request.POST["big_periode"]
        sub_period = 0
    except:
        sub_period = None
    if sub_period != None:
        r_big_period = Periode.objects.get(id=int(big_period))
        sub_period = request.POST["sub_period"]
        details = request.POST["details"]
        if edit_or_create != 'e':
            r_sub_period = SubPeriode(m_periode=r_big_period, m_sub_value=periode, m_decoupage=decoupage,
                                      m_decoupage_description=details)
        else:
            edit_id = request.POST['edit_id']
            r_sub_period = SubPeriode.objects.get(id=int(edit_id))
            r_sub_period.m_periode = r_big_period
            r_sub_period.m_sub_value = periode
            r_sub_period.m_decoupage = decoupage
            r_sub_period.m_decoupage_description = details
        r_sub_period.save()
    else:
        if edit_or_create != 'e':
            r_period = Periode(m_value=periode, m_decoupage=decoupage)
        else:
            edit_id = request.POST['edit_id']
            r_period = Periode.objects.get(id=int(edit_id))
            r_period.m_value = periode
            r_period.m_decoupage = decoupage
        r_period.save()
        if edit_or_create != 'e':
            institution = Institution.objects.get(id=int(institution))
            i_periode = Institution_Periodes(m_institution=institution, m_periode=r_period)
            i_periode.save()
    return redirect("/configurations/")


def ajax_graphiques(request):
    data = dict()
    id_tache = int(request.GET.get('id_graph'))
    type_graph = request.GET.get('type_graph')
    nature_graph = int(request.GET.get('nature_graph'))
    inst_graph = Institution.objects.get(id=int(request.GET.get('inst_graph')))
    actual_config = inst_graph.default_options

    if nature_graph != -1:
        element = InsitutionEntities.objects.filter(m_institution=inst_graph,
                                                    m_hierachie=nature_graph).first().m_entity_type
    else:
        element = InsitutionEntities.objects.filter(m_institution=inst_graph).last().m_entity_type

    if element.is_tache:
        entity = Tache.objects.get(id=id_tache)
        operations = entity.operations()
        nb_operations = len(operations)
    else:
        entity = Entity.objects.get(id=id_tache)

    if type_graph == 'eT':
        if element.is_tache:
            tache_tmp = Tache.objects.get(id=entity.id)
            plansT = list()
            for p in tache_tmp.plannification().table():
                plansT.append(p)
            x_abcisses = list()
            for p in plansT:
                for xi in inst_graph.default_subperiod.decoup_desc_slip2():
                    x_abcisses.append(str(p) + "-" + str(xi))

            # Matrice des mois
            result = list()

            x_interval = tache_tmp.plannification().table()
            operations = tache_tmp.operations()
            nb_operations = operations.count()
            tmp_sum = 0
            nb_x_abcisses = 0
            tmp_dict = list()
            for x in x_interval:
                # tmp_sum = 0
                operations_2 = operations.filter(m_tache_plannification=x)
                all_dict = list()
                for op in operations_2:
                    x_dict = list()
                    for t in op.periodes().desc_split():
                        x_dict.append(0)
                    i_x_d = 0

                    for t in op.periodes().desc_split():
                        if actual_config == True:
                            if t == '2':
                                tmp_val = 100
                            else:
                                tmp_val = 0
                        else:
                            if t != '9':
                                ds = {'0': 0, '1': 0, '2': 100}
                                tmp_val = ds[op.etat]
                            else:
                                tmp_val = 0

                        x_dict[i_x_d] += tmp_val
                        i_x_d += 1
                    all_dict.append(x_dict)
                # all_dict contient la matrice d'un mois i)

                tmp_dict_result = list()
                if operations_2.first() != None:
                    for t in operations_2[0].periodes().desc_split():
                        tmp_dict_result.append(0)
                    for a_dict in all_dict:
                        ia = 0
                        for a in a_dict:
                            tmp_dict_result[ia] += a
                            ia += 1
                tmp_dict += tmp_dict_result
            result_tmp = 0
            result = list()
            for t in tmp_dict:
                result_tmp += t
                result.append((result_tmp / nb_operations))
        else:
            x_abcisses = inst_graph.default_period.decoup_slip()
            tmp = list()
            taches = entity.taches()
            discovered = list()
            index_tmp = 0
            nb_taches = len(taches)
            for x in x_abcisses:
                tmp.append(0)
                for t in taches:
                    if x in t.plannification().table() and t not in discovered:
                        tmp[index_tmp] += t.progression()
                        discovered.append(t)
                index_tmp += 1
            y_abcisses = list()
            for y in range(index_tmp):
                if nb_taches > 0:
                    y_abcisses.append((tmp[y] / nb_taches))
                else:
                    y_abcisses.append(0)
            result = list()
            rst = 0
            for y in y_abcisses:
                rst += y
                result.append(rst)
    elif type_graph == 'p':
        x_abcisses = set()
        result_x = list()
        y_abcisses = list()
        for o in operations:
            x_abcisses.add(o.personnel)
        for perso in x_abcisses:
            y_abcisses.append(perso.progression_taches(inst_graph))
        for x in x_abcisses:
            result_x.append(str(x))
        x_abcisses = result_x
        result = y_abcisses
    elif type_graph == 't':
        x_abcisses = list()
        result = list()
        subs = entity.sub_entities()
        try:
            sub_name = str(subs[0].m_type_entity)
        except:
            sub_name = " "
        i = 0
        for x in subs:
            result.append(x.progression())
            x_abcisses.append(str(x))
            i += 1
        data['nb_sub'] = i
        data['sub_names'] = sub_name
    data['x_abcisses'] = x_abcisses
    data['y_abcisses'] = result
    return JsonResponse(data, safe=False)


# @login_required(login_url='/log_account')
# def decision(request, nature="#", element_id=0, operation_rapport_id=None):
#     context = basis(request)
#     if nature == "o":
#         template = "webpages/ctn_bpf/decision.html"
#         operation = Operation.objects.get(id=element_id)
#         if context["actual_institution"].repeat_mode == True:
#             operation_historic = HistoricRACI.objects.all()
#             context['operation_historic'] = operation_historic
#             template = "webpages/ctn_bpf/decision_rapport.html"
#             operation = Operation.objects.get(id=element_id)
#             if operation_rapport_id == None:
#                 operation_rapport = operation.get_operation_details_invalid().last()
#                 context["operation_rapport"] = operation_rapport
#         context['operation'] = operation
#         context['tache'] = operation.tache
#     else:
#         context["entity"] = Entity.objects.get(id=int(element_id))
#         template = "webpages/ctn_bpf/decision_plus.html"
#     return render(request, template, context)


# def get_elements(request):
#     # Elements can be Entity, Forms
#     if True:  # try:
#         other_limk = request.GET.get("other")
#         institution = Institution.objects.get(id=int(request.GET.get('institution')))
#         if other_limk == "dS":
#             dSs = DataSet.objects.filter(m_institution=institution)
#             data = {
#                 "datasets": list(),
#                 "datasets_id": list()
#             }
#             for d in dSs:
#                 data["datasets"].append(str(d))
#                 data["datasets_id"].append(str(d.id))
#         elif other_limk == "dE_code":
#             data = dict()
#             codes = request.GET.get("codes").split("#")
#             result = list()
#             codes_replace = list()
#             for code in codes[:-1]:
#                 res = list()
#                 j = 0
#                 n = len(code)
#                 while j < n:
#                     if code[j] == "$":
#                         j += 1
#                         k = j
#                         while code[j] != "$":
#                             j += 1
#
#                         res.append(code[k:j])
#                         j += 2
#                     else:
#                         j += 1
#                 tmp_res = list()
#                 tmp_res2 = list()
#                 for r in res:
#                     tmp_res.append(str(DataElement.objects.get(id=int(r))))
#                     tmp_res2.append(r)
#                 result.append(tmp_res)
#                 codes_replace.append(tmp_res2)
#             data["data_elts"] = result
#             data["codes_replace"] = codes_replace
#         elif other_limk == "dI_formula":
#             values = request.GET.get("value").split("#")
#             data_elts = DataSet.objects.get(id=int(request.GET.get("dataset")))
#             result_formula = list()
#             for v in values[:-1]:
#                 ind = Indicateur.objects.get(id=int(v))
#                 result_formula.append(ind.m_numerateur)
#             data = dict()
#             data["data_elts"] = data_elts.join_dataelts()
#             data["formulas"] = result_formula
#     else:  # except:
#         value = int(request.GET.get('value'))
#         nature = int(request.GET.get('nature'))
#         institution = Institution.objects.get(id=int(request.GET.get('institution')))
#         entity_type = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=institution).select_related(
#             'm_institution').first().m_entity_type
#         # entity to upload
#         entity = Entity.objects.get(id=value)
#         default_fields = entity_type.fields()
#         default_fields_type = entity_type.type_fields()
#         default_fields_values = entity.values()
#         # Default Values to putt
#         expected_fields = entity_type.fields_rapported()
#         expected_types_type = entity_type.type_fields_rapported()
#         results = list()
#         data = {
#             'entity': str(entity),
#             'default_fields': default_fields,
#             'default_fields_type': default_fields_type,
#             'default_fields_values': default_fields_values,
#             'expected_fields': expected_fields,
#             'expected_types_type': expected_types_type
#         }
#     return JsonResponse(data, safe=False)


def get_elements_hierachy(request):
    nature = int(request.GET.get('nature'))
    institution = Institution.objects.get(id=int(request.GET.get('institution')))
    if nature == -100:
        type_entity = request.GET.get('type_entity')
        role = Role.objects.get(id=int(type_entity))
        entity_type = role.m_simple_auth
    elif nature != -1:
        entity_type = InsitutionEntities.objects.filter(m_hierachie=nature,
                                                        m_institution=institution).first().m_entity_type
    else:
        entity_type = InsitutionEntities.objects.filter(m_institution=institution).last().m_entity_type
    try:
        big_entity = int(request.GET.get('big_entity'))
        ent = Entity.objects.get(id=int(big_entity))
        lines = ent.sub_entities()
    except:
        lines = entity_type.lines()
    tmp = list()
    ids = list()
    for l in lines:
        tmp.append(str(l))
        ids.append(l.id)
    data = {
        'lines': tmp,
        'ids': ids
    }
    return JsonResponse(data, safe=False)


def get_entities_subsequency(request):
    pass


def get_elements_subsequency_true(request):
    nature = int(request.GET.get('nature'))
    entity = int(request.GET.get('entity'))
    report = int(request.GET.get('report'))
    try:
        institution = int(request.GET.get("institution"))
    except:
        institution = None
    if entity != -1:
        try:
            entity = Entity.objects.get(id=entity)
        except:
            entity = 0
        elts = entity.child_trees()
    else:
        elts = [Institution.objects.get(id=institution).top_entity().lines()]

    data_names = list()
    data_ids = list()
    for elt in elts:
        tmp_id = list()
        tmp_name = list()
        for e in elt:
            tmp_id.append(e.id)
            tmp_name.append(str(e))
        data_names.append(tmp_name)
        data_ids.append(tmp_id)

    data = {
        'data_ids': data_ids,
        'data_names': data_names
    }
    return JsonResponse(data, safe=False)


def get_elements_subsequency(request):
    nature = int(request.GET.get('nature'))
    entity = int(request.GET.get('entity'))
    report = int(request.GET.get('report'))
    try:
        institution = int(request.GET.get("institution"))
    except:
        institution = None
    try:
        entity = Entity.objects.get(id=entity)
    except:
        entity = 0

    if report == 0:
        operations = Operation.objects.filter(etat='0', personnel=request.user.personnel).values('code')
    elif report == 1:
        operations = Operation.objects.filter(etat='1', accountable=request.user.personnel).values('code')
    elif report == 2:
        operations = Operation.objects.filter(etat='1', consulted=request.user.personnel).values('code')
    elif report == 3:
        operations = Operation.objects.filter(etat='2', informed=request.user.personnel).values('code')
    else:
        operations = Operation.objects.filter().values('code')

    if institution != None:
        institution = Institution.objects.get(id=institution)
        operations = operations.filter(m_institution=institution)

    bool(operations)
    result = list()
    if entity != 0:
        for o in operations:
            try:
                if o['code'] not in ["", None] and o['code'].split("#")[nature] == str(entity.id):
                    result.append(o)
            except:
                pass
    else:
        pre_hierachie = int(request.GET.get("pre_hierachy"))
        if pre_hierachie not in [0, -1]:
            for o in operations:
                if o['code'] not in ["", None] and o['code'].split("#")[(nature - 1)] == str(pre_hierachie):
                    result.append(o)
        elif nature == 0:
            result = list(operations)
    steps = list()

    k = 0
    if True:
        if report != 100:
            for i in operations[0]['code'].split("#"):
                steps.append(set())
                k += 1
        else:
            for i in list(operations)[-1]['code'].split("#"):
                steps.append(set())
                k += 1
    else:
        pass

    # Recuperer les Operations
    i = 0
    for o in result:
        i = 0
        for j in range(k):
            if o['code'] not in [None, "", " "]:
                steps[i].add(o['code'].split("#")[j])
                i += 1

    # Transformer en Liste
    ajax_steps = list()
    for s in steps:
        ajax_steps.append("#".join(list(s)))

    ajax_steps2 = list()
    for s in steps:
        s3 = list(s)
        s2 = list()
        for t in s3:
            if t not in ['', None]:
                s2.append(int(t))
        a = Entity.objects.filter(id__in=list(s2))
        a2 = [str(t) for t in list(a)]
        ajax_steps2.append("#".join(a2))

    data = {
        'operations': result,
        'ajax_steps': ajax_steps,
        'ajax_steps2': ajax_steps2
    }
    return JsonResponse(data, safe=False)


def save_valid_rapport(request):
    nature = request.POST['nature']
    resultat = request.POST['resultat_realise']
    institution = Institution.objects.get(id=int(request.POST['institution']))
    entity_type = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=institution).first().m_entity_type
    entity = Entity.objects.get(id=int(request.POST['value']))
    entity.is_rapported = True
    entity.save()
    tR = EntityRapport(m_entity=entity, m_resultat_realise=resultat)
    tR.save()
    return redirect('/' + nature + '/')


def filter_entities(request):
    institution = Institution.objects.get(id=int(request.POST['institution']))
    sub_value = request.POST['sub_value']
    hierachie = int(request.POST['hierachie'])
    tmp_hierachie = hierachie - 1
    if hierachie <= 0:
        hierachie = 0
        value = '0'
    else:
        entity_type = InsitutionEntities.objects.filter(m_institution=institution,
                                                        m_hierachie=(hierachie - 1)).first().m_entity_type
        entity_type_actual = InsitutionEntities.objects.filter(m_institution=institution,
                                                               m_hierachie=(hierachie)).first().m_entity_type
        enums_list = list()
        enums = entity_type_actual.enum_fields()['result']
        if entity_type_actual.m_enum_values not in ['', None]:
            for val in enums:
                enums_list.append(request.POST["enum_" + val['name']])
        if enums_list != list():
            enums_list = "||".join(enums_list)
        value = request.POST[str(entity_type)]
    # gestionnaire(request,gest_val,gest_id=0,name=None,structure=None,periode=None)
    if value != '0':
        element = Entity.objects.get(id=int(value))
        if enums_list != list():
            response = redirect('/gestionnaire/' + str(tmp_hierachie) + '/' + str(element.id) + '/')
        else:
            response = gestionnaire(request, str(tmp_hierachie), str(element.id), None, None, None, enums_list)
    else:
        response = redirect('/gestionnaire/' + str(hierachie) + '/')
    return response


def search(request):
    if request.user.is_authenticated == True:
        template = "webpages/ctn_bpf/search.html"
        val = request.POST['search']
        context = basis(request)
        searches = list()
        entities = context['actual_institution'].get_entities()
        for e in entities:
            lines = e.m_entity_type.lines()
            hierachie = e.m_hierachie
            def_color = '#00a2c3'
            if e.m_entity_type.is_tache:
                def_color = 'orange'
            for l in lines:
                if val in str(l):
                    searches.append({'nature': 'e', 'label': e, 'value': l, 'hierachie': hierachie, 'color': def_color})

        for s in Structure.objects.filter(nom__contains=val, institution=context['actual_institution']):
            searches.append({'nature': 's', 'label': 'Structure', 'value': s, 'color': '#9012a1'})

        for s in Personnel.objects.filter(nom__contains=val):
            searches.append({'nature': 'p', 'label': 'Personnel', 'value': str(s), 'color': '#12c304'})

        context['searches'] = searches
    else:
        return redirect("/")
    return render(request, template, context)


def search2(request, menu):
    search = request.POST["search"]
    if menu == 'i':
        response = institutions(request, search)
    elif menu == 'p2':
        response = personnels(request, search)
    elif menu == 'p2_RACI':
        response = personnels_raci(request, search)
    elif menu == 'r':
        response = roles(request, search)
    elif menu == 'aN':
        response = alert_notifs(request, search)
    return response


@login_required(login_url='/log_account')
def messages(request):
    template = "webpages/ctn_bpf/search.html"
    context = basis(request)
    context['msg_view'] = True
    results = list()
    personnel = request.user.personnel
    accounted = personnel.operations_accounted()
    bool(accounted)
    """
	for o in Operation.objects.filter():
		if  o.rapported() not in [None,'0'] and o.progression()<100 and context['permissions'] > 0:
			results.append({'value':o,'name':'Operation','link':'o','nature':'r'})
	"""
    for o in accounted:
        if o.rapported() not in [None, '0'] and o.progression() < 100:
            # and context['permissions'] > 0
            results.append({'value': o, 'name': 'Operation', 'link': 'o', 'nature': 'r'})
    entities_type = context['actual_institution'].get_entities()
    nb_observations = 0
    """
	for e in entities_type:
		lines = e.m_entity_type.lines()
		for l in lines :
			if l.is_rapported != True and l.progression() == 100:
				results.append({'value':l,'name':str(l.m_type_entity),'link':'o','nature':'o'})
	"""
    context['msgs'] = True
    paginator_o = Paginator(results, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def bad_pass(request):
    mail = request.POST['mail']
    sent = False
    try:
        subject = "Restauration de Mot de Passe"
        code = ""
        
        for i in range(0, 6):
            code += str(random.randint(0, 9))
        # r_bd_user.set_password('User'+password)
        message = " Entrez ce code pour restaurer votre Compte "
        email = r_perso.mail
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [email, ]
        send_mail(subject, message, email_from, recipient_list, fail_silently=False)
        sent = True
    except:
        pass
    data = {
        'sent': sent
    }
    if sent == True:
        data['code'] = code
    return JsonResponse(data)


def notifs_rapp(request):
    user_id = request.GET.get('value')
    insti_id = request.GET.get('institution')
    insti_id = Institution.objects.get(id=int(insti_id))
    # perso = Personnel.objects.get(bd_user__id=int(user_id))
    operations = Operation.objects.filter(personnel=request.user.personnel)
    # General_Results
    nb_is_rapported = 0
    nb_have_to_report = 0
    nb_observations = 0

    nb_is_rapported2 = 0
    nb_have_to_report2 = 0
    nb_observations2 = 0

    actual_institution = insti_id

    context = basis(request)
    perso = request.user.personnel
    for o in operations:
        if o.etat == '0':
            nb_have_to_report += 1
            if o.institution() == actual_institution:
                nb_have_to_report2 += 1
        elif o.etat == '1':
            nb_is_rapported += 1
            if o.institution() == actual_institution:
                nb_is_rapported2 += 1
    entities_type = insti_id.get_entities()

    nb_observations = Operation.objects.filter(etat='1', accountable=perso).count()

    for e in entities_type:
        lines = e.m_entity_type.lines()
        for l in lines:
            if l.is_rapported != True and l.progression() == 100:
                nb_observations += 1

    personnel = request.user.personnel
    # for o in operations
    """
	for o in accounted:#o.institution() in context['personnel'].all_institutions() and
		if o.progression() < 100 and o.rapported() not in ['0',None]:
			# and context['permissions'] > 0
			nb_observations += 1
	"""
    data = {
        'nb_have_to_report': nb_have_to_report,
        'nb_is_rapported': nb_is_rapported,
        'nb_observations': nb_observations,
        'nb_have_to_report2': nb_have_to_report2,
        'nb_is_rapported2': nb_is_rapported2,
        'nb_observations2': nb_observations2
    }
    return JsonResponse(data)


def valid_observations(request):
    element_id = request.POST["element_id"]
    valid_attributes = request.POST['attributes']

    element = Entity.objects.get(id=int(element_id))
    is_tache = element.m_type_entity.is_tache
    if is_tache:
        element = Tache.objects.get(id=int(element_id))
    element.is_rapported = True
    element.m_reported_fields = valid_attributes
    element.save()
    return redirect('/operations/')


def print_mail_file(request):
    owners = Owner.objects.filter()
    mail_lists = list()
    for o in owners:
        mail_lists.append(o.m_user.email)
    context = {
        'mail_lists': mail_lists
    }
    template = "webpages/ctn_bpf/csv_template.html"
    return render(request, template, context)


def assistance(request):
    template = "webpages/ctn_bpf/assistance.html"
    context = basis(request)
    result = render(request, template, context)
    try:
        if request.session['assistance'] == 1:
            result = redirect('/')
    except:
        pass
    return result


def ajax_restore(request):
    
    r_mail = request.GET.get('mail')
    code = ""
    for i in range(6):
        code += str(random.randint(0, 9))
    message_context = {
        'code': code,
    }
    subject = "  Compte Opera +"
    message = render_to_string('webpages/ctn_bpf/mails/new_code.html', message_context)
    email = r_mail
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    msg = EmailMessage(subject, message, email_from, recipient_list)
    msg.content_subtype = 'html'
    try:
        msg.send()
        send = '0'
    except:
        send = '1'
    data = {
        'code': code,
        'send': send
    }
    return JsonResponse(data)


def restorepass(request):
    mail = request.POST['restore']
    password = request.POST['password']
    user = User.objects.filter(email=mail).first()
    user.set_password(password)
    user.save()
    login(request, user)
    return redirect('/')


def documentation(request):
    document = OperaFile.objects.filter(m_name="DOCU").first().m_file.url
    return redirect(document)


# New Updates
@login_required(login_url='/log_account')
def chaine_indicateurs(request):
    template = "webpages/ctn_bpf/chaine_resultat.html"
    context = basis(request)
    actual_institution = context['actual_institution']
    context['menu'] = 'l'
    context['top_entities'] = actual_institution.top_entity().lines()
    context['this_entities'] = actual_institution.get_entities()
    return render(request, template, context)


def get_indicateur_value(request):
    indicateur = Indicateur.objects.get(id=int(request.GET.get('id_indicateur')))
    fields = indicateur.m_fields
    periodicite = indicateur.m_periodicite
    final_cible = indicateur.m_final_cible
    if final_cible == None:
        final_cible = ""
    cibles = indicateur.m_cibles
    data_verification = indicateur.m_data_verification

    verification_indi = indicateur.m_verification_indi

    data = {
        'obj': indicateur.m_objectif_indi,
        'indicateur': indicateur.m_name,
        'fields': fields,
        'periodicite': periodicite,
        'final_cible': final_cible,
        'cibles': cibles,
        'verification_indi': verification_indi,
        'data_verification': data_verification,
        "data_verificationind": "#",
        'others': "#"
    }
    tmp_verifi = data_verification.split("#")
    if tmp_verifi[0] == "1":
        ind_ve = DataSet.objects.get(id=int(tmp_verifi[1]))
        data["data_verificationind"] = str(ind_ve)
        data["data_verificationind_url"] = "/data_form/" + str(ind_ve.id) + "/0/"
    if indicateur.m_others not in [None, ""]:
        data["others"] = indicateur.m_others
    return JsonResponse(data, safe=False)


def ajax_institution(request):
    sens = request.GET.get('sens')
    devise = request.GET.get('devise')
    institution = request.GET.get('institution')
    institution = Institution.objects.get(id=int(institution))
    if int(sens) == 1:
        institution.default_options = False
    elif int(sens) == 0:
        institution.default_options = True
    elif int(sens) == 3:
        institution.finan_options = None
    elif int(sens) == 2:
        institution.finan_options = devise
    institution.save()
    data = {
        'nada': True
    }
    return JsonResponse(data, safe=False)


# def save_indicateur(request):
#     edit_or_create = request.POST["edit_or_create"]
#     gest_id = request.POST['gest_id']
#     gest_val = request.POST['gest_val']
#     name = request.POST["nature_indicateur"]

#     fields = request.POST["indi_adds"]
#     periodicite = request.POST["periodicite"]
#     periodicite2 = request.POST["periodicite2"]

#     cibles = request.POST["indi_cibls"]
#     type_entity = request.POST["entity_id"]
#     data_verification = request.POST["indi_srcs"]

#     numerateur = request.POST["numerateur"]
#     denominateur = request.POST["denominateur"]

#     objectif_indi = request.POST["objectif_indi"]
#     verification_moyen = request.POST["verification_moyen"] + "#" + request.POST["veri_type"]

#     sources_speci = request.POST["specig_form"]
#     if sources_speci == "1":
#         try:
#             sources_speci += "#" + request.POST["dataSt"]
#         except:
#             pass

#     codes_colors = request.POST["codes_colors"]
#     alerts_modals = request.POST["alert_modals"]
#     others = request.POST["other"]

#     cibles = request.POST["indi_cibls"]
#     coeficient = int(request.POST["coefficient"])

#     unite = request.POST["unite_indicateur"]

#     try:
#         default_calcul = request.POST["default_calcul"]
#     except:
#         default_calcul = 1

#     if edit_or_create == "c":

#         entity = Entity.objects.get(id=int(type_entity))
#         indi = Indicateur(m_name=name, m_fields=fields, m_periodicite=periodicite, m_sub_periodicite=periodicite2,
#                           m_data_verification=data_verification, m_cibles=cibles, m_enti=entity)
#     else:
#         edit_id = request.POST["edit_id"]
#         indi = Indicateur.objects.get(id=int(edit_id))
#         indi.m_name = name
#         indi.m_fields = fields
#         indi.m_periodicite = periodicite
#         indi.m_sub_periodicite = periodicite2
#         indi.m_data_verification = data_verification
#         indi.m_cibles = cibles
#     indi.m_institution = basis(request)["actual_institution"]
#     indi.m_cibles = cibles
#     indi.m_numerateur = numerateur
#     indi.m_denominateur = denominateur
#     indi.m_coefficient = coeficient
#     indi.m_data_verification = sources_speci
#     indi.m_unite = unite

#     indi.objectif_indi = objectif_indi
#     indi.m_colors_code = codes_colors
#     indi.m_verification_indi = verification_moyen
#     indi.alerts_code = alerts_modals
#     indi.m_others = others

#     try:
#         ind.m_secundo_options = request.POST["other_fields"]
#     except:
#         pass
#     if int(default_calcul) == 1:
#         formula = "$" + str(numerateur) + "$" + " * " + str(coeficient) + " /" + "$" + str(denominateur) + "$"
#         indi.m_datalets_calcul = formula
#     indi.save()
#     return redirect('/evaluer/' + gest_val + '/' + gest_id)


# @login_required(login_url='/log_account')
# def evaluer(request, hierachie="0", gest_id=0, search=None, specifi_id=None):
#     context = basis(request)
#     hierachie = int(hierachie)
#     if specifi_id == None:
#         if hierachie != -1:
#             entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution=context[
#                 'actual_institution']).first().m_entity_type
#         else:
#             entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
#         context['entity'] = entity
#         context['hierachie'] = hierachie
#         context['hierachy'] = hierachie
#         if gest_id == 0:
#             elements = entity.lines()
#         else:
#             get_e = Entity.objects.get(id=int(gest_id))
#             context['base_val'] = get_e
#             elements = list(get_e.sub_entities())
#             context['sup_hierachy'] = list()
#             for t in get_e.sup_hierachie():
#                 context['sup_hierachy'].append(t)
#             context['sup_hierachy'].append(get_e)
#
#         if search != None:
#             tmp = elements
#             elements = list()
#             for t in tmp:
#                 if search in t.m_value_fields:
#                     elements.append(t)
#
#     else:
#         a_entity = Entity.objects.get(id=specifi_id)
#         entity = a_entity.m_type_entity
#         context['entity'] = entity
#         context['hierachie'] = hierachie
#         context['hierachy'] = hierachie
#         elements = [a_entity]
#     paginator_o = Paginator(elements, 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
#
#     context["indi_options"] = entity.indicateurs
#     try:
#         context["indi_options"][0] == None
#         context["no_secund"] = False
#     except:
#         context["no_secund"] = None
#
#     context['menu'] = 'g'
#     context['g_v'] = 'i2'
#     context['gest_id'] = gest_id
#     context['gest_val'] = hierachie
#     context['gest_val_1'] = hierachie + 1
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range
#     context['dataelts'] = dataelts
#     context['dataelts2'] = dataelts.exclude(m_default_value=None)
#
#     template = "webpages/ctn_bpf/evaluer.html"
#     return render(request, template, context)


def evaluer_detail(request, gest_id=0):
    return evaluer(request, "0", 0, None, gest_id)


def indic_plus(request, indic_id):
    context = basis(request)
    entity = Entity.objects.get(id=int(indic_id))
    template = "webpages/ctn_bpf/indic_plus.html"
    context['entity'] = entity
    return render(request, template, context)


def data_elements(request):
    context = basis(request)
    entity = Entity.objects.get(id=int(indic_id))
    template = "webpages/ctn_bpf/indic_plus.html"
    context['entity'] = entity
    return render(request, template, context)


def duplicate(request):
    from .utilities2 import duplicate_entity_logic, duplicate_tache, duplicate_entity, duplicate_operation
    generator_d = request.POST['generator_d']
    response = ""
    if generator_d == 'e':
        value = request.POST['dup_id']
        entity = Entity.objects.get(id=int(value))
        link = request.POST['link']
        response = redirect(link)
        # new = int(request.POST['new_dup'])
        new = 0
        try:
            name = request.POST['nom_dup']
            if name in [None, '']:
                name = "#"
        except:
            name = "#"
        try:
            relogic_dup = int(request.POST['relogic_dup'])
        except:
            relogic_dup = 0

        if relogic_dup == 0:
            duplicate_entity(entity, name)
        else:
            duplicate_entity_logic(entity, name)

    elif generator_d == 'o':
        value = request.POST['dup_id']
        entity = Operation.objects.get(id=int(value))
        link = request.POST['link']
        response = redirect(link)  # redirect("/taches/"+str(operation.m_tache.id))
        try:
            name = request.POST['nom_dup']
            if name in [None, '']:
                name = "#"
        except:
            name = "#"
        o2 = duplicate_operation(entity, name)
        o2.tache = entity.tache
        try:
            relogic_dup = (request.POST['reraci_dup'])
            r_personnel = Personnel.objects.get(id=int(request.POST["perso"]))
            r_accountable = Personnel.objects.get(id=int(request.POST["accountable"]))
            r_consulted = Personnel.objects.get(id=int(request.POST["consulted"]))
            r_informed = Personnel.objects.get(id=int(request.POST["informed"]))
            o2.personnel = r_personnel
            o2.accountable = r_accountable
            o2.consulted = r_consulted
            o2.informed = r_informed
        except:
            relogic_dup = 0
        o2.save()

    elif generator_d == 'i':
        values = request.POST['values_d'].split("|")
        response = redirect("/institution/")
        try:
            entity_dup = request.POST['entity_dup']
        except:
            entity_dup = "0"
        for v in values[:-1]:
            ins = Institution.objects.get(id=int(v))
            tmp = ins
            tmp.id = None
            tmp.save()

            # entity Institutions
            ins_entities = InsitutionEntities.objects.filter(m_institution__id=int(v))
            for i in ins_entities:
                tmp11 = i.m_entity_type
                tmp11.id = None
                tmp11.save()
                tmp1 = InsitutionEntities(m_institution=tmp, m_hierachie=i.m_hierachie, m_entity_type=tmp11)
                tmp1.save()
                if entity_dup == '1':
                    for i2 in tmp11.lines():
                        tmp2 = i2
                        tmp2.m_type_entity = tmp11
                        if tmp11.is_tache:
                            tmp3 = Tache.objects.get(id=tmp2.id)
                            tmp3.m_type_entity = tmp11
                        tmp2.id = None
                        tmp3.id = None
                        tmp2.save()
                        tmp3.save()

            # structures
            structures = Structure.objects.filter(institution__id=int(v))
            for i in structures:
                tmp2 = i
                tmp2.id = None
                tmp2.institution = ins
                tmp2.save()

            # aggregates
            aggregates = Aggregate.objects.filter(m_institution__id=int(v)).first()
            if aggregates != None:
                tmp3 = aggregates
                tmp3.id = None
                tmp3.m_institution = ins
                tmp3.save()

            # roles
            roles = Role.objects.filter(actual_institution__id=int(v))
            for r in roles:
                tmp4 = r
                tmp4.id = None
                tmp4.actual_institution = ins
                tmp4.save()
        request.session['new_ins'] = 1
    return response


def print_pdf(request):
    ind = int(request.GET.get('ind'))

    context = basis(request)
    operations = list()
    if ind == 1:
        tmp_ops = Operation.objects.filter()
    elif ind == 2:
        p = request.user.personnel
        tmp_ops = Operation.objects.filter(personnel=p)
    if ind in [1, 2]:
        for t in tmp_ops:
            if t.institution() == context['actual_institution']:
                operations.append(t)
        lines = list()
        taches_lines = list()
        for o in operations:
            tmp_line = str(
                o.tache) + "" + str(
                o) + "" + str(
                o.personnel)
            if o.periodes() != None:
                tmp_line += "" + str(
                    o.periodes().details_periode())
            else:
                tmp_line += "" + " "
            if context['actual_institution'].default_options != True:
                values = o.value_split()
                agr_fields = o.agr_fields()
                i = 0
                for v in agr_fields:
                    if v != 'file':
                        try:
                            tmp_line += "" + str(
                                values[i])
                        except:
                            tmp_line += "" + " "
                    else:
                        tmp_line += "" + " -- "
                    i += 1
                tmp_line += "" + o.status_op()
            lines.append(tmp_line)
    elif ind == 4:
        taches = context['actual_institution'].last_entity().lines()
        lines = list()
        for t in taches:
            hierachie = ""
            for h in t.sup_hierachie():
                hierachie += str(
                    h.get_name()) + ""
            fields = ""
            for f in t.values():
                fields += str(
                    f) + ""
            lines.append(hierachie + fields + str(
                t.progression()) + "" + str(
                t.m_date_modif))
    data = {
        'lines': lines
    }
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def dataelts(request, elt_id=0, elt_str=0):
    context = basis(request)
    context['g_v'] = 'eD'
    if elt_id == 0:
        template = "webpages/ctn_bpf/dataelts.html"
        indicateurs = Indicateur.objects.filter()
        dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
        context['indicateurs'] = indicateurs
        context['dataelts'] = dataelts
    else:
        template = "webpages/ctn_bpf/data_element_id.html"
        dataelt = DataElement.objects.get(id=int(elt_id))
        context["dataelt"] = dataelt
        context["structures"] = Structure.objects.filter(institution=context["actual_institution"])
        if elt_str == 0:
            context["actu_struc"] = context["structures"].first()
        else:
            context["actu_struc"] = Structure.objects.get(id=int(elt_str))
        # lines = dataelt
        tmps = dataelt.element_values(context["actu_struc"])
        periods_tmp = dict()
        p_tmps = list()

        class DEL:
            def __init__(self, e1, e2, e3=0):
                self.sup_period = e1
                self.period = e2
                self.value = e3

            def __repr__(self):
                return self.sup_period

        for t in tmps:
            a = t.m_dataset_value.m_period_value + "-" + t.m_dataset_value.m_sub_period_value
            if a in p_tmps:
                if t.m_value not in ["", None]:
                    periods_tmp[a].value += float(t.m_value)
            else:
                elts = DEL(t.m_dataset_value.m_sub_period_value, t.m_dataset_value.m_period_value, 0)
                if t.m_value not in ["", None]:
                    elts.value = float(t.m_value)
                else:
                    elts.value = 0
                periods_tmp[a] = elts
                p_tmps.append(a)
        context["values"] = list()
        for p in p_tmps:
            context["values"].append(periods_tmp[p])
    # context["values"].group_by = ['designation']
    return render(request, template, context)


@login_required(login_url='/log_account')
def dataelts_edit(request, elt_id):
    template = "webpages/ctn_bpf/dataelts_edit.html"
    context = basis(request)
    indicateurs = Indicateur.objects.filter()
    dataelts = DataElement.objects.filter(id=elt_id).first()
    context['indicateurs'] = indicateurs
    context['dataelts'] = dataelts
    return render(request, template, context)


@login_required(login_url='/log_account')
def dataelts_indic(request):
    template = "webpages/ctn_bpf/dataelts_indic.html"
    context = basis(request)
    context['is_indi'] = True
    context['indicateurs'] = list()
    tmps_is = Indicateur.objects.filter()
    dataelts = DataElement.objects.filter()
    for i in tmps_is:
        enti = i.m_enti
        if enti != None:
            if enti.m_type_entity.get_institution(context['actual_institution']) != None:
                context['indicateurs'].append(i)
    context['dataelts'] = dataelts
    return render(request, template, context)


def ajax_progression(request):
    plannify = request.GET.get("plannify")
    periode = Periode.objects.get(id=int(request.GET.get("periode")))

    year = request.GET.get("year")
    institution = request.GET.get("institution")
    institution = Institution.objects.get(id=int(institution))
    sub_period = institution.default_subperiod

    try:
        mods = request.GET.get("mods")
    except:
        mods = None

    try:
        entity = request.GET.get("entity")
    # entity_type =  request.GET.get("entity_type")
    except:
        entity = None

    progression = 0
    t_plannify = list()

    """
	for t in taches:
		t_plannify.append(t.plannification())
	"""
    result = list()
    if plannify != "#":
        cumulate = int(request.GET.get("cumul1"))  # 1 #Mettre une variable
        nb_ops = 0
        ops = list()
        if entity == None:
            operations = Operation.objects.filter(m_institution=institution)
        else:
            operations = Entity.objects.get(id=int(entity)).operations()
        bool(operations)
        for o in operations:
            ops.append(o)

        try:
            tmp_val = get_period_values(periode, plannify + "_")[0]
        except:
            tmp_val = None

        if tmp_val != None:
            result.append(tmp_val)
            for o in ops:
                if o.m_tache_plannification != None:
                    v = get_period_values(periode, o.m_tache_plannification + "_")
                    cond1 = (cumulate == 0) and int(v[0]) == int(tmp_val)
                    cond2 = (cumulate == 1) and int(v[0]) <= int(tmp_val)
                    if len(v) > 0:
                        if cond1 or cond2:
                            progression += o.progression()
                            nb_ops += 1
                else:
                    pass
        glob_ops = int(request.GET.get("cumul2"))  # 1
        if glob_ops == 1:
            nb_ops = operations.count()
        if nb_ops > 0:
            progression /= nb_ops
    else:
        if mods in [None, "0"]:
            prs = list()
            tops = institution.top_entity().lines()
            plannify_all = request.GET.get("plannify_all")
            plannify_all = plannify_all.split("#")[:-1]
            t_plannify2 = t_plannify
            t_plannify = subperiods_value(periode, year)
            mrd_t = list()
            i_t = 0
            for t in tops:
                mrd_t.append(list())
                for p in t_plannify:
                    mrd_t[i_t].append(0)
                i_t += 1

            i_t = 0

            for to in tops:
                nb_jT = 0
                if to.m_type_entity.is_tache == False:
                    tach = to.taches()
                else:
                    tach = [to]
                ops = list()
                for t in tach:
                    ops += t.operations()
                t_plannify2 = list()
                for a in tach:
                    a = Tache.objects.get(id=a.id)
                    t_plannify2.append(a.plannification())
                j_t = 0
                for p in t_plannify:
                    progression = 0
                    nb_jT = 0
                    nb_ops = 0
                    if p != None:
                        for o in ops:
                            try:
                                v = get_period_values(periode, o.m_tache_plannification + "_")
                                if len(v) > 0:
                                    if int(v[0]) == int(p):
                                        progression += o.progression()
                                    nb_ops += 1
                            except:
                                pass
                        if nb_ops != 0:
                            mrd_t[i_t][j_t] = round(progression / nb_ops, 2)
                        j_t += 1
                i_t += 1
            prs = list()
            j = 0
            for t in mrd_t:
                tmp = ""
                for s in t:
                    tmp += str(s) + "#"
                prs.append(tmp)
        else:
            prs = list()
            tops = institution.top_entity().lines()
            for t in tops:
                result = list()
                operations = t.operations()
                nb_x = len(institution.default_period.decoup_slip()) * len(
                    institution.default_subperiod.decoup_desc_slip())
                if institution.default_period.m_logic_type == 3:
                    chronogrs = ["0_9_9_9_9_", "9_0_9_9_9_", "9_9_0_9_9_", "9_9_9_0_9_", "9_9_9_9_0_"]
                    year = request.GET.get("year")
                    TP1 = subperiods_value(institution.default_period, int(year))
                    TP2 = list()
                    dic_ops = dict()
                    for t in TP1:
                        a = transform_to_plannify(t)
                        TP2.append(a)
                        for c in chronogrs:
                            dic_ops[a + "-" + c] = {
                                "progress": 0,
                                "nb_ops": 0
                            }
                    # operations = operations.filter(m_tache_plannification__in=TP2)

                    for o in operations:
                        dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation][
                            "progress"] += o.progression()
                        dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation]["nb_ops"] += 1
                    for a in TP2:
                        for c in chronogrs:
                            if dic_ops[a + "-" + c]["nb_ops"] > 0:
                                tmp = str(dic_ops[a + "-" + c]["progress"] / dic_ops[a + "-" + c]["nb_ops"])
                            else:
                                tmp = "0"
                            result.append(tmp)
                    prs.append("#".join(result))
    # progression /= len(taches)
    data = {
        'plannify': plannify,
        'result': result,
        'progression': round(progression, 2)
    }
    if plannify == "#":
        data['progressions'] = prs
    return JsonResponse(data)


def ajax_calcul_date(request):
    plannify = request.GET.get('plannify')
    periode = Periode.objects.get(id=int(request.GET.get("periode")))
    tmp_val = get_period_values(periode, plannify + "_")[0]

    ta1 = datetime.date(int(tmp_val[:4]), int(tmp_val[4:6]), int(tmp_val[6:8]))
    ta2 = datetime.date(int(tmp_val[8:12]), int(tmp_val[12:14]), int(tmp_val[14:16]))
    ta3 = ta2
    test = ta2.isoweekday()
    if test > 1:
        ta2 -= datetime.timedelta(test - 1)
        ta3 += datetime.timedelta(7 - test)
    test_dates = list()
    for i in range(5):
        test_dates.append("Du " + str(ta2) + " Au " + str(ta3))
        ta2 += datetime.timedelta(7)
        ta3 += datetime.timedelta(7)
    bumps1 = [int(tmp_val[:4]), int(tmp_val[4:6]) - 1, int(tmp_val[6:8])]
    bumps2 = [int(tmp_val[8:12]), int(tmp_val[12:14]) - 1, int(tmp_val[14:16])]
    data = {
        'tmp_val': tmp_val,
        'test_dates': test_dates,
        'ta1': str(ta2),
        'result': tmp_val
    }
    return JsonResponse(data)


def delete_mul(request):
    entities = request.POST["multi_values"]
    hierachy = int(request.POST['hierachy'])
    g_v = request.POST['g_v']
    try:
        g_v_2 = request.POST['g_v_2']
    except:
        g_v_2 = None

    from .utilities2 import delete_entities, delete_operations
    if g_v != "o":
        delete_entities(entities)
        response = '/gestionnaire/' + str(hierachy)
        if g_v_2 is not None:
            response = '/gestionnaire/' + str(hierachy - 1)
            response += '/' + str(g_v_2) + '/'
    else:
        a = delete_operations(entities)
        response = '/taches/' + str(a.id) + '/'
    return redirect(response)


@login_required(login_url='/log_account')
def data_form(request, nature=-1, elt_id=0):
    template = "webpages/ctn_bpf/data_form.html"
    context = basis(request)
    nature = int(nature)
    context["nature"] = nature
    context["elt_id"] = elt_id
    periode_ok = PeriodeOk.objects.all().distinct('annee')
    context['periode_ok'] = periode_ok
    if nature != -1:
        template = "webpages/ctn_bpf/data_form_plus.html"
        dataform = DataSet.objects.filter(id=nature, m_institution=context["actual_institution"]).first()
        context["element"] = dataform
        if dataform != None:
            next_nature = nature + 1
            lines = dataform.dS_values()
        else:
            lines = list()
    else:
        next_nature = 1
        lines = DataSet.objects.filter(m_institution=context["actual_institution"])
        try:
            if context["permissions"] == 0 or context["no_simple_user"] == False:
                # role
                role = request.user.personnel.get_function(context["actual_institution"].id).m_role
                lines = lines.filter(m_roles=role)
        except:
            pass
    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context["g_v"] = "dSV"
    context["menu"] = "h"
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    return render(request, template, context)


def error_404(request, exception):
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/errors.html"
        context = basis(request)
    else:
        template = "webpages/ctn_bpf/errors_zero.html"
        context = dict()
    context['error'] = 404
    context['exception'] = exception
    return render(request, template, context)


def error_500(request):
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/errors.html"
        context = basis(request)
    else:
        template = "webpages/ctn_bpf/errors_zero.html"
        context = dict()
    return render(request, template, context)


def extra(request, name=""):
    context = basis(request)
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/extra.html"
        files = OperaFile.objects.filter(m_institution=context["actual_institution"]).select_related("m_institution")
        bool(files)
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None
    else:
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None
        template = "webpages/ctn_bpf/extra.html"
        files = OperaFile.objects.filter(is_public=1)
        bool(files)
    if name != None:
        tmp1 = files.filter(m_name__contains=name)
        tmp2 = list()  # files.filter(m_file__url__contains=name)
        files = list()
        for t in tmp1:
            files.append(t)
        for t in tmp2:
            files.append(t)
    paginator_o = Paginator(files, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context["g_v"] = "ex"
    context["menu"] = "x"
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def get_progressions(request):
    list_ids = request.GET.get('list_ids').split("#")[:-1]
    list_ids = [int(i) for i in list_ids]
    entities = Entity.objects.filter(id__in=list_ids)

    result = list()
    data_ids = list()
    type_Progression = request.GET.get("type_progression")
    if type_Progression == "P":
        for i in entities:
            result.append(i.progression())
            data_ids.append(str(i.id))
    elif type_Progression == "T":
        for i in entities:
            result.append(i.technical_progression())
            data_ids.append(str(i.id))
    elif type_Progression == "F":
        for i in entities:
            result.append(i.finan_progression())
            data_ids.append(str(i.id))
    data = {
        'result': result,
        'ids': data_ids
    }
    return JsonResponse(data, safe=False)


def get_indi_data(request):
    data_id = request.GET.get('indi_id')
    ind = Indicateur.objects.get(id=int(data_id))
    nums = list()
    ids = list()
    for i in ind.indi_numerateur():
        nums.append(str(i))
        ids.append(i.id)
    denums = list()
    for i in ind.indi_denum():
        denums.append(str(i))

    period = ind.m_periodicite
    sub_period = ind.m_sub_periodicite
    cibles = ind.m_cibles
    data = {
        'nom': str(ind),
        'nums': nums,
        'denums': denums,
        'ids': ids
    }
    return JsonResponse(data, safe=False)


# def consult_oper(request):
#     operation = Operation.objects.get(id=int(request.POST["operation"]))


#     request.session['new_rapport'] = 2
#     observations = request.POST["observations"]
#     file = request.FILES['file']
#     oC = OperationConsulted(m_operation=operation,m_observations=observations, file=file)

#     oC.save()
#     if request.method == "POST":
#         m_commentaire = request.POST.get('observations')
#         file = request.FILES['file']
#         save_avis = HistoricRACI.objects.create(m_commentaire=m_commentaire, m_role="C",
#                                                 m_operation_id=request.POST["operation"], file=file)
#         save_avis.save()
#     return redirect("/operations/")


@login_required(login_url='/log_account')
def personnels_raci(request, name=None):
    template = "webpages/ctn_bpf/persos_raci.html"
    context = basis(request)
    context['g_vs'] = 'p2'
    context['g_v'] = 'p2_RACI'

    context['searches'] = []
    context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
        actual_institution=context['actual_institution']).select_related('actual_institution')})
    context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
        institution=context['actual_institution']).select_related('institution')})

    ents = list()
    ieS = list(context['actual_institution'].get_entities())
    bool(ieS)
    # n = ieS.count()
    j = 0

    for i in ieS[:-2]:
        if True:
            tmp = {
                "hierachie": i.m_hierachie,
                "label": str(i),
                'entities': list()
            }
            if j == 0:
                tmp["entities"] = ieS[0].m_entity_type.lines()
            ents.append(tmp)
            j += 1
        else:
            pass
    context['ents'] = ents

    # context['matieres'] = ies[-2].lines()

    elements = list()
    tmps = Personnel.objects.filter()
    for t in tmps:
        if context['actual_institution'] in t.all_institutions():
            elements.append(t)

    akas = list()
    tmp_perso = Personnel.objects.filter()
    # pFs = Personnel_Function.objects.filter(m_institution=context["actual_institution"]).values("m_personnel")

    if True:
        for t in tmp_perso:
            if context['actual_institution'] in t.all_institutions():
                atmp = {
                    'id': t.id,
                    'prenom': t.prenom,
                    'nom': t.nom,
                    'photo': t.photo,
                    'get_function': t.get_function(context['actual_institution'].id),
                    'RACI_entities': t.RACI_entities()
                }
                akas.append(atmp)
            # lines2.add(t)
    else:
        context['lines'] = lis_peros

    if name != None:
        name = name.lower()
        tmps = akas
        akas = list()
        context['lines'] = list()
        for tt in tmps:
            ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
            for t in ta:
                if name in str(t):
                    akas.append(tt)
                    break

    paginator_o = Paginator(akas, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date

    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def data_sets(request, indi_id=0):
    context = basis(request)
    # data_set = DataSet.objects.get(id=indi_id)
    # context['data_set']=data_set
    periode = Periode.objects.all()
    context['periode'] = periode
    indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
    template = "webpages/ctn_bpf/data_sets.html"
    context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
    context["indicateurs"] = indicateurs
    context["menu"] = "h"
    # if indi_id != 0:
    # 	dataset = DataSet.objects.get(id=int(indi_id))
    # 	context["dataset"] = dataset
    """
	context["indicateur"] = indicateur
	context["element"]= indicateur.m_enti
	context["indi_id"] = indi_id
	"""
    return render(request, template, context)


def data_sets_design(request, dS_id):
    data_set = DataSet.objects.get(id=dS_id)
    template = "webpages/ctn_bpf/data_sets_design.html"
    context = basis(request)
    context["dataset"] = data_set
    context["design"] = 1
    return render(request, template, context)


# def ajax_form(request):
#     dF = DataSet.objects.get(id=int(request.GET.get("id_dataset")))
#     # dF = indicateur.dataset()
#     structures = list()
#     structure_id = list()
#     for s in dF.m_structures.filter():
#         structures.append(str(s))
#         structure_id.append(s.id)
#     data = {
#         'periode': dF.periodicite_id,
#         'subperiode': dF.m_sub_periode,
#         'structures': structures,
#         'structures_id': structure_id,
#         'form': dF.m_formulaire
#     }
#     return JsonResponse(data, safe=False)


def ajax_hiera_struc(request):
    institution = request.GET.get("institution")
    logic_strc = request.GET.get("logic_strc")
    m_institution = Institution.objects.get(id=int(institution))
    elt_logic = ""
    for e in logic_strc.split("|")[:-1]:
        a = e.split("#")
        if len(a) > 1:
            elt_logic += a[1] + "|"
        else:
            elt_logic += a[0] + "|"
    structures = Structure.objects.filter(institution=m_institution, values_hierachy__contains=elt_logic)
    data = {
        'ids': list(),
        'names': list()
    }
    data["nb_s"] = elt_logic
    for s in structures:
        data["ids"].append(s.id)
        data["names"].append(str(s))
    return JsonResponse(data, safe=False)


def ajax_RACI_user(request):
    type_RACI = request.GET.get("type_RACI")
    perso = request.GET.get("perso")
    institution = request.GET.get("institution")
    entity_filter = request.GET.get("entity_filter")

    data = dict()
    if type_RACI == "1":
        personnel = Personnel.objects.get(id=int(perso))
        rEL = list()
        data["elts"] = list()
        data["elts_id"] = list()
        data["elts_hierachy"] = list()

        if entity_filter not in ["0", None]:
            entity_filter = int(entity_filter)
            pR = PersonnelRACI.objects.get(id=entity_filter)
            data["elt_actu_id"] = str(pR.m_entity)
            data["elt_actu"] = pR.m_entity.id
        else:
            data["elt_actu_id"] = "#"
            data["elt_actu"] = "#"

        for p in personnel.get_function(institution).m_role.entity_levels():
            rEL.append(str(p))
            data["elts_hierachy"].append(p.m_hierachie)
            tmp_elt = list()
            tmp_id = list()
            for p2 in p.m_entity_type.lines():
                tmp_elt.append(str(p2))
                tmp_id.append(int(p2.id))
            data["elts"].append(tmp_elt)
            data["elts_id"].append(tmp_id)
        data["roles"] = rEL
    # data["test_rEL"] = rEL
    return JsonResponse(data, safe=False)


def ajax_RACI_user_manage(request):
    menu = request.GET.get("menu")
    # entity = Entity.objects.get(id=int(request.GET.get("entity")))
    if menu == "o":
        tache = Tache.objects.get(id=int(request.GET.get("entity")))
        perRACI = tache.personnelRACI()
        data = {
            "responsable": perRACI["responsable"],
            "accounted": perRACI["accounted"],
            "consulted": perRACI["consulted"],
            "informed": perRACI["informed"],
            "test": ""
        }
        allis = ["responsable", "accounted", "consulted", "informed"]
        for s in tache.sup_hierachie():
            all_none = False
            perRACI = s.personnelRACI()
            for al in allis:
                data["test"] += str(perRACI[al]) + "#"
                if data[al] == [None]:
                    all_none = True
                    if perRACI[al] != [None]:
                        data[al] = perRACI[al][1].id
                if all_none == False:
                    break
    return JsonResponse(data, safe=False)


def assign_RACI(request):
    personnel = Personnel.objects.get(id=int(request.POST["perso_assign"]))
    values_assign = request.POST["values_assign"].split("$")
    try:
        operations_check = request.POST["operations_recursive"]
    except:
        operations_check = None
    for v in values_assign[:-1]:
        # entity = Entity.objects.get(id=int(v.split("#")[0]))
        entity = int(v.split("#")[0].replace("'", ""))
        entity = Entity.objects.get(id=entity)
        raci_role = v.split("#")[1]
        if "1" in raci_role:
            if operations_check != None:
                operations = entity.operations()
                rs = raci_role.split("|")
                for o in operations:
                    if rs[0] == "1":
                        o.personnel = personnel
                    if rs[1] == "1":
                        o.accountable = personnel
                    if rs[2] == "1":
                        o.consulted = personnel
                    if rs[3] == "1":
                        o.informed = personnel
                    o.save()
            pR = PersonnelRACI(m_personnel=personnel, m_entity=entity, m_roles=raci_role)

            pR.save()
    return redirect("/personnels_raci/")


def print_pdf(request):
    name_pdf = request.GET.get("name_pdf")
    html = request.GET.get("html")
    html = html.replace("<table", "<table border='1' width='100%' cellpadding='5px'")
    html = html.replace("<td", "<td width='100' ")
    html = html.replace("<th", "<th width='100' ")

    data = dict()

    class MyFPDF(FPDF, HTMLMixin):
        pass

    pdf = MyFPDF()
    pdf.add_page()
    pdf.write_html(html)
    pdf.output('html3.pdf', 'F')
    return JsonResponse(data, safe=False)


# @login_required(login_url='/log_account')
# def List(request):
#     template = "webpages/ctn_bpf/tache_non.html"
#     operation = Operation.objects.all()
#     count = Operation.objects.count()
#     context = basis(request)
#     context["operation"] = operation
#     context["count"] = count
#     return render(request, template, context)


# def taches_effectuee(request):
#     template = "webpages/ctn_bpf/tache_effectuee.html"
#     operation_detail = OperationDetails.objects.all()
#     context = basis(request)
#     context['operation_detail'] = operation_detail
#     return render(request, template, context)


def Avis(request, id):
    #  template="webpages/ctn_bpf/avis_raci.html"
    operation_historic = HistoricRACI.objects.all()
    operation = Operation.objects.get(id=id)
    context = basis(request)
    context['operation_historic'] = operation_historic
    operation_rapport = operation.get_operation_details_invalid().last()
    context["operation_rapport"] = operation_rapport
    try:
        operation = Operation.objects.get(id=id)
        context['operation'] = operation
    except Operation.DoesNotExist:
        context['error_message'] = ""
    return render(request, "webpages/ctn_bpf/avis_raci.html", context)


def recuperer_personnel(request):
    result = Personnel.objects.filter(id=request.POST.get('mail')).values('nom', 'prenom', 'tel').first()
    if result is not None:
        return JsonResponse(result)
    else:
        return JsonResponse({'error': 'Aucun enregistrement trouve.'})


def design_form(request):
    context = basis(request)
    if request.method == "POST":
        form_name = request.POST['form_name']
        elements = request.POST.getlist('element')
        indicateurs = request.POST.getlist('indicateur')
        periode = request.POST['periode']
        sub_periode = request.POST['sub_periode']
        actual_institution = context['actual_institution'].id
        role = request.POST.getlist('role')
        structure = request.POST.getlist('structure')
        # print("role:",role)
        # print("structure:",structure)
        # print("indicateur:",indicateurs)
        dS = DataSet.objects.create(m_name=form_name, m_periode=periode, m_sub_periode=sub_periode,
                                    m_institution_id=actual_institution)

        dS.save()
        dS.m_indicateurs.set(indicateurs)
        dS.m_dataelements.set(elements)
        dS.m_roles.set(role)
        dS.m_indicateurs.set(indicateurs)
        dS.m_structures.set(structure)
        responsemndjn = "/data_sets/design/" + str(dS.id) + "/"
        return redirect(responsemndjn)


# def edit_dataset(request, id=0):
#     context = basis(request)
#     data_set = DataSet.objects.get(id=id)
#     context['data_set'] = data_set
#     indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
#     template = "webpages/ctn_bpf/data_sets_edit.html"
#     context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
#     context["indicateurs"] = indicateurs
#     context["menu"] = "h"
#     if id != 0:
#         dataset = DataSet.objects.get(id=int(id))
#         context["dataset"] = dataset

#     return render(request, template, context)


def count_operations(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    count = Operation.objects.filter(m_institution_id=actual_institution, etat="0").count()
    return JsonResponse({'count': count})


def count_tache_consulted(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    count_tache_consulted = Operation.objects.filter(perso=personnel_id, etat="0").count()
    return JsonResponse({'count_tache_consulted': count_tache_consulted})


def count_informed(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    count_informed = OperationDetails.objects.filter(request.user.personnel == personnel.id, etat="2").count()

    return JsonResponse({'count_informed': count_informed})


# def Avis_informed(request, id=0):
#     context = basis(request)
#     template = "webpages/ctn_bpf/avis_informed.html"
#     operation = Operation.objects.get(id=int(id))
#     context['operation'] = operation
#     operation_historic = HistoricRACI.objects.all()
#     context['operation_historic'] = operation_historic
#     operation_rapport = operation.get_operation_details_invalid().last()
#     context["operation_rapport"] = operation_rapport
#     return render(request, template, context)


# def tache_consulted(request):
#     context = basis(request)
#     atual_institution = context['actual_institution']
#     operation = Operation.objects.all()
#     context['operation'] = operation
#     template = "webpages/ctn_bpf/tache_consulted.html"
#     return render(request, template, context)


def edit_data(request, id):
    if request.method == "POST":
        nom_donnee = request.POST['nom_donne']
        data_eltype = request.POST['data_eltype']

        aggregation = request.POST['aggregation']
        comment = request.POST['comment']
        default_value = request.POST['default_value']
        nature_donne = request.POST['nature_donne']
        data_element = DataElement.objects.filter(pk=id)

        data_element.update(m_name=nom_donnee, m_value_type=data_eltype, m_aggregation_type=aggregation,
                            m_description=comment, m_default_value=default_value, m_domain_type=nature_donne)
        # save_data.update()
        return redirect('../dataelts')


# def count_persos(request):
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     perso = request.user.personnel.id

#     count_persos = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="2").count()
#     return JsonResponse({'count_persos': count_persos})


# def count_accountable(request):
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     perso = request.user.personnel.id
#     operation = Operation.objects.all()
#     m_operation_consulted = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="1").count()
#     return JsonResponse({'m_operation_consulted': m_operation_consulted})


def count_effectuee(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    operation = Operation.objects.all()
    count_effect = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="1").count()
    return JsonResponse({'count_effect': count_effect})


# -*- coding: utf-8 -*-
from asgiref.sync import sync_to_async

from django.http import FileResponse, HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import render, redirect, get_object_or_404
from django.core.paginator import Paginator
from django.contrib.auth import authenticate, login, logout

from django.core.mail import send_mail, send_mass_mail

from django.core.mail import EmailMessage, EmailMultiAlternatives
from django.core.cache import cache
from django.views.decorators.cache import cache_page

from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.db.models import ProtectedError
from django.contrib.auth.decorators import login_required

from .models import *
from .utilities import get_period_values, set_pv_tp, subperiods_value, transform_to_plannify
from .utilities2 import split_extras1
import os
import datetime


@login_required(login_url='/log_account')
def admin_institution(request):
    template = "webpages/ctn_bpf/institution_admin.html"
    context = {
        'edit': 0
    }
    return render(request, template, context)


@login_required(login_url='/log_account')
def contact(request):
    template = "webpages/ctn_bpf/contact.html"
    context = {
        'edit': 0
    }
    return render(request, template, context)


def edit_institution(request, institution_id):
    template = "webpages/ctn_bpf/institution_admin.html"
    context = {
        'edit': 1,
        'institution': Institution.objects.get(id=int(institution_id))
    }
    return render(request, template, context)


def save_edit_institution(request):
    nom = request.POST["nom"]
    code = request.POST["code"]
    try:
        file = request.FILES["file"]
    except:
        file = None

    insti_id = int(request.POST['insti_id'])
    institution = Institution.objects.get(id=insti_id)
    institution.sigle = code
    institution.nom = nom
    if file != None:
        institution.img = file
    institution.save()
    return redirect('/')


# def save_institution(request):
#     nom = request.POST["nom"]
#     url = request.POST['url']
#     response = redirect("/")
#     try:
#         code = request.POST["code"]
#     except:
#         code = nom
#     try:
#         image = request.FILES["file"]
#     except:
#         image = OperaFile.objects.filter(m_name="IDF").first().m_file  # Instituti Defaut FIle
#     try:
#         desc = request.POST['desc']
#     except:
#         desc = " "
#     try:
#         app_code = request.POST['app_code']
#     except:
#         app_code = "#"
#     # Informations Savers
#
#     owner = Owner.objects.filter(m_code=app_code).first()
#     if owner == None:
#         response = specific_log(request, 2)
#     else:
#         nb_institutions = owner.nb_institutions()
#         if (owner.m_bought == False and nb_institutions == 0) or (
#                 owner.m_bought == True and nb_institutions <= owner.m_type):
#             institution = Institution(sigle=code, nom=nom, img=image,url=url)
#             institution.owner = owner
#             institution.save()
#             owner.m_user.personnel.actual_institution = institution
#             owner.m_user.personnel.save()
#             try:
#                 check_mail = request.POST['check_mail']
#             except:
#                 check_mail = False
#             if check_mail == True:
#                 owner.m_mail_notified = True
#                 owner.save()
#             # owner.save()
#             if request.user.is_authenticated == False:
#                 user = owner.m_user
#                 login(request, user)
#
#             # tache hierachy modifier
#             entity = EntityType(m_nom="Projet")
#             entity.m_fields = "Nom du Projet|Objectif du Projet|"
#             entity.m_type_fields = "text|text|"
#             entity.m_fields_rapported = "Commentaires|"
#             entity.m_type_fields_rapp = "text|"
#             entity.save()
#             type_entity = InsitutionEntities(m_hierachie=0)
#             type_entity.m_entity_type = entity
#             type_entity.m_institution = institution
#             type_entity.save()
#
#             # Tache Launcher
#             entity = EntityType(m_nom="Tache")
#             entity.is_tache = True
#             entity.m_fields = "Nom de la Tache|Objectif de la Tache|"
#             entity.m_type_fields = "text|text|"
#             entity.m_fields_rapported = "Commentaires|"
#             entity.m_type_fields_rapp = "text|"
#             entity.save()
#             type_entity = InsitutionEntities(m_hierachie=1)
#             type_entity.m_entity_type = entity
#             type_entity.m_institution = institution
#             type_entity.save()
#
#
#             personnel = Personnel.objects.get(bd_user__id=request.user.id)
#             role = Role(nom="Administrateur " + str(institution), description="Supervise la Plateforme",
#                         actual_institution=institution, permissions=100)
#             role.save()
#             function = Personnel_Function(m_institution=institution, m_personnel=personnel, m_role=role)
#             function.save()
#             role = Role(
#                 nom=" " + str(
#                     institution),
#                 description="",
#                 actual_institution=institution, permissions=0)
#             role.save()
#
#             # Initialisation des Structures
#             structure = Structure(nom=institution.sigle, designation=institution.nom)
#             structure.institution = institution
#             structure.save()
#             pers_struc = Personnel_Structure(m_personnel=personnel, m_structure=structure)
#             pers_struc.save()
#
#             # Initialisation des Periodes
#             configurations_periodes = Periode.objects.filter(m_initial=True)
#             for p in configurations_periodes:
#                 per = Institution_Periodes(m_periode=p, m_institution=institution, m_default=True)
#                 per.save()
#             institution.default_period = configurations_periodes.last()
#             institution.default_subperiod = institution.default_period.sub_periods().first()
#             institution.save()
#         else:
#             request.session['too_much_ins'] = 1
#             response = redirect('/log_account/')
#     return response


def set_default_period(request, period=0, sub_period="#"):
    # r_institution = request.COOKIES['institution']
    r_institution = request.user.personnel.actual_institution
    if int(period) != 0:
        r_periode = Periode.objects.get(id=int(period))
        r_institution.default_period = r_periode
        r_institution.default_subperiod = r_periode.sub_periods().last()
    if sub_period != "#":
        r_sub_period = SubPeriode.objects.get(id=int(sub_period))
        r_institution.default_subperiod = r_sub_period
    r_institution.save()
    return redirect('/configurations/')


def authorized_institutions(request):
    if request.user.is_staff:
        institutions = Institution.objects.filter()
    else:
        institutions = [request.user.personnel.get_institution]
    return institutions


def basis(request):
    permissions = list()
    actual_institution = None
    animate = None
    animate2 = None
    context = dict()
    user = request.user
    try:
        if request.session['logged'] == 1:
            request.session['logged'] = 0
            animate = 0
    except:
        pass
    try:
        if request.session['new_rapport'] == 1:
            request.session['new_rapport'] = 0
            animate2 = 0
        elif request.session['new_rapport'] == 2:
            request.session['new_rapport'] = 0
            animate2 = 1
    except:
        pass

    if request != None and user.is_authenticated:
        actual_institution = user.personnel.actual_institution
        bool(actual_institution)

        programmes = list()  # request.user.personnel.get_programmes()
        nb_programmes = 0

        personnel = request.user.personnel
        bool(personnel)

        prenom = personnel.prenom
        nom = personnel.nom
        role = personnel.get_function(actual_institution.id)
        picture = personnel.photo
        functi = role
        entity_manage = None
        if actual_institution.owner != None and actual_institution.owner.m_user == request.user:
            permissions = 100
        elif functi == None:
            permissions = 10
        else:
            permissions = functi.m_role.permissions
            if functi.m_role.m_nature == "1":
                # enti = funxti
                eRACI = personnel.RACI_manage()
                if eRACI != None:
                    if eRACI[0] != None:
                        entity_manage = eRACI[0]
            elif permissions < 0:
                entity_manage = functi.m_entity
        context = {
            'actual_institution': actual_institution,
            'animate': animate,
            'animate2': animate2,
            'prenom': prenom,
            'role': role,
            'nom': nom,
            'picture': picture,
            'permissions': permissions,
            'programmes': programmes,
            'nb_programmes': nb_programmes,
            'entity_manage': entity_manage
        }
        if entity_manage != None:
            context["my_entities"] = personnel.RACI_list()
            context["no_simple_user"] = context["my_entities"] != []
            context["type_ents"] = entity_manage.m_type_entity
            context["hierachie_ent"] = entity_manage.m_type_entity.hierachie()

        context['default_struc_name'] = actual_institution.default_struc_name
        context['this_period'] = datetime.datetime.now()
        context['operations_name'] = actual_institution.operations_name
        context['insti_structures'] = actual_institution.structures()
        context['default_period'] = context['actual_institution'].default_period

        get_entities = actual_institution.get_entities()

        context['get_entities'] = get_entities
        context['get_entities2'] = list(get_entities)[:-1]

        top_entity = context['actual_institution'].top_entity()
        bool(top_entity)
        context['top_entity'] = top_entity

        last_entity = context['actual_institution'].last_entity()
        bool(last_entity)
        context['last_entity'] = last_entity

        if actual_institution.finan_options != None:
            context["finances"] = actual_institution.finances()
            context["real_finances"] = 0
            context["finan_options"] = actual_institution.finan_options
            context["depenses_eff"] = actual_institution.depenses_eff

        tmp_week = int(max(1, context['this_period'].day / 7))
        if context['this_period'].day > context['this_period'].isoweekday() * tmp_week:
            tmp_week += 1
        context['this_week'] = tmp_week
        context['operations_modules'] = Aggregate.objects.filter(
            m_institution__id=context['actual_institution'].id).select_related('m_institution').first()


    else:
        actual_institution = None
        context["institution"] = None
    return context


def agenda(request):
    template = "webpages/ctn_bpf/agenda_week.html"
    context = basis(request)
    return render(request, template, context)


def log_account(request):
    template = "webpages/ctn_bpf/login.html"
    context = dict()
    try:
        if request.session['too_much_ins'] == 1:
            context['too_much_ins'] = True
            request.session['too_much_ins'] = None
    except:
        pass
    try:
        if request.session['new_user'] == 1:
            # request.session['new_user'] = 0
            animate = 1
            context['new_user'] = animate
            request.session['new_user'] = 0
    except:
        pass
    try:
        context['bad_log'] = (request.session['bad_log'] != None and request.session['try_log'] != None)
        request.session['try_log'] = None
    except:
        pass
    return render(request, template, context)


# @cache_page(60 * 15)
def index_log(request, nature):
    if True:
        context = basis(request)
        operation_m = Operation.objects.all()
        context['operation_m'] = operation_m
        operation_details = OperationDetails.objects.all()
        context['operation_details'] = operation_details
        context['menu'] = 'i'
        elements = list()
        top_entity = context['top_entity']

        tops = top_entity.lines()
        bool(tops)

        context['lvl'] = nature

        if nature == -1 and context['permissions'] >= 0:
            nature = 0

        if context['permissions'] == 0:
            nature = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
                'm_institution').last().m_hierachie
            bool(nature)

        context['nature'] = nature
        context['next_nature'] = nature + 1
        # If any Tops have been created, redirection

        if tops.first() == None:
            template = "webpages/ctn_bpf/index_empty.html"
            context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                'actual_institution']).select_related('m_institution').first().m_entity_type
            tmp_lines = list()
        else:
            if context["entity_manage"] != None:
                hierachy = context["entity_manage"].m_type_entity.hierachie()
                hierachi_id = context["entity_manage"].id
                return redirect("gestionnaire/" + str(hierachy) + "/" + str(hierachi_id) + "/")
            else:
                template = "webpages/ctn_bpf/operations_home.html"
            nb_elements = 0
            for t in tops:
                elements.append({'entity': t, 'values': t.levels(nature, context['actual_institution'])})

            context['elements'] = elements
            context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                'actual_institution']).select_related('m_institution').first()
            if context['type_entity'] != None:
                context["type_entity"] = context["type_entity"].m_entity_type
                tmp_lines = context['type_entity'].lines()
            else:
                tmp_lines = list()
        # Moyenne de Progression
        nb_elt = 0
        progress = 0
        """
		for elt in tmp_lines:
			progress += elt.progression()
			nb_elt += 1
		if nb_elt > 0:
			progress /= nb_elt
		"""

        progress = context['actual_institution'].progression()
        context['actual_progression'] = round(progress, 2)
        paginator_o = Paginator(elements, 6)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range

    return render(request, template, context)


def index(request, nature=-1):
    if request.user.is_authenticated:

        return index_log(request, nature)
    else:
        context = dict()
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None

        template = "webpages/ctn_bpf/presentation.html"
        # context['temoignages'] = Temoignage.objects.filter()[:3]
        context['institution_count'] = Institution.objects.count()
        context['projet_count'] = 0
        tmp1 = InsitutionEntities.objects.filter(m_hierachie=1)
        for t in tmp1:
            context['projet_count'] += t.m_entity_type.lines().count()
        context['operations_count'] = Operation.objects.count()
        context['personnel_count'] = Personnel.objects.count()
    try:
        if request.session['too_much_ins'] == 1:
            context['too_much_ins'] = True
        # request.session['too_much_ins'] = None
    except:
        pass
    try:
        if request.session['assistance'] == 1:
            context['assist_send'] = True
            request.session['assistance'] = None
    except:
        pass
    return render(request, template, context)


def bad_auth(request):
    template = "webpages/ctn_bpf/bad_auth.html"
    context = {
        'error': "Erreur au niveau de l'Adresse/Mot de Passe"
    }
    return render(request, template, context)


def main(request, menu_main=0):
    template = "webpages/ctn_bpf/main.html"
    if menu_main == 1:
        template = "webpages/ctn_bpf/presentation_framework.html"
    elif menu_main == 2:
        template = "webpages/ctn_bpf/presentation_documentation.html"
    docus = OperaFile.objects.filter(m_category="DOC")
    apps = OperaApp.objects.filter()
    context = {
        "docus": docus,
        "apps": apps
    }
    return render(request, template, context)


def gestionnaire_search(request):
    generator = request.POST['generator']
    name = request.POST['search']
    if generator == '0':
        hierachy = int(request.POST['hierachy'])
        gest = int(request.POST['gest'])
        response = gestionnaire(request, hierachy, gest, name)
    elif generator == 'o':
        gest = int(request.POST['gest'])
        response = ges_taches(request, gest, None, name)
    elif generator == 's':
        response = structures(request, name)
    elif generator == 'r':
        response = roles(request)
    elif generator == 'p':
        response = personnels(request, name)
    elif generator == 'i2':
        hierachy = int(request.POST['hierachy'])
        gest = int(request.POST['gest'])
        response = evaluer(request, hierachy, gest, name)
    elif generator == "ex":
        response = extra(request, name)
    elif generator == "dSV":
        pass
    return response


# @cache_page(60 * 15)
# @login_required(login_url='/log_account')
# def gestionnaire(request, gest_val, gest_id=0, name=None, structure=None, periode=None, enums="#"):
#     tmp_gest_val = gest_val
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     bool(actual_institution)

#     context['base_img_val'] = context['actual_institution'].img.url

#     if int(gest_val) == -1:
#         gest_val = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
#             'm_institution').last().m_hierachie
#         bool(gest_val)
#         tmp_gest_val = gest_val
#     try:
#         entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,
#                                                    m_institution=actual_institution).select_related(
#             'm_institution').first().m_entity_type
#     except:
#         entity = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
#             'm_institution').last().m_entity_type

#     is_tache = False
#     context['is_sub_tache'] = False
#     context['detail_g_v'] = False
#     context['sup_hierachy'] = list()
#     if gest_id != 0:
#         # gest_val = str(int(gest_val) + 1)
#         # entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,m_institution=context['actual_institution']).first().m_entity_type
#         sup_entity = Entity.objects.filter(id=gest_id).first()
#         if sup_entity != None:
#             lines = sup_entity.sub_entities()
#         else:
#             lines = list()
#         tmp_gest_val = str(int(gest_val) + 1)
#         sub_type = InsitutionEntities.objects.filter(m_hierachie=tmp_gest_val,
#                                                      m_institution=context['actual_institution']).select_related(
#             'm_institution').first()

#         if context["permissions"] <= 0 and sup_entity in context["my_entities"]:
#             context["autoE"] = 1
#         elif context["permissions"] <= 0:
#             for t in sup_entity.sup_hierachie():
#                 if t in context["my_entities"]:
#                     context["autoE"] = 1
#                     break
#         if sub_type != None:  # Ce n'est pas une tache
#             sub_type = sub_type.m_entity_type
#             fields = sub_type.fields()
#             context['is_sub_tache'] = sub_type.is_tache
#             context['sub_entity'] = sub_type
#             context['base_val'] = sup_entity
#             context['sub_entities'] = sup_entity.sub_entities()
#             context['gest_id'] = gest_id
#             context['objects_field'] = sub_type.objects_field()
#             context['calculates_field'] = sub_type.calculates_field()
#             if sup_entity != None:
#                 if sup_entity.m_type_entity.is_pic_represented == True and sup_entity.m_pic_represented != None:
#                     try:
#                         context['base_img_val'] = sup_entity.m_pic_represented.url
#                     except:
#                         pass
#             actu_entity = sub_type
#         else:
#             is_tache = True
#             fields = list()
#             actu_entity = entity
#         context['detail_g_v'] = True
#     else:
#         actu_entity = entity
#         enmPT = actu_entity.enum_fields()['result']
#         """
# 		test_PT = dict()
# 		for e in enmPT:
# 			test_PT[e['name']] = e['lines']
# 		"""
#         lines = entity.lines()
#         is_tache = entity.is_tache
#         fields = entity.fields()
#         context['objects_field'] = entity.objects_field()
#         context['calculates_field'] = entity.calculates_field()

#     if name != None:
#         tmp = list()
#         for l in lines:
#             if name in l.get_name():
#                 tmp.append(l)
#         lines = tmp

#     if structure != None:
#         tmp = list()
#         for l in lines:
#             if l.structure == structure:
#                 tmp.append(l)
#         lines = tmp

#     if periode != None:
#         tmp = list()
#         for l in lines:
#             if periode in l.plannification():
#                 tmp.append(l)
#         lines = tmp

#     context['is_tache'] = is_tache
#     context['hierachy'] = int(tmp_gest_val)
#     context['next_hierachy'] = int(tmp_gest_val) + 1
#     context['gest_val'] = int(gest_val)
#     context['entity'] = entity
#     context['actu_entity'] = actu_entity
#     context['sup_zone'] = entity.sup_entity(actual_institution.id)
#     context['fields'] = fields
#     # context['lines'] = lines
#     context['menu'] = 'g'
#     paginator_o = Paginator(list(lines), 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range

#     if int(tmp_gest_val) > 0 and gest_id != 0:
#         context['sup_hierachy'] = sup_entity.sup_hierachie()

#     if (int(tmp_gest_val) - 1 > 0) and InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
#                                                                          m_institution=context[
#                                                                              'actual_institution']).select_related(
#             'm_institution').first() == None:
#         context['none_search'] = True
#     else:
#         context['first_sup_search'] = True

#     if tmp_gest_val == '0' and entity.m_enum_values in ["", None]:
#         context['none_search'] = True
#     context['searches'] = list(InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
#                                                                  m_institution=context[
#                                                                      'actual_institution']).select_related(
#         'm_institution'))
#     """
# 	if is_tache or context['is_sub_tache']:
# 		context['searches'].append({'label':'Structure','code':'s','values':context['structures']})
# 	"""
#     try:
#         if context['base_val'] != None:
#             taches = list()  # context['base_val'].taches()
#             struc = set()
#             for t in taches:
#                 struc.add(t.structure)

#             context['structures_not_null'] = struc
#     except:
#         pass
#     try:

#         if context["entity_manage"] != None:
#             context["not_add"] = 1
#             entityd = Entity.objects.get(id=context['base_val'].id)
#             if entityd in context["my_entities"]:

#                 if context["role"].m_role.permissions >= 0:
#                     context["permissions"] = 0
#                 if context["permissions"] >= 0:
#                     request.session["permissions_valider"] = True
#             else:
#                 if request.session["permissions_valider"] == True:
#                     pass  # context["permissions"] = -100
#     except:
#         pass
#     if context['permissions'] < 0:
#         template = "webpages/ctn_bpf/entities_simple_user.html"
#         try:
#             if context['base_val'].id == context['entity_manage'].id:
#                 context["auto_simple"] = 1
#         except:
#             pass
#     else:
#         if is_tache or context['is_sub_tache'] == True:
#             template = "webpages/ctn_bpf/taches.html"
#             context['structures'] = Structure.objects.filter(institution=context['actual_institution']).select_related(
#                 'institution')
#         else:
#             template = "webpages/ctn_bpf/entities.html"

#     if enums != "#":
#         context['da_enums'] = enums
#     if is_tache and gest_id != 0:
#         response = redirect('/taches/' + str(gest_id) + '/')
#     else:
#         response = render(request, template, context)
#     return response


@login_required(login_url='/log_account')
def messengers(request):
    context = basis(request)
    template = "webpages/ctn_bpf/messengers.html"
    return render(request, template, context)


# @cache_page(60 * 15)
def ges_taches(request, tache_id, arg_period=None, search=None):
    context = basis(request)
    base_val = Tache.objects.get(id=int(tache_id))
    lines = Operation.objects.filter(tache=base_val).select_related('tache')
    lines_tache = lines
    context['sup_hierachy'] = base_val.sup_hierachie()

    if search != None:
        tmp = lines
        lines = list()
        for l in tmp:
            if search in str(l):
                lines.append(l)
    context['arg_period'] = arg_period
    if arg_period != None:
        periodes = base_val.plan_months()
        prd = periodes[(arg_period - 1)]
        context['periodes'] = prd
        lines = lines.filter(m_tache_plannification=prd)
        context['test'] = list()
        actual_institution = context['actual_institution']
        week = list()
        for t in actual_institution.default_subperiod.decoup_desc_slip2():
            week.append({'per': t, 'val': list()})
        for l in lines:
            ps = l.periodes()
            t_ps = ps.desc_split()
            i_p = 0
            for t in t_ps:
                if int(t) == 0:
                    week[i_p]['val'].append(l)
                    break
                i_p += 1
        context['test'] = week

    context['none_search'] = True
    context['entity'] = base_val.m_type_entity
    context['base_val'] = base_val
    context['sub_entity'] = context['actual_institution'].operations_name
    tmp_perso = Personnel.objects.filter()
    context['personnels'] = set()
    for t in tmp_perso:
        if context['actual_institution'] in t.all_institutions():
            context['personnels'].add(t)
    context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
        'actual_institution')
    plan = base_val.plannification()
    if plan != None:
        context['searches'] = [{'label': '', 'values': base_val.plannification().table(), 'not_filter': True}]
    else:
        context['searches'] = [{'label': '', 'values': ["Aucune Valeur"], 'not_filter': True}]
    context['g_v'] = 'o'
    context['menu'] = 'go'
    base_valE = Entity.objects.get(id=base_val.id)

    if context["permissions"] <= 0 and base_valE in context["my_entities"]:
        context["autoE"] = 1
    elif context["permissions"] <= 0:
        for t in base_val.sup_hierachie():
            if t in context["my_entities"]:
                context["autoE"] = 1
                break

    if context['permissions'] < 0:
        template = "webpages/ctn_bpf/operations_simple_user.html"
        if context['base_val'].id == context['entity_manage'].id:
            context["auto_simple"] = 1
            lines = lines_tache
    else:
        if arg_period is None:
            template = "webpages/ctn_bpf/operations.html"
        else:
            template = "webpages/ctn_bpf/operations_periodes.html"

    paginator_o = Paginator(lines, 12)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    context['lines'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    # context['roles_RACI'] =
    try:
        if request.session["permissions_valider"] == True:
            context["permissions"] = 0
            context["not_add"] = 1
    except:
        pass
    return render(request, template, context)


def structure_hie(request):
    return structures(request, None, 1)

#
# def structures(request, name=None, hierachie=None):
#     template = "webpages/ctn_bpf/structure.html"
#     context = basis(request)
#     context['entity'] = str(context['actual_institution'].default_struc_name)
#     lines = Structure.objects.filter(institution=actual_institution).select_related('parent')
#
#     context['lines'] = lines
#
#     if name != None:
#         context['lines'] = context['lines'].filter(nom__contains=name)
#     context['fields'] = ['Logo', 'Nom',
#                          '',
#                          'Responsable', 'Total : ' + str(context['actual_institution'].last_entity())]
#     context['menu'] = 's'
#     context['personnels'] = Personnel.objects.filter(actual_institution=context['actual_institution']).select_related(
#         'actual_institution')
#     context['g_v'] = 's'
#     context['none_search'] = True
#     if hierachie != None:
#         stH = context["actual_institution"].Structure_Hierachy()
#         vals = ""
#         for s2 in stH:
#             s3 = s2.m_levels_fields.split("|")[:-1]
#             for s in s3:
#                 vals += str(request.POST[s]) + "|"
#         tmp = vals.split("#")
#         re = ""
#         for tm in tmp:
#             re += tm.split("|")[0] + "|"
#         vals = re
#         context['vals'] = vals
#         context['lines'] = context['lines'].filter(values_hierachy__contains=vals)
#         context["stH"] = stH[0].m_levels_fields
#     return render(request, template, context)


def structure_details(request, structure_id=0):
    template = "webpages/ctn_bpf/structure_details.html"
    context = basis(request)
    structure = Structure.objects.get(id=int(structure_id))
    entity = context['actual_institution'].last_entity()
    lines = Tache.objects.filter(structure=structure).select_related('structure')

    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    fields = entity.fields()

    context['structure'] = structure
    context['base_val'] = structure
    # context['gest_id']=gest_id
    context['entity'] = entity
    context['sub_entity'] = entity
    context['objects_field'] = entity.objects_field()
    context['fields'] = fields
    context['is_tache'] = True
    return render(request, template, context)


def users_simples(request, search=None):
    template = "webpages/ctn_bpf/roles.html"
    fields_personnel = ['', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', '']
    fields_roles = ['Role', 'Description', 'Entite']
    personnel = Personnel.objects.filter()
    context = basis(request)
    roles = Role.objects.filter(actual_institution=context['actual_institution'], is_simple_user=1).select_related(
        'actual_institution')

    if search != None:
        roles = roles.filter(nom__contains=search)
    context['entity'] = 'Utilisateur Simple'
    context['fields1'] = fields_personnel
    context['personnel'] = personnel
    context['fields'] = fields_roles
    context['lines'] = roles
    context['g_v'] = 'r'
    context['g_vs'] = 'u2'
    return render(request, template, context)


def personnels(request, name=None, lis_peros=None):
    template = "webpages/ctn_bpf/roles.html"
    context = basis(request)
    context['entity'] = 'Personnel'
    context['fields'] = ['Photos', 'Nom', 'Prenom', 'Telephone', 'Email', 'Fonction', 'Structures','sexe']
    context['lines'] = list()
    lines2 = set()
    tmp_perso = Personnel.objects.filter()
    if lis_peros == None:
        for t in tmp_perso:
            if context['actual_institution'] in t.all_institutions():
                atmp = {
                    'id': t.id,
                    'photo': t.photo,
                    'prenom': t.prenom,
                    'nom': t.nom,
                    'tel': t.tel,
                    'mail': t.mail,
                    'sexe': t.sexe,
                    'get_function': t.get_function(context['actual_institution'].id),
                    'get_structure': t.get_structure(context['actual_institution'].id)
                }
                context['lines'].append(atmp)
                lines2.add(t)
    else:
        context['lines'] = lis_peros
    # context['lines'] = Personnel.objects.filter(actual_institution=context['actual_institution'])
    if name != None:
        name = name.lower()
        tmps = context['lines']
        context['lines'] = list()
        for tt in tmps:
            ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
            for t in ta:
                if name in str(t):
                    context['lines'].append(tt)
                    break
    paginator_o = Paginator(context['lines'], 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)

    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    context['menu'] = 'g'
    context['g_v'] = 'p2'
    context['g_vs'] = 'p2'
    context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
        'actual_institution')
    context['searches'] = []
    context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
        actual_institution=context['actual_institution']).select_related('actual_institution')})
    context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
        institution=context['actual_institution']).select_related('institution')})
    context['functions'] = list()
    context['structures'] = list()
    for p in lines2:
        context['functions'].append(p.get_function(context['actual_institution'].id))
        context['structures'].append(p.get_structure(context['actual_institution']))
    try:
        if request.session['perso_saved'] > 0:
            context['perso_saved'] = True
            tmp_user = Personnel.objects.get(id=request.session['perso_saved'])
            context['perso_get'] = tmp_user
            request.session['perso_saved'] = None
    except:
        pass
    return render(request, template, context)


# def personnel_id(request, perso_id):
#     context = basis(request)
#     template = "webpages/ctn_bpf/profile.html"
#     personnel = Personnel.objects.get(id=perso_id)
#     context["personnel"] = personnel
#     context["prenom"] = personnel.prenom
#     context["nom"] = personnel.nom
#     context["role"] = personnel.get_function(context["actual_institution"].id)
#     return render(request, template, context)


"""
def roles(request):
	template = "webpages/ctn_bpf/personnel_roles.html"
	context = basis(request)
	context['lines'] = Role.objects.filter(institution=context['actual_institution'])
	context['menu'] = 'g'
	return render(request,template,context)
"""


def filter_perso(request, structure_id=0, role_id=0):
    if structure_id == 0:
        structure = request.POST["Structure"]
        tds = structure
        if str(structure) != '0':
            structure = Structure.objects.get(id=int(structure))
    else:
        structure = Structure.objects.get(id=structure_id)

    if role_id == 0:
        role = int(request.POST["Fonction"])
        if str(role) != '0':
            role = Role.objects.get(id=role)
    else:
        role = Role.objects.get(id=role_id)
    personnel = Personnel.objects.filter()
    context = basis(request)
    result = list()
    if structure != '0':
        for p in personnel:
            if p.get_structure() != None and p.get_structure().m_structure == structure:
                result.append(p)
    if role != '0':

        if structure == '0':
            tmp = personnel
        else:
            tmp = result
        result = list()
        for p in tmp:

            if p.get_function() != None and p.get_function().m_role == role:
                result.append(p)
    return personnels(request, None, result)


def gestionnaire_id(request, gest_val, gest_id):
    pass


# def log(request, out=False):
#     if out == False:
#         response = "/log_account/"
#         result = False
#         try:
#             request.session['bad_log'] += 1
#             if request.session['bad_log'] > 0:
#                 response = "/bad_auth/"
#         except:
#             request.session['bad_log'] = 1
#             request.session['try_log'] = True
#         r_email = request.POST['email']
#         r_password = request.POST['password']
#         users = User.objects.filter(email=r_email)
#         r_username = User.objects.filter(email=r_email).last()
#         if r_username != None:
#             r_username = r_username.username
#             user = authenticate(username=r_username, password=r_password)
#             if user:
#                 login(request, user)
#                 result = True
#                 response = "/"
#             else:
#                 if users.count() > 2:
#                     for u in users:
#                         r_username = u.username
#                         u_tmp = authenticate(username=r_username, password=r_password)
#                         if u_tmp:
#                             login(request, u_tmp)
#                             result = True
#                             response = "/"
#             request.session['logged'] = 1
#             request.session['bad_log'] = None
#     else:
#         logout(request)
#         response = "/"
#     return redirect(response)


def specific_log(request, type_view=0):
    template = "webpages/ctn_bpf/specific_log.html"
    context = {

    }
    if type_view == 2:
        context['specific'] = 0  # Not Code
    return render(request, template, context)


def save_entity(request):
    try:
        institution = Institution.objects.get(id=int(request.POST['institution']))
    except:
        institution = basis(request)['actual_institution']
    try:
        operation_aggregate = request.POST['ope_aggregate']
    except:
        entity_nom = request.POST['entity_nom']
        entity_hierachy = request.POST['entity_hierachy']
        fields_name = request.POST['fields_name']
        fields_type = request.POST['fields_type']
        rapp_fields_name = request.POST['fields_name2']
        rapp_fields_type = request.POST['fields_type2']
        if request.POST['entity_image'] == '0':
            entity_image = False
        else:
            entity_image = True
        edit_or_create = request.POST['edit_or_create']
        operation_aggregate = None
        enum_fields = request.POST['enum_fields']
    if operation_aggregate is None:
        if edit_or_create == 'e':
            edit_id = request.POST['edit_id']
            institutionEntity = InsitutionEntities.objects.get(id=int(edit_id))
            entity = institutionEntity.m_entity_type
            actual_fields = entity.fields()
            actual_values = entity.lines()
            for l in actual_values:
                value = l.m_value_fields
                tmp = ""
                for f in fields_name.split("|")[:-1]:
                    if f not in actual_fields:
                        tmp += " |"
                    else:
                        tmp += str(l.get_value(f)) + "|"
                l.m_value_fields = tmp
                l.save()
        else:
            entity = EntityType(m_nom=entity_nom)
        entity.is_pic_represented = entity_image
        entity.m_nom = entity_nom
        entity.m_fields = fields_name
        entity.m_type_fields = fields_type
        entity.m_fields_rapported = rapp_fields_name
        entity.m_type_fields_rapp = rapp_fields_type
        entity.m_enum_values = enum_fields
        entity.indicateur_fields = request.POST['indicateurs_field']
        entity.save()
        # tache hierachy modifier
        hierachie = int(entity_hierachy) + 1

        # Decalage des Relations
        if edit_or_create != 'e':

            to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
            for d in to_decaler:
                d.m_hierachie += 1
                d.save()
            institutionEntity = InsitutionEntities(m_hierachie=hierachie, m_entity_type=entity,
                                                   m_institution=institution)
            if to_decaler.first() == None:
                institutionEntity.m_entity_type.is_tache = True
                institutionEntity.m_entity_type.save()
        else:
            institutionEntity.m_hierachie = hierachie
        institutionEntity.save()
    else:
        edit_or_create = request.POST['edit_or_create_O']
        aggregate_name = request.POST['aggregate_name']
        aggregate_fields_name = request.POST['aggregate_fields_name']
        aggregate_fields_type = request.POST['aggregate_fields_type']
        aggregate_rap_fields_name = request.POST['aggregate_rap_fields_name']
        aggregate_rap_fields_type = request.POST['aggregate_rap_fields_type']

        # Aggregates launching
        aggregates = institution.operations_modules()
        # Aggregates launching

        if aggregates == None:
            aggregates = Aggregate(m_institution=institution)

        aggregates.m_nom = aggregate_name
        aggregates.m_fields = aggregate_fields_name
        aggregates.m_type_fields = aggregate_fields_type
        aggregates.m_fields_rapported = aggregate_rap_fields_name
        aggregates.m_type_fields_rapp = aggregate_rap_fields_type
        aggregates.save()
    return redirect('/configurations/')


# def save_entity_value(request):
#     institution = int(request.POST['institution'])
#     hierachie = int(request.POST['hierachie'])
#     if hierachie != -1:
#         type_entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution__id=institution).first()
#     else:
#         type_entity = InsitutionEntities.objects.filter(m_institution__id=institution).last()
#     type_entity = type_entity.m_entity_type
#     fields_value = request.POST['fields']
#     edit_or_create = request.POST['edit_or_create']

#     is_tache = request.POST['is_tache']
#     if is_tache == 'True':
#         if edit_or_create == 'e':
#             edit_id = request.POST['edit_id']
#             entity = Tache.objects.get(id=int(edit_id))
#             entity.m_value_fields = fields_value
#             entity.m_type_entity = type_entity
#         else:
#             entity = Tache(m_value_fields=fields_value, m_type_entity=type_entity)
#         structures_list = request.POST['structures_list']  # getFieldValues()
#         structures_roles = request.POST['structures_roles']
#         try:
#             entity.montant = float(request.POST["finances"])
#         except:
#             pass
#         entity.save()
#         r_struc = list()
#         tmp_struc = list()
#         r_roles = structures_roles
#         r_roles = r_roles.split('\n')
#         i = 0

#         for s in structures_list.split('|')[:-1]:
#             if s not in tmp_struc:
#                 tmp_struc.append(s)
#         for s in tmp_struc:
#             r_struc.append(Structure.objects.get(id=int(s)))
#         r_struc.sort(key=lambda x: x.nom)
#         try:
#             if edit_or_create == 'e':
#                 for s in entity.structures.filter():
#                     s.delete()
#             for s in r_struc:
#                 if s == 0:
#                     pass
#                 else:
#                     r_str = StructureRole(m_structure=s, m_role=r_roles[i])
#                     r_str.save()
#                     entity.structures.add(r_str)
#                     i += 1
#             entity.structure = entity.structures.first().m_structure  # next(iter(r_struc)).m_structure
#         except:
#             pass

#         entity.save()
#         calendar = request.POST['calendar_selected']
#         periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
#         if edit_or_create == 'e' and calendar != "#":
#             plani_tche = TachePlannify.objects.filter(m_tache=entity)
#             for p in plani_tche:
#                 p.delete()
#         if calendar != "#":
#             plani_tche = TachePlannify(m_tache=entity, m_planify=calendar, m_periode=periode)
#             plani_tche.save()
#             set_pv_tp(plani_tche)
#     else:
#         if edit_or_create == 'e':
#             edit_id = request.POST['edit_id']
#             entity = Entity.objects.get(id=int(edit_id))
#             entity.m_value_fields = fields_value
#             entity.m_type_entity = type_entity
#         else:
#             entity = Entity(m_value_fields=fields_value, m_type_entity=type_entity)
#         entity.save()
#     try:
#         sup_entity = request.POST['sup_entity']
#     except:
#         sup_entity = None
#     # relations_entities
#     if sup_entity != None:
#         sup_entity = Entity.objects.get(id=int(sup_entity))

#         if edit_or_create == 'e':
#             delete_hierachie = EntityHierachie.objects.filter(m_sub_entity=entity).first()
#             if delete_hierachie != None:
#                 delete_hierachie.delete()
#         entity_hierachie = EntityHierachie(m_sub_entity=entity, m_sup_entity=sup_entity)
#         entity_hierachie.save()

#     # Image de Couverture
#     try:
#         entity.m_pic_represented = request.FILES["cover_img"]
#         entity.save()
#     except:
#         pass

#     i_f = 0
#     fields_name = entity.m_type_entity.fields()
#     for f in entity.m_type_entity.type_fields():
#         if f in ['file', 'image']:
#             try:
#                 eF = EntityFile(m_entity=entity, m_field=f, m_file=request.FILES[fields_name[i_f]])
#                 eF.save()
#                 entity.set_value(fields_name[i_f], str(eF.id))
#             except:
#                 entity.set_value(fields_name[i_f], str("Aucun Fichier"))
#             entity.save()
#         i_f += 1
#     base_val = request.POST["base_val"]

#     # Enumerations Values
#     split_extras1(entity)  # Clean the Error Files

#     if base_val not in ['', ' ', '0', None]:
#         response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
#     else:
#         response = "/gestionnaire/" + str(hierachie) + "/"
#     response = redirect(response)
#     return response


# def save_gestion(request):
#     context = basis(request)
#     generator = request.POST['generator']
#     edit_or_create = request.POST['edit_or_create']
#     try:
#         r_redirect = request.POST['redirect']
#     except:
#         pass
#     if generator == 'i':
#         r_sigle = request.POST['sigle']
#         r_nom = request.POST['nom']
#         r_image = request.FILES['image']
#         institution = Institution(sigle=r_sigle, nom=r_nom, img=r_image)
#         institution.save()
#         response = "/gestionnaire/i/"
#     elif generator == 'eD':
#         r_nom = request.POST['nom']
#         # r_fields_type = request.POST['fields_type']
#         # r_fields = request.POST['fields']
#         r_domain_type = request.POST['domain_type']
#         r_value_type = request.POST['value_type']
#         r_aggregation_type = request.POST['aggregation_type']
#         r_description = request.POST['description']
#         try:
#             r_null_conserv = request.POST['null_conserv']
#         except:
#             r_null_conserv = 0
#         try:
#             r_fill_valid = request.POST['fill_valid']
#         except:
#             r_fill_valid = 0
#         try:
#             r_logo = request.FILES['logo']
#         except:
#             r_logo = None
#         r_default_value = request.POST["default_value"]

#         dE = DataElement(m_name=r_nom)
#         if r_logo != None:
#             m_logo = r_logo
#         dE.m_domain_type = r_domain_type
#         dE.m_value_type = r_value_type
#         dE.m_aggregation_type = r_aggregation_type
#         dE.m_description = r_description

#         try:
#             if int(r_null_conserv) == 1:
#                 dE.is_zero_collect = True
#         except:
#             dE.is_zero_collect = False
#         try:
#             if int(r_fill_valid) == 1:
#                 if request.POST['default_value'] == None:
#                     tmp = 0
#                 else:
#                     tmp = request.POST['default_value']
#                 dE.m_default_value = int(tmp)
#         except:
#             dE.m_default_value = None
#         actual_institution = context['actual_institution']
#         dE.m_institution = actual_institution
#         dE.save()
#         response = "/dataelts/"
#     elif generator == 'a0':
#         r_user = User.objects.get(id=int(request.POST['user']))
#         r_message = request.POST['message']
#         a = Assistance(m_user=r_user, m_message=r_message)
#         a.save()
#         request.session['assistance'] = 1
#         response = "/assistance/"
#     elif generator == "str":
#         actual_institution = context['actual_institution']
#         r_value = request.POST['value']
#         actual_institution.default_struc_name = r_value
#         actual_institution.save()
#         response = "/structures/"
#     elif generator == "p2":
#         r_nom = request.POST['nom']
#         r_prenom = request.POST['prenom']
#         r_mail = request.POST['mail']
#         r_tel = request.POST['tel']
#         personnel_saved = Personnel.objects.filter(mail=r_mail).first()
#         try:
#             r_img = request.FILES['photo']
#         except:
#             if edit_or_create != 'e':
#                 r_img = OperaFile.objects.filter(m_name="USR").first().m_file
#             else:
#                 r_img = None
#         if personnel_saved == None:
#             tes_none = (User.objects.filter(email=r_mail).first())
#             if tes_none != None:
#                 try:
#                     personnel_saved = tes_none.personnel
#                 except:
#                     personnel_saved = Personnel(bd_user=tes_none, nom=r_nom, prenom=r_prenom, mail=r_mail, photo=r_img,
#                                                 actual_institution=context['actual_institution'],tel=r_tel)
#                     personnel_saved.save()

#         try:
#             r_structure = request.POST['Structure']
#         except:
#             r_structure = '0'
#         if r_structure != '0':
#             r_structure = Structure.objects.get(id=int(r_structure))
#         else:
#             r_structure = None
#         r_role = request.POST['Fonction']
#         r_role = Role.objects.get(id=int(r_role))
#         edit_or_create = request.POST['edit_or_create']
#         if edit_or_create != 'e':
#             if personnel_saved == None:
#                 
#                 password = ""
#                 for i in range(0, 8):
#                     password += str(random.randint(0, 9))
#                 usn = str(password) + str(User.objects.count() + 2)
#                 r_bd_user = User(username=usn, email=r_mail)
#                 subject = "Nouveau Compte Opera +"
#                 message_context = {
#                     'password': password,
#                     'name': r_nom + "" + r_prenom
#                 }
#                 message = render_to_string('webpages/ctn_bpf/mails/new_personnel.html', message_context)
#                 email = r_mail
#                 email_from = settings.EMAIL_HOST_USER
#                 recipient_list = [email, ]
#                 msg = EmailMessage(subject, message, email_from, recipient_list)
#                 msg.content_subtype = 'html'
#                 try:
#                     msg.send()
#                     r_bd_user.set_password(password)
#                 except:
#                     r_bd_user.set_password("user1234")
#                 # r_bd_user.set_password('User'+password)
#                 r_bd_user.save()
#                 personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, photo=r_img,
#                                       actual_institution=context['actual_institution'])
#                 personnel.bd_user = r_bd_user
#             else:
#                 personnel = personnel_saved
#         else:
#             edit_id = request.POST['edit_id']
#             if personnel_saved == None:
#                 personnel = Personnel.objects.get(id=int(edit_id))
#             else:
#                 personnel = personnel_saved
#             personnel.nom = r_nom
#             personnel.prenom = r_prenom
#             personnel.mail = r_mail
#             personnel.bd_user.email = r_mail
#             personnel.m_tel = r_tel
#             personnel.bd_user.save()
#             if r_img != None:
#                 personnel.photo = r_img
#         if personnel_saved == None:
#             personnel.save()
#         else:
#             request.session['perso_saved'] = personnel_saved.id
#         try:
#             simple_user = request.POST['simple_user']
#         except:
#             simple_user = '0'
#         if simple_user == '0':
#             ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
#             ps.save()
#             pf = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             if pf == None:
#                 pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
#                                         m_institution=context['actual_institution'])
#             else:
#                 pf.m_role = r_role
#             pf.save()
#         else:
#             entity = Entity.objects.get(id=int(simple_user))
#             pf = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             if pf == None:
#                 pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
#                                         m_institution=context['actual_institution'])
#             pf.m_entity = entity
#             pf.save()

#             ps = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
#             ps.save()
#         response = "/personnels/"
#     elif generator == "r":  # Role
#         r_nom = request.POST['nom']
#         r_description = request.POST['description']
#         r_permission = request.POST['permission']
#         r_institution = Institution.objects.get(id=int(request.POST['institution']))
#         r_ros_click = request.POST["ros_click"]

#         if int(r_ros_click) in [1, 2]:
#             r_permission = "-1"

#         if r_permission == '-1':
#             r_permission = 0
#         else:
#             permissions_hierachie = InsitutionEntities.objects.filter(m_institution=r_institution).last().m_hierachie
#             if (permissions_hierachie + 1) >= int(r_permission):
#                 r_permission = 0  # (permissions_hierachie+1) - int(r_permission)
#             else:
#                 r_permission = int(r_permission)
#         if edit_or_create == 'c':
#             role = Role(actual_institution=r_institution, nom=r_nom, description=r_description,
#                         permissions=r_permission)
#         else:
#             edit_id = request.POST['edit_id']
#             role = Role.objects.get(id=int(edit_id))
#             role.nom = r_nom
#             role.description = r_description
#             role.permissions = r_permission
#         if int(r_ros_click) == 1:
#             r_entity_administr = request.POST["permission_entity"]
#             eH = InsitutionEntities.objects.filter(id=int(r_entity_administr)).first().m_entity_type
#             role.m_simple_auth = eH
#             entities = list()
#             """
# 			for e in r_entity_administr.split("#")[:-1]:
# 				entities.append(Entity.objects.get(id=int(e)))
# 			"""
#             role.save()
#             # role.m_entities.set(entities)
#             role.m_nature = "1"
#         elif int(r_ros_click) == 2:
#             role.permissions = -100
#             user_simple_entity = request.POST['user_simple_entity']
#             role.is_simple_user = 1
#             role.m_simple_auth = EntityType.objects.get(id=int(user_simple_entity))
#         role.save()
#         response = "/roles/"
#     elif generator == "s":
#         try:
#             r_pic = request.FILES["logo"]
#         except:
#             r_pic = None
#         r_nom = request.POST['nom']
#         r_designation = request.POST['designation']
#         r_institution = request.POST['Institution']
#         r_institution = Institution.objects.filter(id=int(r_institution)).first()
#         try:
#             r_responsable = Personnel.objects.filter(id=int(request.POST['responsable'])).first()
#         except:
#             r_responsable = None
#         if edit_or_create == 'e':
#             edit_id = int(request.POST['edit_id'])
#             structure = Structure.objects.get(id=int(edit_id))
#             structure.photo = r_pic
#             structure.nom = r_nom
#             structure.designation = r_designation
#             structure.institution = r_institution
#         else:
#             structure = Structure(nom=r_nom, designation=r_designation,
#                                   institution=r_institution)  # ,responsable=r_responsable
#             if r_pic != None:
#                 structure.photo = r_pic
#         structure.save()

#         if r_responsable != None:
#             if edit_or_create == 'c':
#                 sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
#             else:
#                 edit_id = int(request.POST['edit_id'])
#                 structure = Structure.objects.get(id=int(edit_id))
#                 sR = StructureResponsable.objects.filter(m_structure=structure).first()
#                 if sR == None:
#                     sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
#                 else:
#                     sR.m_responsable = r_responsable
#             sR.save()
#         response = "/structures/"
#     elif generator == 'd_s_1':
#         if edit_or_create == "c":
#             dS = DataSet()
#             dS.save()
#             response = "/data_sets/design/" + str(dS.id) + "/"
#             form_part = False
#         else:
#             edit_id = request.POST["edit_id"]
#             dS = DataSet.objects.get(id=int(edit_id))

#             try:
#                 form_html = request.POST["form_design"]
#                 response = "/data_form/-1/0/"
#                 form_part = True
#                 for v in dS.m_dataelements.filter():
#                     form_html = form_html.replace("dE$" + str(v.id) + "$",
#                                                   "<div class='variableSelector'>  <div><input class='form-control' name='D0elt" + str(
#                                                       v.id) + "' type='text'></div> </div>")  # <div><label><small>"+str(v)+"</small></label></div>
#                 for v in dS.m_indicateurs.filter():
#                     form_html = form_html.replace("dI$" + str(v.id) + "$",
#                                                   "<div class='indicSelector' data-id='" + str(v.id) + "'> </div>")
#                 dS.m_formulaire = form_html
#             except:
#                 response = "/data_sets/design/" + str(dS.id) + "/"
#                 form_part = False
#         if not form_part:
#             form_name = request.POST["form_name"]
#             if form_name not in [None, ""]:
#                 dS.m_name = form_name
#             dS.m_periode = request.POST["periode"]
#             dS.m_sub_periode = request.POST["sub_periode"]

#             """
# 			r_indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
# 			dS.m_indicateur = r_indicateur
# 			"""
#             dS.m_institution = context["actual_institution"]
#             # ephoxVariables_input = request.POST["ephoxVariables_input"]
#             variables_list = request.POST["variables_list"].split("#")
#             indicateurs_list = request.POST["indicateurs_list"].split("#")
#             variables_set = set()
#             indicateurs_set = set()

#             for v in variables_list[:-1]:
#                 dE = DataElement.objects.get(id=int(v))
#                 variables_set.add(dE)

#             for v in indicateurs_list[:-1]:
#                 dI = Indicateur.objects.get(id=int(v))
#                 indicateurs_set.add(dI)

#             """
# 			if ephoxVariables_input != "#":
# 				id_insert = 1
# 				ephoxVar = ephoxVariables_input.split("#")
# 				for v in ephoxVar[1:-1]:
# 					dE = DataElement.objects.get(id=int(v))
# 					dS.m_formulaire = dS.m_formulaire.replace("de$"+str(v)+"$","<div class='variableSelector'> <div><label><small>"+str(dE)+"</small></label></div> <div><input class='form-control' name='"+str(id_insert)+"' type='text'></div> </div>")
# 					id_insert += 1
# 					variables_set.add(dE)
# 				dS.save()
# 			"""
#             variables_set = list(variables_set)
#             indicateurs_set = list(indicateurs_set)
#             dS.m_dataelements.set(variables_set)
#             dS.m_indicateurs.set(indicateurs_set)

#             r_structure = request.POST["structures_list"].split("$")
#             structures_set = list()
#             for r in r_structure[:-1]:
#                 structures_set.append(Structure.objects.get(id=int(r)))
#             dS.m_structures.set(structures_set)

#             r_role = request.POST["roles_list"].split("$")
#             roles_set = list()
#             for r in r_role[:-1]:
#                 roles_set.append(Role.objects.get(id=int(r)))
#             dS.m_roles.set(roles_set)

#         dS.save()
#     elif generator == 'o':
#         r_m_tache_plannification = request.POST['tache_periode']
#         r_tache = request.POST['tache']
#         response = "/taches/" + r_tache + "/"
#         r_tache = Tache.objects.get(id=int(r_tache))

#         # r_code = request.POST['code']

#         r_nom = request.POST['nom']
#         r_perso = request.POST['perso']
#         r_accountable = request.POST['accountable']
#         r_consulted = request.POST['consulted']
#         r_informed = request.POST['informed']
#         date_echeance_str = request.POST['date_echeance']
#         try:
#             r_role = request.POST['role']
#         except:
#             pass
#         if r_perso != "0":
#             r_perso = Personnel.objects.get(id=int(r_perso))
#         else:
#             r_perso = None
#         if r_accountable != "0":
#             r_accountable = Personnel.objects.get(id=int(r_accountable))
#         else:
#             r_accountable = None
#         if r_consulted != "0":
#             r_consulted = Personnel.objects.get(id=int(r_consulted))
#         else:
#             r_consulted = None
#         if r_informed != "0":
#             r_informed = Personnel.objects.get(id=int(r_informed))
#         else:
#             r_informed = None

#         """		try:
# 			r_perso = Personnel.objects.get(id=int(r_perso))
# 			r_accountable = Personnel.objects.get(id=int(r_accountable))
# 			r_consulted = Personnel.objects.get(id=int(r_consulted))
# 			r_informed	 = Personnel.objects.get(id=int(r_informed))
# 		except:
# 			pass"""
#         try:
#             r_montant = int(request.POST['montant'])
#         except:
#             r_montant = 0
#         file_oko = None
#         r_chronogr = request.POST['chronogr']
#         r_who_assign = int(request.POST['who_assign'])
#         r_sub_period = request.POST['sub_period']
#         r_notification = request.POST['notification']
#         r_priorite = request.POST['priorite']
#         try:
#             r_operation_aggregates = request.POST['operation_aggregates']
#         except:
#             r_operation_aggregates = None
#         if edit_or_create == 'c':
#             operation = Operation(tache=r_tache, nom=r_nom, montant=r_montant, notification=r_notification,
#                                   priorite=r_priorite, date_echeance=date_echeance_str)
#             operation.m_value = ""
#             t2 = r_tache.sup_entity()
#             tmp = str(r_tache.id) + "#"
#             while t2 != None:
#                 tmp = str(t2.id) + "#" + tmp
#                 t2 = t2.sup_entity()
#             operation.code = tmp

#             if context['actual_institution'].default_options != True:
#                 try:
#                     if r_operation_aggregates is not None:
#                         operations_values = r_operation_aggregates.split("|")
#                         i_val = 0
#                         for val in context['actual_institution'].operations_modules().fill_fields():
#                             if val["type"] in ['file', 'image']:
#                                 try:
#                                     oF = OperationFile(operation=operation, m_field=val['field'],
#                                                        m_file=request.FILES[val['field'] + '_nam'])
#                                     operation.save()
#                                     oF.save()
#                                 except:
#                                     pass
#                             operation.m_value += str(
#                                 operations_values[i_val]) + "|"  # str(operations_values[i_val]) + "|"
#                             i_val += 1
#                     else:
#                         operation.m_value = r_operation_aggregates
#                 except:
#                     pass
#                 operation.m_value += " "
#             else:
#                 try:
#                     file_oko = request.FILES['file_oko']
#                     operation.fichier_joint = file_oko
#                 except:
#                     pass
#         else:

#             edit_id = request.POST['edit_id']
#             operation = Operation.objects.get(id=int(edit_id))
#             operation.nom = r_nom
#             operation.montant = r_montant
#             operation.notification = r_notification
#             operation.priorite = r_priorite
#             if r_operation_aggregates is None:
#                 for val in context['actual_institution'].operations_modules().fields_rapported()[:-1]:
#                     operation.m_value += " " + "|"
#             else:
#                 operation.m_value = r_operation_aggregates
#         operation.m_tache_plannification = r_m_tache_plannification
#         # Add Institution to Operation
#         operation.m_institution = context["actual_institution"]

#         list_operations = list()
#         if r_who_assign == 0:
#             if r_perso != "0":
#                 operation.personnel = r_perso
#             if r_accountable != "0":
#                 operation.accountable = r_accountable
#             if r_consulted != "0":
#                 operation.consulted = r_consulted
#             if r_informed != "0":
#                 operation.informed = r_informed
#             list_operations.append(operation)
#         elif r_who_assign == 1:
#             role = Role.objects.get(id=int(r_role))
#             for perso in role.persos():
#                 operation.personnel = perso.m_personnel
#                 list_operations.append(operation)
#         else:
#             list_operations.append(operation)

#         for o in list_operations:
#             o.save()
#             if edit_or_create == 'e':
#                 op = OperationPeriode.objects.filter(m_operation=o).first()
#                 if op != None:
#                     tmp_chrono = SubPeriode.objects.filter(id=int(r_sub_period)).first()
#                     if tmp_chrono != None:
#                         op.m_chronogramme = tmp_chrono
#                     op.m_desc_realisation = r_chronogr
#                     op.save()
#                 else:
#                     op = OperationPeriode(m_operation=o, m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
#                                           m_desc_realisation=r_chronogr)
#                     op.save()
#             else:
#                 op = OperationPeriode(m_operation=o, m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
#                                       m_desc_realisation=r_chronogr)
#                 op.save()
#         subject = "Attribution - " + str(operation.institution().operations_name())
#         email_from = settings.EMAIL_HOST_USER
#         try:
#             raci_roles = [operation.personnel, operation.accountable, operation.consulted, operation.informed]
#             all_emails = list()
#             msg_emails = list()
#             i_r = 0
#             for r in raci_roles:
#                 i_r += 1
#                 if r is not None:
#                     tmp_context = {
#                         'operation': operation,
#                         'personnel': r,
#                         'tache': operation.tache,
#                         'institution': operation.institution()
#                     }
#                     if i_r == 2:
#                         tmp_context['role'] = 'A'
#                     elif i_r == 3:
#                         tmp_context['role'] = 'C'

#                     elif i_r == 4:
#                         tmp_context['role'] = 'I'
#                     else:
#                         tmp_context['role'] = 'Responsable'
#                     message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', tmp_context)
#                     # message2 = (subject, message, email_from, [r_role.m_personnel.mail])
#                     message2 = EmailMessage(subject, message, email_from, [r.mail, ])
#                     message2.content_subtype = 'html'

#                     msg_emails.append(message2)
#                     try:
#                         message2.send()
#                     except:
#                         pass
#         # recipient_list = all_emails
#         # send_mass_mail((msg_emails), fail_silently=False)
#         except:
#             message_context = {
#                 'operation': operation,
#                 'personnel': operation.personnel,
#                 'tache': operation.tache,
#                 'institution': operation.institution()
#             }
#             message = "<html><head></heady><body><b>Vous avez une</b></body></html>"
#             message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', message_context)
#             if r_perso != '0':
#                 email = r_perso.mail
#                 recipient_list = [email, ]
#                 msg = EmailMessage(subject, message, email_from, recipient_list)
#                 msg.content_subtype = 'html'
#                 try:
#                     if file_oko != None:
#                         msg.attach(file_oko.name, file_oko.read(), file_oko.content_type)
#                     msg.send()
#                 except:
#                     pass
#         """
# 		try:
# 			send_mail( subject, message, email_from, recipient_list, fail_silently=False)
# 			msg = EmailMessage(subject, message, email_from, recipient_list)
# 			msg.content_subtype = 'html'
# 			msg.send()
# 		except:
# 			pass
# 		"""
#     elif generator == 'w':
#         r_nom = request.POST['nom']
#         r_prenom = request.POST['prenom']
#         r_mail = request.POST['mail']
#         r_password = request.POST['password']
#         r_username = User.objects.count() + 1
#         try:
#             r_user = User(username=r_username, email=r_mail)
#             r_user.set_password(r_password)
#             r_user.save()
#         except:
#             r_user = User(username='ngb' + str(r_username + 1000), email=r_mail)
#             r_user.set_password(r_password)
#             r_user.save()

#         # Code generator
#         code = ""
#         
#         for i in range(6):
#             code += str(random.randint(0, 9))
#         # code = "000111"
#         owner = Owner(m_user=r_user, m_code=code)
#         owner.save()
#         personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, bd_user=r_user)
#         personnel.photo = OperaFile.objects.filter(m_name="USR").first().m_file
#         personnel.save()
#         subject = "d'une Institution Opera +"
#         message = " Bonjour, utilisez ce code pour renseigner une Institution au sein d'Opera " + str(code)
#         email = r_mail
#         email_from = settings.EMAIL_HOST_USER
#         recipient_list = [email, ]
#         try:
#             send_mail(subject, message, email_from, recipient_list, fail_silently=False)
#         except:
#             pass  # No cconnexion
#         response = "/log_account/"
#         request.session['new_user'] = 1
#     elif generator == "i2":
#         id_e = int(request.POST["entity_id"])
#         entity = Entity.objects.get(id=id_e)
#         for i in entity.get_indicateurs():
#             tmp_per = request.POST["period" + str(i.id)]
#             tmp_num = request.POST["numer" + str(i.id)]
#             tmp_field = request.POST["id" + str(i.id)]
#             tmp_field = DataElement.objects.filter(id=int(tmp_field)).first()
#             # i.m_values = str(tmp_per)+"#"+str(tmp_num)+"\n" + str(i.m_values)
#             iV = IndicateurVal(m_indicateur=i, m_periode=tmp_per, m_valeur=tmp_num, m_numerateur=tmp_field)
#             iV.save()

#         entity.is_rapported = True
#         entity.save()
#         response = "/chaine_indicateurs/"
#         context['indique'] = True
#     elif generator == "dSv":
#         r_dataset = DataSet.objects.get(id=int(request.POST["dSv_id"]))
#         r_user = request.user.personnel
#         r_variables = r_dataset.m_dataelements
#         r_values = request.POST["variables_value"].split("#")
#         r_values_names = request.POST["variables_names"].split("#")
#         r_values_dict = dict()

#         for v in r_variables.filter():
#             r_values_dict["D0elt" + str(v.id)] = None

#         for i in range(len(r_values)):
#             r_values_dict[r_values_names[i]] = r_values[i]

#         r_structures = [request.POST["struc_selec"]]
#         r_period1 = request.POST["period1_saisie"]
#         r_period2 = request.POST["period2_saisie"]
#         entity = DataSetValue(m_dataset=r_dataset, m_user=r_user, m_period_value=r_period1,
#                               m_sub_period_value=r_period2)
#         entity.save()

#         i = 0
#         for v in r_variables.filter():
#             dt = DSet_DElt(m_dataelement=v, m_dataset_value=entity,
#                            m_value=r_values_dict["D0elt" + str(v.id)])  # r_values[i])
#             dt.save()
#             i += 1
#         for v in r_structures:
#             stru = Structure.objects.get(id=int(v))
#             entity.m_structures.add(stru)
#         entity.save()
#         response = "/data_form/" + str(r_dataset.id) + "/" + str(0) + "/"
#     elif generator == "ieD":
#         formula = request.POST["formule"]
#         indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
#         indicateur.m_datalets_calcul = formula
#         indicateur.save()
#         response = "/dataelts/indic/"
#     elif generator == "pass":
#         password = request.POST["password"]
#         user = request.user
#         user.set_password(password)
#         user.save()
#         response = "/profile/"
#     elif generator == "ind_va":
#         entity = EntityType.objects.get(id=int(request.POST["entity_ind_id"]))
#         entity.indicateur_fields = request.POST["ind_val"]
#         entity.save()
#         response = "/configurations/"
#     elif generator == "cOi":
#         entity = Tache.objects.get(id=request.POST["configOp_id"])
#         tA = TacheAggregate.objects.filter(m_tache=entity).first()
#         if tA == None:
#             tA = TacheAggregate(m_tache=entity)
#         i = 1
#         for i1 in context["actual_institution"].operations_modules().fields():
#             if request.POST["fiel1" + str(i)] not in ["#", "", " "]:
#                 tA.m_values1 += request.POST["fiel1" + str(
#                     i)] + ""
#             else:
#                 tA.m_values1 += "#" + ""
#         i = 1
#         for i1 in context["actual_institution"].operations_modules().fill_fields_rapp():
#             if request.POST["fiel2" + str(i)] not in ["#", "", " "]:
#                 tA.m_values2 += request.POST["fiel2" + str(
#                     i)] + ""
#             else:
#                 tA.m_values2 += "#" + ""
#             i += 1
#         tA.save()
#         response = "/taches/" + str(entity.id)
#     return redirect(response)


def planifier2(request, period_id=0):
    template = "webpages/ctn_bpf/plannifier.html"
    annees = set()
    context = basis(request)
    entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
    tasks = entity.lines()

    # actual_period =

    context['searches'] = list()
    context['g_v'] = '1'
    context['institution'] = Institution.objects.last()
    if period_id != 0:
        context['actual_period'] = Institution_Periodes.objects.get(id=int(period_id))
    else:
        period = request.user.personnel.actual_institution.default_period
        institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                            m_periode=period).first()
        context['actual_period'] = institutionPe
    context['taches'] = tasks
    context['ranges'] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
    return render(request, template, context)


def roles(request, search=None):
    template = "webpages/ctn_bpf/roles.html"
    fields_personnel = ['', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', '']
    fields_roles = ['Role', 'Description', 'Permissions',
                    'Entite']
    personnel = Personnel.objects.filter()
    context = basis(request)
    roles = Role.objects.filter(actual_institution=context['actual_institution']).select_related('actual_institution')
    if search != None:
        roles = roles.filter(nom__contains=search)
    context[
        'entity'] = 'Role'
    context['fields1'] = fields_personnel
    context['personnel'] = personnel
    context['fields'] = fields_roles
    context['lines'] = roles
    context['g_v'] = 'r'
    context['g_vs'] = 'r2'
    return render(request, template, context)


def repartir_tache(request):
    r_tache = request.POST['tache']
    r_roles_tache = request.POST['roles_tache']
    r_personnel_tache = request.POST['personnel_tache']
    roles = r_roles_tache.split("_")
    personnels = r_personnel_tache.split("_")
    r_roles = list()
    r_persos = list()
    for r in roles:
        if r != '':
            r_roles.append(Role.objects.get(id=int(r)))
    for p in personnels:
        if p != '':
            r_persos.append(Personnel.objects.get(id=int(p)))
    tache = Tache.objects.get(id=int(r_tache))
    subject = "Attribution de la Tache"
    message = " Vous avez une Tache qui vouis a ete "
    email = r_persos[0].mail
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    # send_mail( subject, message, email_from, recipient_list, fail_silently=False)

    repartition = TacheRepartition(m_tache=tache)
    repartition.save()
    repartition.m_personnels.set(r_persos)
    repartition.m_roles.set(r_roles)
    repartition.save()
    return redirect("/gestionnaire/t/")


def modify(request, arg_val=""):
    r_personnel_id = request.POST['personnel']
    r_role_id = request.POST['role']
    personnel = Personnel.objects.get(id=int(r_personnel_id))
    role = Role.objects.get(id=int(r_role_id))
    r_institution = Institution.objects.get(id=int(request.POST['institution']))
    p_f = Personnel_Function(m_personnel=personnel, m_role=role, m_institution=r_institution)
    p_f.save()
    return redirect('/personnels/')


def save_plannify(request):
    tache_id = request.POST['calendar_tache']
    calendar = request.POST['calendar_selected']
    periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
    tache = Tache.objects.get(id=int(tache_id))
    try:
        plani_tche = TachePlannify.objects.filter(m_tache__id=int(tache_id)).first()
        plani_tche.m_planify = calendar
        plani_tche.m_periode = periode
    except:
        plani_tche = TachePlannify(m_tache=tache, m_planify=calendar, m_periode=periode)
    plani_tche.save()
    institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                        m_periode=periode)
    return redirect("/planifier/" + str(institutionPe.first().id) + "/")


# @cache_page(60 * 15)
def operations_home(request, lvl=-1, arg_structure="#", periode="#", search="#", only_not=0):
    template = "webpages/ctn_bpf/index.html"
    context = basis(request)
    if lvl == -1:
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
    else:
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution'],
                                                   m_hierachie=lvl).last().m_entity_type
    lines = entity.lines()
    tache_lvl = entity.is_tache
    if arg_structure not in ["#", '0']:
        tmp_structure = Structure.objects.get(id=int(arg_structure))
        try:
            tmp = list()
            for l in lines:
                if l.structure == tmp_structure:
                    tmp.append(l)
                else:
                    pass
            lines = tmp
            context['arg_structure'] = int(arg_structure)
        except:
            pass
    if periode not in ["#", '0']:
        try:
            tmp = list()
            for t in lines:
                if periode in t.plannification().table():
                    tmp.append(t)
            lines = tmp
        except:
            pass
    if search != "#":
        tmp = list()
        for t in lines:
            if search in t.get_name():
                tmp.append(t)
        lines = tmp
    context['entity'] = entity
    context['sup_entity'] = entity.sup_entity(context['actual_institution'].id)
    context['lines'] = lines
    context['fields'] = entity.fields()
    context['operation'] = 1
    context['personnel'] = Personnel.objects.filter()
    context['menu'] = 'o'
    context['lvl'] = lvl
    context['g_v'] = 'o'
    context['periode'] = periode
    context["tache_lvl"] = tache_lvl

    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


@login_required(login_url='/log_account')
def notifications(request):
    template = "webpages/ctn_bpf/index.html"
    context = basis(request)
    entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
        'm_institution').last().m_entity_type
    lines = list()
    for l in entity.lines():
        if l.progression() < 100:
            operations = l.operations()
            appd = False
            for o in operations:
                if o.personnel == request.user.personnel:
                    lines.append(l)
                    break
    context['notif'] = True
    context['entity'] = entity

    # context['lines'] = lines
    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    context['fields'] = entity.fields()
    context['personnel'] = Personnel.objects.filter()
    context['menu'] = 'o'
    context['g_v'] = 'o'
    return render(request, template, context)


# @login_required(login_url='/log_account')
# def alert_notifs(request, search=None, tree=None, report=0):
#     context = basis(request)
#     template = "webpages/ctn_bpf/alert_notifs.html"
#     operation_historic = HistoricRACI.objects.all()
#     perso = request.user.personnel
#     context['report'] = report
#     context['operation_historic'] = operation_historic
#     repeat_mode = context["actual_institution"].repeat_mode
#     if repeat_mode:
#         na_class = OperationDetails
#         if report == 0:
#             main_operations = Operation.objects.filter(personnel=perso.id,
#                                                        etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 1:
#             main_operations = na_class.objects.filter(m_operation__accountable=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 2:
#             main_operations = na_class.objects.filter(m_operation__consulted=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 3:
#             main_operations = na_class.objects.filter(m_operation__informed=perso.id,
#                                                       etat='2')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 100:
#             main_operations = na_class.objects.filter()
#     else:
#         na_class = Operation
#         if report == 0:
#             main_operations = na_class.objects.filter(personnel=perso.id,
#                                                       etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 1:
#             main_operations = na_class.objects.filter(accountable=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 2:
#             main_operations = na_class.objects.filter(consulted=perso.id,
#                                                       etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 3:
#             main_operations = na_class.objects.filter(informed=perso.id,
#                                                       etat='2')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 100:
#             main_operations = na_class.objects.filter()
#     bool(main_operations)
#     if repeat_mode and report != 0:
#         tmp = list()
#         for n in main_operations:
#             tmp.append(n.m_operation.id)
#         main_operations = Operation.objects.filter(id__in=tmp)

#     main_operations = main_operations.order_by('-date_creation')
#     if tree == '1':
#         entHidden = request.POST["entHidden"]
#         context["entHidden"] = entHidden.split("#")
#         main_operations = main_operations.filter(code__contains=entHidden)
#     tmp = list()
#     try:
#         n = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).count()
#     except:
#         n = 0

#     for i in range(n):
#         tmp.append(set())

#     for o in main_operations:
#         if o.code != None:
#             o2 = o.code.split("#")
#             try:
#                 for i in range(n):
#                     tmp[i].add(o2[i])
#             except:
#                 pass

#     ents = list()
#     for i in range(n):
#         try:
#             ents.append({
#                 "hierachie": i,
#                 'entities': Entity.objects.filter(id__in=list(tmp[i]))
#             })
#         except:
#             pass
#     context['ents'] = ents
#     context['n'] = n

#     main_operations2 = OperationRole.objects.filter(m_personnel=perso.id).values('m_operation')
#     context['main_operations2'] = main_operations2
#     # operations = perso.get_taches() #get_operations()

#     results = list()
#     results = list(main_operations)
#     """
# 	for o in operations:
# 		if o.progression() == 0 and o.rapported() in ['0',None] :
# 			results.append(o)
# 	"""
#     paginator_o = Paginator(results, 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     context['menu'] = 'aN'
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range
#     context['lines'] = context['pages_o']
#     return render(request, template, context)


# def save_rapport(request):
#     context = basis(request)
#     r_operation = Operation.objects.get(id=int(request.POST['operation_id']))
#     actual_institution = context['actual_institution']

#     r_operation.etat = "1"
#     r_operation.save()
#     if request.method == "POST":
#         operation_comm = request.POST.get('operation_comm')
#         operation_raci = HistoricRACI.objects.create(m_commentaire=operation_comm,
#                                                      m_operation_id=request.POST['operation_id'], m_role="R")
#         operation_raci.save()
#         if context["actual_institution"].repeat_mode == True:
#             r_operation = OperationDetails(m_operation=r_operation)
#             r_operation.personnel = request.user.personnel
#             r_operation.m_institution_id = actual_institution
#             r_operation.save()
#             fil_class = OperationDetailsFile
#     else:
#         fil_class = OperationFile
#     try:
#         r_commentaire = request.POST['operation_comm']
#     except:
#         r_commentaire = None
#     try:
#         r_fichier = request.FILES['operation _fichier']
#     except:
#         r_fichier = None
#     if context['actual_institution'].default_options != True:
#         rapport_input = request.POST['rapport_input']
#         rapport_values = request.POST['rapport_values']
#         try:
#             aggregates = context['actual_institution'].operations_modules().type_fields_rapported()
#             aggs_fields = context['actual_institution'].operations_modules().fields_rapported()
#         except:
#             aggregates = list()
#         i = 1
#         for a in aggregates:
#             if a == 'file':
#                 delet = fil_class.objects.filter(m_field=aggs_fields[(i - 1)], operation=r_operation)
#                 delet.delete()
#                 oF = fil_class.objects.create(m_field=aggs_fields[(i - 1)], operation=r_operation)
#                 try:
#                     oF.m_file = request.FILES['file_r' + str(i)]
#                 except:
#                     pass
#                 oF.save()
#             i += 1
#         r_operation.m_value_reported = rapport_values
#         r_operation.etat = '1'
#         r_operation.date_rapported = datetime.datetime.now()
#         r_operation.m_commentaire = r_commentaire
#         r_operation.save()
#     else:
#         r_operation.etat = '1'
#         rapport_input = request.POST['rapport_input']
#         if rapport_input != 'c':
#             rapport = OperationRapport(operation=r_operation, commentaire=r_commentaire)
#         else:
#             # r_nom = request.POST['operation_nom']
#             rapport = OperationRapport(piece_jointe=r_fichier, operation=r_operation, commentaire=r_commentaire)
#             # r_operation.etat = '1' #nom_piece_jointe=r_nom
#             periode = r_operation.periodes()
#             desc_tmp = periode.desc_split()
#             desc_tmp.append("")
#             index = 0
#             for i in desc_tmp:
#                 if i == '9':
#                     pass
#                 elif i == '0':
#                     desc_tmp[index] = '1'
#                     rapport.period = index
#                     rapport.save()
#                     request.session['new_rapport'] = 1
#                     break
#                 elif i == '1':
#                     request.session['have_to_done'] = 1
#                     break
#                 index += 1
#             desc_tmp = "_".join(desc_tmp)

#             periode.m_desc_realisation = desc_tmp
#             periode.save()
#     try:
#         finances = request.POST["finances"]
#         r_operation.montant2 = int(finances)
#     except:
#         r_operation.montant2 = 0
#     r_operation.save()
#     request.session['new_rapport'] = 1
#     try:
#         operation = r_operation
#         peA = None
#         tmps = [operation.accountable, operation.consulted]
#         message_context1 = {
#             'operation': operation,
#             'role': 'A',
#             'commentaires': r_commentaire,
#             'lien': "/decision/o/" + str(operation.id) + "/",
#             'institution': operation.institution()
#         }
#         message_context2 = {
#             'operation': operation,
#             'role': 'C',
#             'commentaires': r_commentaire,
#             'lien': "/decision/o/" + str(operation.id) + "/",
#             'institution': operation.institution()
#         }

#         subject = str(operation) + " - attente de validation"
#         message1 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context1)
#         message2 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context2)
#         recipient_list1 = [operation.accountable.bd_user.email, ]
#         if operation.consulted != None:
#             recipient_list2 = [operation.consulted.bd_user.email, ]
#         else:
#             recipient_list2 = list()
#         email_from = settings.EMAIL_HOST_USER
#         msg1 = EmailMessage(subject, message1, email_from, recipient_list1)
#         msg1.content_subtype = 'html'
#         msg2 = EmailMessage(subject, message2, email_from, recipient_list2)
#         msg2.content_subtype = 'html'
#         try:
#             if r_fichier != None:
#                 msg1.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
#                 msg2.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
#             msg1.send()
#             msg2.send()
#         except:
#             pass
#     except:
#         pass
#     response = redirect('/operations/')
#     return response


def assign_supervisor(request):
    tache = Tache.objects.get(id=int(request.POST["assign"]))
    supervisor = Personnel.objects.get(id=int(request.POST['perso']))
    tache.superviseur = supervisor
    tache.save()
    return redirect('/gestionnaire/t/')


# def valid_rapport(request):
#     opera_valider_id = request.POST['opera_valider_id']
#     operation = Operation.objects.get(id=int(opera_valider_id))
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     try:
#         operation_rapport = request.POST["operation_rapport"]
#         operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
#         operation_rapport.etat = "2"
#         operation_rapport.m_institution_id = actual_institution
#         operation_rapport.save()
#     except:
#         operation.etat = '2'

#     index = 0
#     if request.method == "POST":
#         m_commentaire = request.POST.get('opera_valider_comment')
#         # date_realisation = date.today()
#         # date_realisation = datetime.today().date()
#         save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
#                                                     m_operation_id=request.POST['opera_valider_id'], m_role='A')
#         save_historic.save()
#     # if defaulted configurations
#     try:
#         periode = operation.periodes()
#         desc_tmp = periode.desc_split()
#         desc_tmp.append("")
#         for i in desc_tmp:
#             if i in ['9', '0']:
#                 pass
#             elif i == '1':
#                 desc_tmp[index] = '2'
#                 request.session['validation_done'] = 1
#                 break
#             index += 1
#         desc_tmp = "_".join(desc_tmp)
#         periode.m_desc_realisation = desc_tmp
#         periode.save()
#     except:
#         pass
#     operation.save()

#     subject = " Evolution " + str(operation)
#     message_context = {
#         'operation': operation,
#     }
#     message = render_to_string('webpages/ctn_bpf/mails/inform_evolution.html', message_context)

#     email_from = settings.EMAIL_HOST_USER
#     recipient_list = [operation.personnel.bd_user.email, ]
#     if operation.informed != None:
#         recipient_list.append(operation.informed.bd_user.email)
#     msg = EmailMessage(subject, message, email_from, recipient_list)
#     msg.content_subtype = 'html'
#     try:
#         msg.send()
#         send = '0'
#     except:
#         send = '1'

#     return redirect('/operations/')


def in_valid_rapport(request):
    opera_invalider_id = request.POST['opera_invalider_id']
    commentaire = request.POST["opera_invalider_comment"]
    operation = Operation.objects.get(id=int(opera_invalider_id))
    operation.etat = '0'
    periode = operation.periodes()
    desc_tmp = periode.desc_split()
    desc_tmp.append("")
    try:
        operation_rapport = request.POST["operation_rapport"]
        operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
        operation_rapport.etat = 0
        operation_rapport.save()  #:save()
    except:
        operation_rapport.etat = 0
        pass
    index = 0
    if request.method == "POST":
        m_commentaire = request.POST.get('opera_invalider_comment')
        # date_realisation = date.today()
        # date_realisation = datetime.today().date()
        save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
                                                    m_operation_id=request.POST['opera_invalider_id'], m_role='A')
        save_historic.save()
    for i in desc_tmp:
        if i in ['1']:
            desc_tmp[index] = '0'
            request.session['validation_done'] = 1
        index += 1
    desc_tmp = "_".join(desc_tmp)
    periode.m_desc_realisation = desc_tmp
    periode.save()
    operation.save()
    message_context = {
        'operation': operation,
        'commentaire': commentaire
    }

    subject = " Rapport non Valide"
    message = render_to_string('webpages/ctn_bpf/mails/operation_invalid.html', message_context)
    email = operation.personnel.bd_user.email
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    msg = EmailMessage(subject, message, email_from, recipient_list)
    msg.content_subtype = 'html'
    try:
        msg.send()
        send = '0'
    except:
        send = '1'

    return redirect('/operations/')


def delete(request):
    id_entity = request.POST['id_entity']
    generator = request.POST['generator']
    try:
        force = False
        if generator == 'o':
            entity = Operation.objects.get(id=int(id_entity))
            response = redirect('/taches/' + str(entity.tache.id) + '/')
        elif generator == 'eD':
            entity = DataElement.objects.get(id=int(id_entity))
            response = redirect('/dataelts/')
        elif generator == 'p2':
            entity = Personnel.objects.get(id=int(id_entity))
            response = redirect('/personnels/')
        elif generator == 'r':
            entity = Role.objects.get(id=int(id_entity))
            response = redirect('/roles/')
        elif generator == 's':
            entity = Structure.objects.get(id=int(id_entity))
            response = redirect('/structures/')
        elif generator == 'e':
            entity = InsitutionEntities.objects.get(id=int(id_entity))
            hierachie = entity.m_hierachie
            institution = entity.m_institution
            to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
            for d in to_decaler:
                d.m_hierachie -= 1
                d.save()
            response = redirect('/configurations/')
            entity = entity.m_entity_type
        elif generator == 'i2':
            entity = Indicateur.objects.get(id=int(id_entity))
            response = redirect('/evaluer/' + str(entity.m_enti.m_type_entity.hierachie()))
        elif generator == 'iF3':
            entity = IndicateurVal.objects.get(id=int(id_entity))
            sup = entity.m_indicateur.m_enti
            try:
                s_sup = sup.sup_entity().id
                sup_hierachie = sup.m_type_entity.hierachie()

                response = redirect('/data_form/' + str(sup_hierachie) + '/' + str(s_sup) + '/')
            except:
                response = redirect('/data_form/-1/0/')
        elif generator == 'y':
            entity = Institution_Periodes.objects.get(id=int(id_entity))
            response = redirect('/configurations/')
        elif generator == 'z':
            entity = SubPeriode.objects.get(id=int(id_entity))
            response = redirect('/configurations/')
        elif generator == 'p2_RACI':
            entity = PersonnelRACI.objects.get(id=int(id_entity))
            response = redirect('/personnels_raci/')
        elif generator == "dSV":
            entity = DataSet.objects.get(id=int(id_entity))
            response = redirect("/data_form/-1/0/")
        else:
            hierachie = int(request.POST['hierachy'])
            try:
                base_val = int(request.POST["base_val"])
            except:
                base_val = "0"
            if base_val not in ['', '0', None]:
                response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
            else:
                response = "/gestionnaire/" + str(hierachie) + "/"

            entity = Entity.objects.get(id=int(id_entity))
            response = redirect(response)
        entity.delete()
    except ProtectedError:
        # render the template with your message in the context
        # or you can use the messages framework to send the message:
        template = "webpages/ctn_bpf/error_delete.html"
        context = basis(request)
        entity = Entity.objects.filter(id=int(id_entity)).first()
        if entity != None:
            context["entity"] = entity
            tmp_hierachie = entity.m_type_entity.hierachie()
            context['hierachie'] = tmp_hierachie
            if entity.m_type_entity.is_tache == True:
                subs = context["actual_institution"].operations_name
            else:
                tmp_hierachie += 1
                subs = InsitutionEntities.objects.filter(m_institution=context["actual_institution"],
                                                         m_hierachie=tmp_hierachie).first()
            context['subs'] = subs
            context['element'] = 1
        response = render(request, template, context)
    return response


def ajax_lines(request):
    type_search = request.GET.get('type_search')
    value_search = request.GET.get('value_search')
    sub_search = request.GET.get('sub_search')
    results = list()
    lines = list()
    progressions = list()
    lines_count = 0

    if value_search != "|":
        results = objets[type_search].objects.filter(nom__contains=value_search)
    else:
        pass

    if type_search == 'o':
        for r in results:
            progressions.append(r.progression())
            lines.append(r.nom + "|" + str(r.personnel) + "|" + str(r.montant) + "|" + r.semaines + "|")

    lines_count = results.count()
    data = {
        'progressions': progressions,
        'lines': lines,
        'lines_count': lines_count
    }
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def configurations(request):
    template = "webpages/ctn_bpf/configurations.html"
    context = basis(request)
    context['institution'] = request.user.personnel.actual_institution
    context['menu'] = 'c'
    context['g_v'] = 'e'
    context['basis_periodes'] = Periode.objects.filter(m_initial=True)
    return render(request, template, context)


# def profile(request):
#     template = "webpages/ctn_bpf/profile.html"
#     context = basis(request)
#     context['institution'] = context['actual_institution']
#     context["personnel"] = request.user.personnel
#     return render(request, template, context)


def filter_op_search(request):
    search = request.POST['search']
    return filter_op(request, search)


def filter_op(request, search="#"):
    try:
        niveau = int(request.POST['niveau'])
        periode = request.POST['periode']
        structure = request.POST['structure']
    except:
        niveau = -1
        periode = "#"
        structure = "#"
    try:
        only_not = int(request.POST["only_not"])
    except:
        only_not = 0
    return operations_home(request, niveau, structure, periode, search, only_not)


# def notifs(request):
#     user_id = request.GET.get('value')
#     insti_id = request.GET.get('institution')
#     actual_institution = Institution.objects.get(id=int(insti_id))
#     perso = Personnel.objects.get(bd_user__id=int(user_id))
#     if actual_institution.repeat_mode == False:
#         operations1 = list()
#         operations = Operation.objects.filter(personnel=perso)
#         operations_report = Operation.objects.filter(accountable=perso, etat='1')
#         count_is_consulted = Operation.objects.filter(consulted=perso, etat='1').count()
#         count_is_informed = Operation.objects.filter(informed=perso, etat='2').count()


#     else:
#         operations1 = Operation.objects.filter(personnel=perso)
#         operations = OperationDetails.objects.filter(m_operation__personnel=perso)
#         operations_report = OperationDetails.objects.filter(m_operation__accountable=perso, etat='1')
#         count_is_consulted = OperationDetails.objects.filter(m_operation__consulted=perso, etat='1').count()
#         count_is_informed = OperationDetails.objects.filter(m_operation__informed=perso, etat='2').count()

#     # General_Results
#     nb_taches = 0
#     nb_have_rapported = 0
#     nb_is_done = 0
#     nb_have_to_do = 0
#     nb_observations = 0

#     nb_have_rapported2 = 0
#     nb_is_done2 = 0
#     nb_have_to_do2 = 0
#     nb_observations2 = 0
#     if True:
#         for o in operations1:
#             if o.etat == '0':
#                 nb_have_to_do += 1
#                 nb_taches += 1
#                 if o.institution() == actual_institution:
#                     nb_have_to_do2 += 1
#         for o in operations:
#             if o.etat == '1':
#                 nb_have_rapported += 1
#                 if o.institution() == actual_institution:
#                     nb_have_rapported2 += 1
#             else:
#                 nb_is_done += 1
#                 if o.institution() == actual_institution:
#                     nb_is_done2 += 1

#         for o in operations_report:
#             nb_observations += 1
#             if o.institution() == actual_institution:
#                 nb_observations2 += 1

#     data = {
#         'result': nb_taches,
#         'have_to_done': nb_have_to_do,
#         'is_done': nb_is_done,
#         'have_rapported': nb_have_rapported,
#         'have_to_done2': nb_have_to_do2,
#         'is_done2': nb_is_done2,
#         'have_rapported2': nb_have_rapported2,
#         'nb_observations': nb_observations,
#         'nb_observations2': nb_observations2,
#         'count_is_consulted': count_is_consulted,
#         'count_is_informed': count_is_informed
#     }
#     # entities = institution.get_entities()
#     indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution).count()
#     data["indi_total"] = indicateurs_all
#     return JsonResponse(data)


def indicateurs_ajax(request):
    actual_institution = request.GET.get("institution")
    actual_year = request.GET.get("actual_year")

    try:
        entity_type = int(request.GET.get("entity_type"))
        type_indic = request.GET.get("type_indic")
    except:
        entity_type = None

    try:
        id_entity = int(request.GET.get("id_entity"))
        id_entity = Entity.objects.get(id=id_entity)
    except:
        id_entity = None

    if entity_type == None:
        if id_entity != None:
            indicateurs_all = Indicateur.objects.filter(m_enti=id_entity)
        else:
            indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution)
        nb_all = indicateurs_all.count()
        indicateurs_renseignes = list()
        nb_renseignes = 0

        for i in indicateurs_all:
            if i.actu_value != None:
                indicateurs_renseignes.append(i)
                nb_renseignes += 1

        indicateurs_values = list()
        cibles = list()
        for i in indicateurs_renseignes:
            cibles.append(i.get_cibles(actual_year))
            indicateurs_values.append(i.actu_value())
        data = {
            'all': nb_all,
            'nb_renseignes': nb_renseignes,
            'cibles': cibles,
            'indicateurs_values': indicateurs_values
        }
    elif type_indic == "F":
        if id_entity == None:
            eT = EntityType.objects.filter(id=entity_type).first()
            entities = eT.lines()
        else:
            eT = id_entity.m_type_entity
            entities = id_entity.sub_entities()
        resul1 = list()
        resul2 = list()
        for e in entities:
            try:  # it may be Operation
                operations = e.operations()
                if eT.is_tache == False:
                    taches = e.taches()
                else:
                    taches = [e]
                tmp = 0
                tmp2 = 0
                for t in taches:
                    if t.montant != None:
                        tmp += int(t.montant)
                for o in operations:
                    tmp2 += int(o.montant2)
                resul1.append(tmp)
                resul2.append(tmp2)
            except:
                pass

        data = {
            'list_montant1': resul1,
            'list_montant2': resul2
        }
        entq = list()
        entq_id = list()
        for e in entities:
            entq.append(str(e))
            entq_id.append(str(e.id))
        data['entities'] = entq
        data["entities_id"] = entq_id
    else:
        if id_entity == None:
            eT = EntityType.objects.filter(id=entity_type).first()
            entities = eT.lines()
        else:
            entities = [id_entity]
        indicateurs_all = Indicateur.objects.filter(m_enti__in=entities)
        ens = dict()
        ens_good = dict()
        ens_bad = dict()
        nbE = indicateurs_all.count()
        for i in entities:
            ens[str(i.id)] = 0
            ens_good[str(i.id)] = 0
            ens_bad[str(i.id)] = 0

        for i in indicateurs_all:
            ens[str(i.m_enti.id)] += 1
            try:
                if int(i.get_cibles(actual_year)) > int(i.actu_value()):
                    ens_bad[str(i.m_enti.id)] += 1
                else:
                    ens_good[str(i.m_enti.id)] += 1
            except:
                pass

        if nbE > 0:
            for i in entities:
                ens[str(i.id)] = ens[str(i.id)]  # *100/nbE
                ens_good[str(i.id)] = ens_good[str(i.id)]  # *100/nbE
                ens_bad[str(i.id)] = ens_bad[str(i.id)]  # *100/nbE

        list_ens = list()
        list_ens_good = list()
        list_ens_bad = list()
        for i in entities:
            list_ens.append(ens[str(i.id)])
            list_ens_good.append(ens_good[str(i.id)])
            list_ens_bad.append(ens_bad[str(i.id)])
        data = {
            'list_ens': list_ens,
            'list_ens_good': list_ens_good,
            'list_ens_bad': list_ens_bad
        }
        entq = list()
        entq_id = list()
        for e in entities:
            entq.append(str(e))
            entq_id.append(str(e.id))
        data['entities'] = entq
        data["entities_id"] = entq_id
    return JsonResponse(data, safe=False)


def institutions(request, search=None):
    template = "webpages/ctn_bpf/institution.html"
    context = basis(request)
    institutions1 = list()
    structures = Personnel_Structure.objects.filter(m_personnel=request.user.personnel)
    for s in structures:
        if s.m_structure.institution not in institutions1:
            institutions1.append(s.m_structure.institution)
    for i in Institution.objects.filter(owner__m_user__id=request.user.id):
        if i not in institutions1:
            institutions1.append(i)
    if search != None:
        tmp = institutions1
        institutions1 = list()
        for i in tmp:
            if search in i.nom or search in i.sigle:
                institutions1.append(i)
    institutions1 = sorted(institutions1, key=lambda t: t.sigle)
    paginator_o = Paginator(institutions1, 12)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['institutions1'] = elements_page
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    context['menu'] = 'i'
    return render(request, template, context)


def set_institution(request, institution_id):
    institution = Institution.objects.get(id=institution_id)
    request.user.personnel.actual_institution = institution
    request.user.personnel.save()
    return redirect("/")


def operations_details_list(request, operation_id):
    template = "webpages/ctn_bpf/operations_details_list.html"
    context = basis(request)
    operation = Operation.objects.get(id=operation_id)
    context["operation"] = operation
    return render(request, template, context)


# def operations_details(request, operation_id):
#     template = "webpages/ctn_bpf/operations_details.html"
#     context = basis(request)
#     operation = Operation.objects.get(id=operation_id)
#     actual_institution = context['actual_institution']
#     if operation.institution() != context['actual_institution']:
#         request.user.personnel.actual_institution = operation.institution()
#         request.user.personnel.save()
#         context = basis(request)
#     lines = list()

#     tache = operation.tache
#     if actual_institution.default_options != True:
#         try:
#             i = 0
#             for th in actual_institution.operations_modules().fill_fields_rapp():
#                 a = th
#                 if a["type"] == "choix":
#                     a["extras"] = operation.get_value(a["field"])
#                 lines.append(a)
#             aggs2 = tache.aggregates2()
#             for a in aggs2:
#                 lines[i]["field"] = a
#                 i += 1
#         except:
#             pass
#     context["lines"] = lines

#     tache = operation.tache
#     context['operation'] = operation
#     context['tache'] = tache
#     context['institutions'] = Institution.objects.filter()
#     context['menu'] = 'o'
#     return render(request, template, context)


# def history(request, dates="#"):
#     template = "webpages/ctn_bpf/history.html"
#     context = basis(request)
#     entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
#         'm_institution').last().m_entity_type
#     tasks = entity.lines()
#     if context['actual_institution'].default_options == True:
#         context['fields'] = [entity.m_nom, 'Operation', 'Personnel', 'Rapport Technique', 'Date']
#         unsorted_results = list()
#         for t in tasks:
#             for o in t.operations():
#                 aka = OperationRapport.objects.filter(operation__id=o.id)
#                 for o2 in aka:
#                     unsorted_results.append(o2)
#     else:
#         if context["actual_institution"].repeat_mode == True:
#             template = "webpages/ctn_bpf/history_rapport.html"
#             tasks = context["actual_institution"].taches()
#             context["taches"] = tasks

#             context['menu'] = 'h'
#             # context['dates'] = dates
#             paginator_o = Paginator(tasks, 10)
#             page_number_o = request.GET.get('page')
#             elements_page = paginator_o.get_page(page_number_o)
#             # oeuvres_date
#             context['pages_o'] = elements_page
#             context['num_pages'] = paginator_o.num_pages
#             context['page_range'] = paginator_o.page_range
#             """
# 			paginator_o = Paginator(sorted_result,10)
# 			page_number_o = request.GET.get('page')
# 			elements_page = paginator_o.get_page(page_number_o)
# 			#oeuvres_date
# 			context['pages_o']=elements_page
# 			context['num_pages']=paginator_o.num_pages
# 			context['page_range']=paginator_o.page_range
# 			"""
#         else:
#             tmpas = context['actual_institution'].operations_modules().fill_fields_rapp()
#             aggregates = list()
#             for t in tmpas:
#                 if t['type'] == 'choix':
#                     aggregates.append(t['extras'])
#                 else:
#                     aggregates.append(t['field'])
#             context['fields'] = [entity.m_nom, context['actual_institution'].operations_name] + aggregates + [
#                 'Personnel', 'Date']

#             unsorted_results = list()
#             for t in tasks:
#                 for o in t.operations():
#                     unsorted_results.append(o)

#             sorted_result = sorted(unsorted_results, key=lambda t: t.date_creation)
#             if dates != "#":
#                 start_date = request.POST['start_date']
#                 end_date = request.POST['end_date']
#                 context['start_date'] = start_date
#                 context['end_date'] = end_date

#                 start_date = start_date.split("-")
#                 end_date = end_date.split("-")
#                 start_date = [int(elt) for elt in start_date]
#                 end_date = [int(elt) for elt in end_date]

#                 result = list()
#                 for t in sorted_result:
#                     start_date_cmp = start_date == list() or (
#                                 t.date_creation.year > start_date[0] or t.date_creation.year == start_date[
#                             0] and t.date_creation.month > start_date[1] or t.date_creation.year == start_date[
#                                     0] and t.date_creation.month == start_date[1] and t.date_creation.day >= start_date[
#                                     2])
#                     end_date_cmp = end_date == list() or (
#                                 t.date_creation.year < end_date[0] or t.date_creation.year == end_date[
#                             0] and t.date_creation.month < end_date[1] or t.date_creation.year == end_date[
#                                     0] and t.date_creation.month == end_date[1] and t.date_creation.day <= end_date[2])

#                     if start_date_cmp and end_date_cmp:
#                         result.append(t)
#             sorted_result = result

#             context['lines'] = sorted_result
#             context['nb_lines'] = len(sorted_result)
#             context['institutions'] = Institution.objects.filter()
#             context['menu'] = 'h'
#             context['dates'] = dates
#             paginator_o = Paginator(sorted_result, 10)
#             page_number_o = request.GET.get('page')
#             elements_page = paginator_o.get_page(page_number_o)
#             # oeuvres_date
#             context['pages_o'] = elements_page
#             context['num_pages'] = paginator_o.num_pages
#             context['page_range'] = paginator_o.page_range
#     return render(request, template, context)


def calendar(request):
    template = "webpages/ctn_bpf/agenda_week.html"
    context = basis(request)
    return render(request, template, context)


def save_period(request):
    institution = request.POST['institution']
    periode = request.POST['periode']
    decoupage = request.POST['decoupage']
    edit_or_create = request.POST['edit_or_create']
    try:
        big_period = request.POST["big_periode"]
        sub_period = 0
    except:
        sub_period = None
    if sub_period != None:
        r_big_period = Periode.objects.get(id=int(big_period))
        sub_period = request.POST["sub_period"]
        details = request.POST["details"]
        if edit_or_create != 'e':
            r_sub_period = SubPeriode(m_periode=r_big_period, m_sub_value=periode, m_decoupage=decoupage,
                                      m_decoupage_description=details)
        else:
            edit_id = request.POST['edit_id']
            r_sub_period = SubPeriode.objects.get(id=int(edit_id))
            r_sub_period.m_periode = r_big_period
            r_sub_period.m_sub_value = periode
            r_sub_period.m_decoupage = decoupage
            r_sub_period.m_decoupage_description = details
        r_sub_period.save()
    else:
        if edit_or_create != 'e':
            r_period = Periode(m_value=periode, m_decoupage=decoupage)
        else:
            edit_id = request.POST['edit_id']
            r_period = Periode.objects.get(id=int(edit_id))
            r_period.m_value = periode
            r_period.m_decoupage = decoupage
        r_period.save()
        if edit_or_create != 'e':
            institution = Institution.objects.get(id=int(institution))
            i_periode = Institution_Periodes(m_institution=institution, m_periode=r_period)
            i_periode.save()
    return redirect("/configurations/")


def ajax_graphiques(request):
    data = dict()
    id_tache = int(request.GET.get('id_graph'))
    type_graph = request.GET.get('type_graph')
    nature_graph = int(request.GET.get('nature_graph'))
    inst_graph = Institution.objects.get(id=int(request.GET.get('inst_graph')))
    actual_config = inst_graph.default_options

    if nature_graph != -1:
        element = InsitutionEntities.objects.filter(m_institution=inst_graph,
                                                    m_hierachie=nature_graph).first().m_entity_type
    else:
        element = InsitutionEntities.objects.filter(m_institution=inst_graph).last().m_entity_type

    if element.is_tache:
        entity = Tache.objects.get(id=id_tache)
        operations = entity.operations()
        nb_operations = len(operations)
    else:
        entity = Entity.objects.get(id=id_tache)

    if type_graph == 'eT':
        if element.is_tache:
            tache_tmp = Tache.objects.get(id=entity.id)
            plansT = list()
            for p in tache_tmp.plannification().table():
                plansT.append(p)
            x_abcisses = list()
            for p in plansT:
                for xi in inst_graph.default_subperiod.decoup_desc_slip2():
                    x_abcisses.append(str(p) + "-" + str(xi))

            # Matrice des mois
            result = list()

            x_interval = tache_tmp.plannification().table()
            operations = tache_tmp.operations()
            nb_operations = operations.count()
            tmp_sum = 0
            nb_x_abcisses = 0
            tmp_dict = list()
            for x in x_interval:
                # tmp_sum = 0
                operations_2 = operations.filter(m_tache_plannification=x)
                all_dict = list()
                for op in operations_2:
                    x_dict = list()
                    for t in op.periodes().desc_split():
                        x_dict.append(0)
                    i_x_d = 0

                    for t in op.periodes().desc_split():
                        if actual_config == True:
                            if t == '2':
                                tmp_val = 100
                            else:
                                tmp_val = 0
                        else:
                            if t != '9':
                                ds = {'0': 0, '1': 0, '2': 100}
                                tmp_val = ds[op.etat]
                            else:
                                tmp_val = 0

                        x_dict[i_x_d] += tmp_val
                        i_x_d += 1
                    all_dict.append(x_dict)
                # all_dict contient la matrice d'un mois i)

                tmp_dict_result = list()
                if operations_2.first() != None:
                    for t in operations_2[0].periodes().desc_split():
                        tmp_dict_result.append(0)
                    for a_dict in all_dict:
                        ia = 0
                        for a in a_dict:
                            tmp_dict_result[ia] += a
                            ia += 1
                tmp_dict += tmp_dict_result
            result_tmp = 0
            result = list()
            for t in tmp_dict:
                result_tmp += t
                result.append((result_tmp / nb_operations))
        else:
            x_abcisses = inst_graph.default_period.decoup_slip()
            tmp = list()
            taches = entity.taches()
            discovered = list()
            index_tmp = 0
            nb_taches = len(taches)
            for x in x_abcisses:
                tmp.append(0)
                for t in taches:
                    if x in t.plannification().table() and t not in discovered:
                        tmp[index_tmp] += t.progression()
                        discovered.append(t)
                index_tmp += 1
            y_abcisses = list()
            for y in range(index_tmp):
                if nb_taches > 0:
                    y_abcisses.append((tmp[y] / nb_taches))
                else:
                    y_abcisses.append(0)
            result = list()
            rst = 0
            for y in y_abcisses:
                rst += y
                result.append(rst)
    elif type_graph == 'p':
        x_abcisses = set()
        result_x = list()
        y_abcisses = list()
        for o in operations:
            x_abcisses.add(o.personnel)
        for perso in x_abcisses:
            y_abcisses.append(perso.progression_taches(inst_graph))
        for x in x_abcisses:
            result_x.append(str(x))
        x_abcisses = result_x
        result = y_abcisses
    elif type_graph == 't':
        x_abcisses = list()
        result = list()
        subs = entity.sub_entities()
        try:
            sub_name = str(subs[0].m_type_entity)
        except:
            sub_name = " "
        i = 0
        for x in subs:
            result.append(x.progression())
            x_abcisses.append(str(x))
            i += 1
        data['nb_sub'] = i
        data['sub_names'] = sub_name
    data['x_abcisses'] = x_abcisses
    data['y_abcisses'] = result
    return JsonResponse(data, safe=False)


# @login_required(login_url='/log_account')
# def decision(request, nature="#", element_id=0, operation_rapport_id=None):
#     context = basis(request)
#     if nature == "o":
#         template = "webpages/ctn_bpf/decision.html"
#         operation = Operation.objects.get(id=element_id)
#         if context["actual_institution"].repeat_mode == True:
#             operation_historic = HistoricRACI.objects.all()
#             context['operation_historic'] = operation_historic
#             template = "webpages/ctn_bpf/decision_rapport.html"
#             operation = Operation.objects.get(id=element_id)
#             if operation_rapport_id == None:
#                 operation_rapport = operation.get_operation_details_invalid().last()
#                 context["operation_rapport"] = operation_rapport
#         context['operation'] = operation
#         context['tache'] = operation.tache
#     else:
#         context["entity"] = Entity.objects.get(id=int(element_id))
#         template = "webpages/ctn_bpf/decision_plus.html"
#     return render(request, template, context)


# def get_elements(request):
#     # Elements can be Entity, Forms
#     if True:  # try:
#         other_limk = request.GET.get("other")
#         institution = Institution.objects.get(id=int(request.GET.get('institution')))
#         if other_limk == "dS":
#             dSs = DataSet.objects.filter(m_institution=institution)
#             data = {
#                 "datasets": list(),
#                 "datasets_id": list()
#             }
#             for d in dSs:
#                 data["datasets"].append(str(d))
#                 data["datasets_id"].append(str(d.id))
#         elif other_limk == "dE_code":
#             data = dict()
#             codes = request.GET.get("codes").split("#")
#             result = list()
#             codes_replace = list()
#             for code in codes[:-1]:
#                 res = list()
#                 j = 0
#                 n = len(code)
#                 while j < n:
#                     if code[j] == "$":
#                         j += 1
#                         k = j
#                         while code[j] != "$":
#                             j += 1

#                         res.append(code[k:j])
#                         j += 2
#                     else:
#                         j += 1
#                 tmp_res = list()
#                 tmp_res2 = list()
#                 for r in res:
#                     tmp_res.append(str(DataElement.objects.get(id=int(r))))
#                     tmp_res2.append(r)
#                 result.append(tmp_res)
#                 codes_replace.append(tmp_res2)
#             data["data_elts"] = result
#             data["codes_replace"] = codes_replace
#         elif other_limk == "dI_formula":
#             values = request.GET.get("value").split("#")
#             data_elts = DataSet.objects.get(id=int(request.GET.get("dataset")))
#             result_formula = list()
#             for v in values[:-1]:
#                 ind = Indicateur.objects.get(id=int(v))
#                 result_formula.append(ind.m_numerateur)
#             data = dict()
#             data["data_elts"] = data_elts.join_dataelts()
#             data["formulas"] = result_formula
#     else:  # except:
#         value = int(request.GET.get('value'))
#         nature = int(request.GET.get('nature'))
#         institution = Institution.objects.get(id=int(request.GET.get('institution')))
#         entity_type = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=institution).select_related(
#             'm_institution').first().m_entity_type
#         # entity to upload
#         entity = Entity.objects.get(id=value)
#         default_fields = entity_type.fields()
#         default_fields_type = entity_type.type_fields()
#         default_fields_values = entity.values()
#         # Default Values to putt
#         expected_fields = entity_type.fields_rapported()
#         expected_types_type = entity_type.type_fields_rapported()
#         results = list()
#         data = {
#             'entity': str(entity),
#             'default_fields': default_fields,
#             'default_fields_type': default_fields_type,
#             'default_fields_values': default_fields_values,
#             'expected_fields': expected_fields,
#             'expected_types_type': expected_types_type
#         }
#     return JsonResponse(data, safe=False)


def get_elements_hierachy(request):
    nature = int(request.GET.get('nature'))
    institution = Institution.objects.get(id=int(request.GET.get('institution')))
    if nature == -100:
        type_entity = request.GET.get('type_entity')
        role = Role.objects.get(id=int(type_entity))
        entity_type = role.m_simple_auth
    elif nature != -1:
        entity_type = InsitutionEntities.objects.filter(m_hierachie=nature,
                                                        m_institution=institution).first().m_entity_type
    else:
        entity_type = InsitutionEntities.objects.filter(m_institution=institution).last().m_entity_type
    try:
        big_entity = int(request.GET.get('big_entity'))
        ent = Entity.objects.get(id=int(big_entity))
        lines = ent.sub_entities()
    except:
        lines = entity_type.lines()
    tmp = list()
    ids = list()
    for l in lines:
        tmp.append(str(l))
        ids.append(l.id)
    data = {
        'lines': tmp,
        'ids': ids
    }
    return JsonResponse(data, safe=False)


def get_entities_subsequency(request):
    pass


def get_elements_subsequency_true(request):
    nature = int(request.GET.get('nature'))
    entity = int(request.GET.get('entity'))
    report = int(request.GET.get('report'))
    try:
        institution = int(request.GET.get("institution"))
    except:
        institution = None
    if entity != -1:
        try:
            entity = Entity.objects.get(id=entity)
        except:
            entity = 0
        elts = entity.child_trees()
    else:
        elts = [Institution.objects.get(id=institution).top_entity().lines()]

    data_names = list()
    data_ids = list()
    for elt in elts:
        tmp_id = list()
        tmp_name = list()
        for e in elt:
            tmp_id.append(e.id)
            tmp_name.append(str(e))
        data_names.append(tmp_name)
        data_ids.append(tmp_id)

    data = {
        'data_ids': data_ids,
        'data_names': data_names
    }
    return JsonResponse(data, safe=False)


def get_elements_subsequency(request):
    nature = int(request.GET.get('nature'))
    entity = int(request.GET.get('entity'))
    report = int(request.GET.get('report'))
    try:
        institution = int(request.GET.get("institution"))
    except:
        institution = None
    try:
        entity = Entity.objects.get(id=entity)
    except:
        entity = 0

    if report == 0:
        operations = Operation.objects.filter(etat='0', personnel=request.user.personnel).values('code')
    elif report == 1:
        operations = Operation.objects.filter(etat='1', accountable=request.user.personnel).values('code')
    elif report == 2:
        operations = Operation.objects.filter(etat='1', consulted=request.user.personnel).values('code')
    elif report == 3:
        operations = Operation.objects.filter(etat='2', informed=request.user.personnel).values('code')
    else:
        operations = Operation.objects.filter().values('code')

    if institution != None:
        institution = Institution.objects.get(id=institution)
        operations = operations.filter(m_institution=institution)

    bool(operations)
    result = list()
    if entity != 0:
        for o in operations:
            try:
                if o['code'] not in ["", None] and o['code'].split("#")[nature] == str(entity.id):
                    result.append(o)
            except:
                pass
    else:
        pre_hierachie = int(request.GET.get("pre_hierachy"))
        if pre_hierachie not in [0, -1]:
            for o in operations:
                if o['code'] not in ["", None] and o['code'].split("#")[(nature - 1)] == str(pre_hierachie):
                    result.append(o)
        elif nature == 0:
            result = list(operations)
    steps = list()

    k = 0
    if True:
        if report != 100:
            for i in operations[0]['code'].split("#"):
                steps.append(set())
                k += 1
        else:
            for i in list(operations)[-1]['code'].split("#"):
                steps.append(set())
                k += 1
    else:
        pass

    # Recuperer les Operations
    i = 0
    for o in result:
        i = 0
        for j in range(k):
            if o['code'] not in [None, "", " "]:
                steps[i].add(o['code'].split("#")[j])
                i += 1

    # Transformer en Liste
    ajax_steps = list()
    for s in steps:
        ajax_steps.append("#".join(list(s)))

    ajax_steps2 = list()
    for s in steps:
        s3 = list(s)
        s2 = list()
        for t in s3:
            if t not in ['', None]:
                s2.append(int(t))
        a = Entity.objects.filter(id__in=list(s2))
        a2 = [str(t) for t in list(a)]
        ajax_steps2.append("#".join(a2))

    data = {
        'operations': result,
        'ajax_steps': ajax_steps,
        'ajax_steps2': ajax_steps2
    }
    return JsonResponse(data, safe=False)


def save_valid_rapport(request):
    nature = request.POST['nature']
    resultat = request.POST['resultat_realise']
    institution = Institution.objects.get(id=int(request.POST['institution']))
    entity_type = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=institution).first().m_entity_type
    entity = Entity.objects.get(id=int(request.POST['value']))
    entity.is_rapported = True
    entity.save()
    tR = EntityRapport(m_entity=entity, m_resultat_realise=resultat)
    tR.save()
    return redirect('/' + nature + '/')


def filter_entities(request):
    institution = Institution.objects.get(id=int(request.POST['institution']))
    sub_value = request.POST['sub_value']
    hierachie = int(request.POST['hierachie'])
    tmp_hierachie = hierachie - 1
    if hierachie <= 0:
        hierachie = 0
        value = '0'
    else:
        entity_type = InsitutionEntities.objects.filter(m_institution=institution,
                                                        m_hierachie=(hierachie - 1)).first().m_entity_type
        entity_type_actual = InsitutionEntities.objects.filter(m_institution=institution,
                                                               m_hierachie=(hierachie)).first().m_entity_type
        enums_list = list()
        enums = entity_type_actual.enum_fields()['result']
        if entity_type_actual.m_enum_values not in ['', None]:
            for val in enums:
                enums_list.append(request.POST["enum_" + val['name']])
        if enums_list != list():
            enums_list = "||".join(enums_list)
        value = request.POST[str(entity_type)]
    # gestionnaire(request,gest_val,gest_id=0,name=None,structure=None,periode=None)
    if value != '0':
        element = Entity.objects.get(id=int(value))
        if enums_list != list():
            response = redirect('/gestionnaire/' + str(tmp_hierachie) + '/' + str(element.id) + '/')
        else:
            response = gestionnaire(request, str(tmp_hierachie), str(element.id), None, None, None, enums_list)
    else:
        response = redirect('/gestionnaire/' + str(hierachie) + '/')
    return response


def search(request):
    if request.user.is_authenticated == True:
        template = "webpages/ctn_bpf/search.html"
        val = request.POST['search']
        context = basis(request)
        searches = list()
        entities = context['actual_institution'].get_entities()
        for e in entities:
            lines = e.m_entity_type.lines()
            hierachie = e.m_hierachie
            def_color = '#00a2c3'
            if e.m_entity_type.is_tache:
                def_color = 'orange'
            for l in lines:
                if val in str(l):
                    searches.append({'nature': 'e', 'label': e, 'value': l, 'hierachie': hierachie, 'color': def_color})

        for s in Structure.objects.filter(nom__contains=val, institution=context['actual_institution']):
            searches.append({'nature': 's', 'label': 'Structure', 'value': s, 'color': '#9012a1'})

        for s in Personnel.objects.filter(nom__contains=val):
            searches.append({'nature': 'p', 'label': 'Personnel', 'value': str(s), 'color': '#12c304'})

        context['searches'] = searches
    else:
        return redirect("/")
    return render(request, template, context)


def search2(request, menu):
    search = request.POST["search"]
    if menu == 'i':
        response = institutions(request, search)
    elif menu == 'p2':
        response = personnels(request, search)
    elif menu == 'p2_RACI':
        response = personnels_raci(request, search)
    elif menu == 'r':
        response = roles(request, search)
    elif menu == 'aN':
        response = alert_notifs(request, search)
    return response


@login_required(login_url='/log_account')
def messages(request):
    template = "webpages/ctn_bpf/search.html"
    context = basis(request)
    context['msg_view'] = True
    results = list()
    personnel = request.user.personnel
    accounted = personnel.operations_accounted()
    bool(accounted)
    """
	for o in Operation.objects.filter():
		if  o.rapported() not in [None,'0'] and o.progression()<100 and context['permissions'] > 0:
			results.append({'value':o,'name':'Operation','link':'o','nature':'r'})
	"""
    for o in accounted:
        if o.rapported() not in [None, '0'] and o.progression() < 100:
            # and context['permissions'] > 0
            results.append({'value': o, 'name': 'Operation', 'link': 'o', 'nature': 'r'})
    entities_type = context['actual_institution'].get_entities()
    nb_observations = 0
    """
	for e in entities_type:
		lines = e.m_entity_type.lines()
		for l in lines :
			if l.is_rapported != True and l.progression() == 100:
				results.append({'value':l,'name':str(l.m_type_entity),'link':'o','nature':'o'})
	"""
    context['msgs'] = True
    paginator_o = Paginator(results, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def bad_pass(request):
    mail = request.POST['mail']
    sent = False
    try:
        subject = "Restauration de Mot de Passe"
        code = ""
        
        for i in range(0, 6):
            code += str(random.randint(0, 9))
        # r_bd_user.set_password('User'+password)
        message = " Entrez ce code pour restaurer votre Compte "
        email = r_perso.mail
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [email, ]
        send_mail(subject, message, email_from, recipient_list, fail_silently=False)
        sent = True
    except:
        pass
    data = {
        'sent': sent
    }
    if sent == True:
        data['code'] = code
    return JsonResponse(data)


def notifs_rapp(request):
    user_id = request.GET.get('value')
    insti_id = request.GET.get('institution')
    insti_id = Institution.objects.get(id=int(insti_id))
    # perso = Personnel.objects.get(bd_user__id=int(user_id))
    operations = Operation.objects.filter(personnel=request.user.personnel)
    # General_Results
    nb_is_rapported = 0
    nb_have_to_report = 0
    nb_observations = 0

    nb_is_rapported2 = 0
    nb_have_to_report2 = 0
    nb_observations2 = 0

    actual_institution = insti_id

    context = basis(request)
    perso = request.user.personnel
    for o in operations:
        if o.etat == '0':
            nb_have_to_report += 1
            if o.institution() == actual_institution:
                nb_have_to_report2 += 1
        elif o.etat == '1':
            nb_is_rapported += 1
            if o.institution() == actual_institution:
                nb_is_rapported2 += 1
    entities_type = insti_id.get_entities()

    nb_observations = Operation.objects.filter(etat='1', accountable=perso).count()

    for e in entities_type:
        lines = e.m_entity_type.lines()
        for l in lines:
            if l.is_rapported != True and l.progression() == 100:
                nb_observations += 1

    personnel = request.user.personnel
    # for o in operations
    """
	for o in accounted:#o.institution() in context['personnel'].all_institutions() and
		if o.progression() < 100 and o.rapported() not in ['0',None]:
			# and context['permissions'] > 0
			nb_observations += 1
	"""
    data = {
        'nb_have_to_report': nb_have_to_report,
        'nb_is_rapported': nb_is_rapported,
        'nb_observations': nb_observations,
        'nb_have_to_report2': nb_have_to_report2,
        'nb_is_rapported2': nb_is_rapported2,
        'nb_observations2': nb_observations2
    }
    return JsonResponse(data)


def valid_observations(request):
    element_id = request.POST["element_id"]
    valid_attributes = request.POST['attributes']

    element = Entity.objects.get(id=int(element_id))
    is_tache = element.m_type_entity.is_tache
    if is_tache:
        element = Tache.objects.get(id=int(element_id))
    element.is_rapported = True
    element.m_reported_fields = valid_attributes
    element.save()
    return redirect('/operations/')


def print_mail_file(request):
    owners = Owner.objects.filter()
    mail_lists = list()
    for o in owners:
        mail_lists.append(o.m_user.email)
    context = {
        'mail_lists': mail_lists
    }
    template = "webpages/ctn_bpf/csv_template.html"
    return render(request, template, context)


def assistance(request):
    template = "webpages/ctn_bpf/assistance.html"
    context = basis(request)
    result = render(request, template, context)
    try:
        if request.session['assistance'] == 1:
            result = redirect('/')
    except:
        pass
    return result


def ajax_restore(request):
    
    r_mail = request.GET.get('mail')
    code = ""
    for i in range(6):
        code += str(random.randint(0, 9))
    message_context = {
        'code': code,
    }
    subject = "de Compte Opera +"
    message = render_to_string('webpages/ctn_bpf/mails/new_code.html', message_context)
    email = r_mail
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    msg = EmailMessage(subject, message, email_from, recipient_list)
    msg.content_subtype = 'html'
    try:
        msg.send()
        send = '0'
    except:
        send = '1'
    data = {
        'code': code,
        'send': send
    }
    return JsonResponse(data)


def restorepass(request):
    mail = request.POST['restore']
    password = request.POST['password']
    user = User.objects.filter(email=mail).first()
    user.set_password(password)
    user.save()
    login(request, user)
    return redirect('/')


def documentation(request):
    document = OperaFile.objects.filter(m_name="DOCU").first().m_file.url
    return redirect(document)


# New Updates
@login_required(login_url='/log_account')
def chaine_indicateurs(request):
    template = "webpages/ctn_bpf/chaine_resultat.html"
    context = basis(request)
    actual_institution = context['actual_institution']
    context['menu'] = 'l'
    context['top_entities'] = actual_institution.top_entity().lines()
    context['this_entities'] = actual_institution.get_entities()
    return render(request, template, context)


def get_indicateur_value(request):
    indicateur = Indicateur.objects.get(id=int(request.GET.get('id_indicateur')))
    fields = indicateur.m_fields
    periodicite = indicateur.m_periodicite
    final_cible = indicateur.m_final_cible
    if final_cible == None:
        final_cible = ""
    cibles = indicateur.m_cibles
    data_verification = indicateur.m_data_verification

    verification_indi = indicateur.m_verification_indi

    data = {
        'obj': indicateur.m_objectif_indi,
        'indicateur': indicateur.m_name,
        'fields': fields,
        'periodicite': periodicite,
        'final_cible': final_cible,
        'cibles': cibles,
        'verification_indi': verification_indi,
        'data_verification': data_verification,
        "data_verificationind": "#",
        'others': "#"
    }
    tmp_verifi = data_verification.split("#")
    if tmp_verifi[0] == "1":
        ind_ve = DataSet.objects.get(id=int(tmp_verifi[1]))
        data["data_verificationind"] = str(ind_ve)
        data["data_verificationind_url"] = "/data_form/" + str(ind_ve.id) + "/0/"
    if indicateur.m_others not in [None, ""]:
        data["others"] = indicateur.m_others
    return JsonResponse(data, safe=False)


def ajax_institution(request):
    sens = request.GET.get('sens')
    devise = request.GET.get('devise')
    institution = request.GET.get('institution')
    institution = Institution.objects.get(id=int(institution))
    if int(sens) == 1:
        institution.default_options = False
    elif int(sens) == 0:
        institution.default_options = True
    elif int(sens) == 3:
        institution.finan_options = None
    elif int(sens) == 2:
        institution.finan_options = devise
    institution.save()
    data = {
        'nada': True
    }
    return JsonResponse(data, safe=False)


# def save_indicateur(request):
#     edit_or_create = request.POST["edit_or_create"]
#     gest_id = request.POST['gest_id']
#     gest_val = request.POST['gest_val']
#     name = request.POST["nature_indicateur"]

#     fields = request.POST["indi_adds"]
#     periodicite = request.POST["periodicite"]
#     periodicite2 = request.POST["periodicite2"]

#     cibles = request.POST["indi_cibls"]
#     type_entity = request.POST["entity_id"]
#     data_verification = request.POST["indi_srcs"]

#     numerateur = request.POST["numerateur"]
#     denominateur = request.POST["denominateur"]

#     objectif_indi = request.POST["objectif_indi"]
#     verification_moyen = request.POST["verification_moyen"] + "#" + request.POST["veri_type"]

#     sources_speci = request.POST["specig_form"]
#     if sources_speci == "1":
#         try:
#             sources_speci += "#" + request.POST["dataSt"]
#         except:
#             pass

#     codes_colors = request.POST["codes_colors"]
#     alerts_modals = request.POST["alert_modals"]
#     others = request.POST["other"]

#     cibles = request.POST["indi_cibls"]
#     coeficient = int(request.POST["coefficient"])

#     unite = request.POST["unite_indicateur"]

#     try:
#         default_calcul = request.POST["default_calcul"]
#     except:
#         default_calcul = 1

#     if edit_or_create == "c":

#         entity = Entity.objects.get(id=int(type_entity))
#         indi = Indicateur(m_name=name, m_fields=fields, m_periodicite=periodicite, m_sub_periodicite=periodicite2,
#                           m_data_verification=data_verification, m_cibles=cibles, m_enti=entity)
#     else:
#         edit_id = request.POST["edit_id"]
#         indi = Indicateur.objects.get(id=int(edit_id))
#         indi.m_name = name
#         indi.m_fields = fields
#         indi.m_periodicite = periodicite
#         indi.m_sub_periodicite = periodicite2
#         indi.m_data_verification = data_verification
#         indi.m_cibles = cibles
#     indi.m_institution = basis(request)["actual_institution"]
#     indi.m_cibles = cibles
#     indi.m_numerateur = numerateur
#     indi.m_denominateur = denominateur
#     indi.m_coefficient = coeficient
#     indi.m_data_verification = sources_speci
#     indi.m_unite = unite

#     indi.objectif_indi = objectif_indi
#     indi.m_colors_code = codes_colors
#     indi.m_verification_indi = verification_moyen
#     indi.alerts_code = alerts_modals
#     indi.m_others = others

#     try:
#         ind.m_secundo_options = request.POST["other_fields"]
#     except:
#         pass
#     if int(default_calcul) == 1:
#         formula = "$" + str(numerateur) + "$" + " * " + str(coeficient) + " /" + "$" + str(denominateur) + "$"
#         indi.m_datalets_calcul = formula
#     indi.save()
#     return redirect('/evaluer/' + gest_val + '/' + gest_id)


# @login_required(login_url='/log_account')
# def evaluer(request, hierachie="0", gest_id=0, search=None, specifi_id=None):
#     context = basis(request)
#     hierachie = int(hierachie)
#     if specifi_id == None:
#         if hierachie != -1:
#             entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution=context[
#                 'actual_institution']).first().m_entity_type
#         else:
#             entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
#         context['entity'] = entity
#         context['hierachie'] = hierachie
#         context['hierachy'] = hierachie
#         if gest_id == 0:
#             elements = entity.lines()
#         else:
#             get_e = Entity.objects.get(id=int(gest_id))
#             context['base_val'] = get_e
#             elements = list(get_e.sub_entities())
#             context['sup_hierachy'] = list()
#             for t in get_e.sup_hierachie():
#                 context['sup_hierachy'].append(t)
#             context['sup_hierachy'].append(get_e)
#
#         if search != None:
#             tmp = elements
#             elements = list()
#             for t in tmp:
#                 if search in t.m_value_fields:
#                     elements.append(t)
#
#     else:
#         a_entity = Entity.objects.get(id=specifi_id)
#         entity = a_entity.m_type_entity
#         context['entity'] = entity
#         context['hierachie'] = hierachie
#         context['hierachy'] = hierachie
#         elements = [a_entity]
#     paginator_o = Paginator(elements, 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
#
#     context["indi_options"] = entity.indicateurs
#     try:
#         context["indi_options"][0] == None
#         context["no_secund"] = False
#     except:
#         context["no_secund"] = None
#
#     context['menu'] = 'g'
#     context['g_v'] = 'i2'
#     context['gest_id'] = gest_id
#     context['gest_val'] = hierachie
#     context['gest_val_1'] = hierachie + 1
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range
#     context['dataelts'] = dataelts
#     context['dataelts2'] = dataelts.exclude(m_default_value=None)
#
#     template = "webpages/ctn_bpf/evaluer.html"
#     return render(request, template, context)


def evaluer_detail(request, gest_id=0):
    return evaluer(request, "0", 0, None, gest_id)


def indic_plus(request, indic_id):
    context = basis(request)
    entity = Entity.objects.get(id=int(indic_id))
    template = "webpages/ctn_bpf/indic_plus.html"
    context['entity'] = entity
    return render(request, template, context)


def data_elements(request):
    context = basis(request)
    entity = Entity.objects.get(id=int(indic_id))
    template = "webpages/ctn_bpf/indic_plus.html"
    context['entity'] = entity
    return render(request, template, context)


def duplicate(request):
    from .utilities2 import duplicate_entity_logic, duplicate_tache, duplicate_entity, duplicate_operation
    generator_d = request.POST['generator_d']
    response = ""
    if generator_d == 'e':
        value = request.POST['dup_id']
        entity = Entity.objects.get(id=int(value))
        link = request.POST['link']
        response = redirect(link)
        # new = int(request.POST['new_dup'])
        new = 0
        try:
            name = request.POST['nom_dup']
            if name in [None, '']:
                name = "#"
        except:
            name = "#"
        try:
            relogic_dup = int(request.POST['relogic_dup'])
        except:
            relogic_dup = 0

        if relogic_dup == 0:
            duplicate_entity(entity, name)
        else:
            duplicate_entity_logic(entity, name)

    elif generator_d == 'o':
        value = request.POST['dup_id']
        entity = Operation.objects.get(id=int(value))
        link = request.POST['link']
        response = redirect(link)  # redirect("/taches/"+str(operation.m_tache.id))
        try:
            name = request.POST['nom_dup']
            if name in [None, '']:
                name = "#"
        except:
            name = "#"
        o2 = duplicate_operation(entity, name)
        o2.tache = entity.tache
        try:
            relogic_dup = (request.POST['reraci_dup'])
            r_personnel = Personnel.objects.get(id=int(request.POST["perso"]))
            r_accountable = Personnel.objects.get(id=int(request.POST["accountable"]))
            r_consulted = Personnel.objects.get(id=int(request.POST["consulted"]))
            r_informed = Personnel.objects.get(id=int(request.POST["informed"]))
            o2.personnel = r_personnel
            o2.accountable = r_accountable
            o2.consulted = r_consulted
            o2.informed = r_informed
        except:
            relogic_dup = 0
        o2.save()

    elif generator_d == 'i':
        values = request.POST['values_d'].split("|")
        response = redirect("/institution/")
        try:
            entity_dup = request.POST['entity_dup']
        except:
            entity_dup = "0"
        for v in values[:-1]:
            ins = Institution.objects.get(id=int(v))
            tmp = ins
            tmp.id = None
            tmp.save()

            # entity Institutions
            ins_entities = InsitutionEntities.objects.filter(m_institution__id=int(v))
            for i in ins_entities:
                tmp11 = i.m_entity_type
                tmp11.id = None
                tmp11.save()
                tmp1 = InsitutionEntities(m_institution=tmp, m_hierachie=i.m_hierachie, m_entity_type=tmp11)
                tmp1.save()
                if entity_dup == '1':
                    for i2 in tmp11.lines():
                        tmp2 = i2
                        tmp2.m_type_entity = tmp11
                        if tmp11.is_tache:
                            tmp3 = Tache.objects.get(id=tmp2.id)
                            tmp3.m_type_entity = tmp11
                        tmp2.id = None
                        tmp3.id = None
                        tmp2.save()
                        tmp3.save()

            # structures
            structures = Structure.objects.filter(institution__id=int(v))
            for i in structures:
                tmp2 = i
                tmp2.id = None
                tmp2.institution = ins
                tmp2.save()

            # aggregates
            aggregates = Aggregate.objects.filter(m_institution__id=int(v)).first()
            if aggregates != None:
                tmp3 = aggregates
                tmp3.id = None
                tmp3.m_institution = ins
                tmp3.save()

            # roles
            roles = Role.objects.filter(actual_institution__id=int(v))
            for r in roles:
                tmp4 = r
                tmp4.id = None
                tmp4.actual_institution = ins
                tmp4.save()
        request.session['new_ins'] = 1
    return response


def print_pdf(request):
    ind = int(request.GET.get('ind'))

    context = basis(request)
    operations = list()
    if ind == 1:
        tmp_ops = Operation.objects.filter()
    elif ind == 2:
        p = request.user.personnel
        tmp_ops = Operation.objects.filter(personnel=p)
    if ind in [1, 2]:
        for t in tmp_ops:
            if t.institution() == context['actual_institution']:
                operations.append(t)
        lines = list()
        taches_lines = list()
        for o in operations:
            tmp_line = str(
                o.tache) + "" + str(
                o) + "" + str(
                o.personnel)
            if o.periodes() != None:
                tmp_line += "" + str(
                    o.periodes().details_periode())
            else:
                tmp_line += "" + " "
            if context['actual_institution'].default_options != True:
                values = o.value_split()
                agr_fields = o.agr_fields()
                i = 0
                for v in agr_fields:
                    if v != 'file':
                        try:
                            tmp_line += "" + str(
                                values[i])
                        except:
                            tmp_line += "" + " "
                    else:
                        tmp_line += "" + " -- "
                    i += 1
                tmp_line += "" + o.status_op()
            lines.append(tmp_line)
    elif ind == 4:
        taches = context['actual_institution'].last_entity().lines()
        lines = list()
        for t in taches:
            hierachie = ""
            for h in t.sup_hierachie():
                hierachie += str(
                    h.get_name()) + ""
            fields = ""
            for f in t.values():
                fields += str(
                    f) + ""
            lines.append(hierachie + fields + str(
                t.progression()) + "" + str(
                t.m_date_modif))
    data = {
        'lines': lines
    }
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def dataelts(request, elt_id=0, elt_str=0):
    context = basis(request)
    context['g_v'] = 'eD'
    if elt_id == 0:
        template = "webpages/ctn_bpf/dataelts.html"
        indicateurs = Indicateur.objects.filter()
        dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
        context['indicateurs'] = indicateurs
        context['dataelts'] = dataelts
    else:
        template = "webpages/ctn_bpf/data_element_id.html"
        dataelt = DataElement.objects.get(id=int(elt_id))
        context["dataelt"] = dataelt
        context["structures"] = Structure.objects.filter(institution=context["actual_institution"])
        if elt_str == 0:
            context["actu_struc"] = context["structures"].first()
        else:
            context["actu_struc"] = Structure.objects.get(id=int(elt_str))
        # lines = dataelt
        tmps = dataelt.element_values(context["actu_struc"])
        periods_tmp = dict()
        p_tmps = list()

        class DEL:
            def __init__(self, e1, e2, e3=0):
                self.sup_period = e1
                self.period = e2
                self.value = e3

            def __repr__(self):
                return self.sup_period

        for t in tmps:
            a = t.m_dataset_value.m_period_value + "-" + t.m_dataset_value.m_sub_period_value
            if a in p_tmps:
                if t.m_value not in ["", None]:
                    periods_tmp[a].value += float(t.m_value)
            else:
                elts = DEL(t.m_dataset_value.m_sub_period_value, t.m_dataset_value.m_period_value, 0)
                if t.m_value not in ["", None]:
                    elts.value = float(t.m_value)
                else:
                    elts.value = 0
                periods_tmp[a] = elts
                p_tmps.append(a)
        context["values"] = list()
        for p in p_tmps:
            context["values"].append(periods_tmp[p])
    # context["values"].group_by = ['designation']
    return render(request, template, context)


@login_required(login_url='/log_account')
def dataelts_edit(request, elt_id):
    template = "webpages/ctn_bpf/dataelts_edit.html"
    context = basis(request)
    indicateurs = Indicateur.objects.filter()
    dataelts = DataElement.objects.filter(id=elt_id).first()
    context['indicateurs'] = indicateurs
    context['dataelts'] = dataelts
    return render(request, template, context)


@login_required(login_url='/log_account')
def dataelts_indic(request):
    template = "webpages/ctn_bpf/dataelts_indic.html"
    context = basis(request)
    context['is_indi'] = True
    context['indicateurs'] = list()
    tmps_is = Indicateur.objects.filter()
    dataelts = DataElement.objects.filter()
    for i in tmps_is:
        enti = i.m_enti
        if enti != None:
            if enti.m_type_entity.get_institution(context['actual_institution']) != None:
                context['indicateurs'].append(i)
    context['dataelts'] = dataelts
    return render(request, template, context)


def ajax_progression(request):
    plannify = request.GET.get("plannify")
    periode = Periode.objects.get(id=int(request.GET.get("periode")))

    year = request.GET.get("year")
    institution = request.GET.get("institution")
    institution = Institution.objects.get(id=int(institution))
    sub_period = institution.default_subperiod

    try:
        mods = request.GET.get("mods")
    except:
        mods = None

    try:
        entity = request.GET.get("entity")
    # entity_type =  request.GET.get("entity_type")
    except:
        entity = None

    progression = 0
    t_plannify = list()

    """
	for t in taches:
		t_plannify.append(t.plannification())
	"""
    result = list()
    if plannify != "#":
        cumulate = int(request.GET.get("cumul1"))  # 1 #Mettre une variable
        nb_ops = 0
        ops = list()
        if entity == None:
            operations = Operation.objects.filter(m_institution=institution)
        else:
            operations = Entity.objects.get(id=int(entity)).operations()
        bool(operations)
        for o in operations:
            ops.append(o)

        try:
            tmp_val = get_period_values(periode, plannify + "_")[0]
        except:
            tmp_val = None

        if tmp_val != None:
            result.append(tmp_val)
            for o in ops:
                if o.m_tache_plannification != None:
                    v = get_period_values(periode, o.m_tache_plannification + "_")
                    cond1 = (cumulate == 0) and int(v[0]) == int(tmp_val)
                    cond2 = (cumulate == 1) and int(v[0]) <= int(tmp_val)
                    if len(v) > 0:
                        if cond1 or cond2:
                            progression += o.progression()
                            nb_ops += 1
                else:
                    pass
        glob_ops = int(request.GET.get("cumul2"))  # 1
        if glob_ops == 1:
            nb_ops = operations.count()
        if nb_ops > 0:
            progression /= nb_ops
    else:
        if mods in [None, "0"]:
            prs = list()
            tops = institution.top_entity().lines()
            plannify_all = request.GET.get("plannify_all")
            plannify_all = plannify_all.split("#")[:-1]
            t_plannify2 = t_plannify
            t_plannify = subperiods_value(periode, year)
            mrd_t = list()
            i_t = 0
            for t in tops:
                mrd_t.append(list())
                for p in t_plannify:
                    mrd_t[i_t].append(0)
                i_t += 1

            i_t = 0

            for to in tops:
                nb_jT = 0
                if to.m_type_entity.is_tache == False:
                    tach = to.taches()
                else:
                    tach = [to]
                ops = list()
                for t in tach:
                    ops += t.operations()
                t_plannify2 = list()
                for a in tach:
                    a = Tache.objects.get(id=a.id)
                    t_plannify2.append(a.plannification())
                j_t = 0
                for p in t_plannify:
                    progression = 0
                    nb_jT = 0
                    nb_ops = 0
                    if p != None:
                        for o in ops:
                            try:
                                v = get_period_values(periode, o.m_tache_plannification + "_")
                                if len(v) > 0:
                                    if int(v[0]) == int(p):
                                        progression += o.progression()
                                    nb_ops += 1
                            except:
                                pass
                        if nb_ops != 0:
                            mrd_t[i_t][j_t] = round(progression / nb_ops, 2)
                        j_t += 1
                i_t += 1
            prs = list()
            j = 0
            for t in mrd_t:
                tmp = ""
                for s in t:
                    tmp += str(s) + "#"
                prs.append(tmp)
        else:
            prs = list()
            tops = institution.top_entity().lines()
            for t in tops:
                result = list()
                operations = t.operations()
                nb_x = len(institution.default_period.decoup_slip()) * len(
                    institution.default_subperiod.decoup_desc_slip())
                if institution.default_period.m_logic_type == 3:
                    chronogrs = ["0_9_9_9_9_", "9_0_9_9_9_", "9_9_0_9_9_", "9_9_9_0_9_", "9_9_9_9_0_"]
                    year = request.GET.get("year")
                    TP1 = subperiods_value(institution.default_period, int(year))
                    TP2 = list()
                    dic_ops = dict()
                    for t in TP1:
                        a = transform_to_plannify(t)
                        TP2.append(a)
                        for c in chronogrs:
                            dic_ops[a + "-" + c] = {
                                "progress": 0,
                                "nb_ops": 0
                            }
                    # operations = operations.filter(m_tache_plannification__in=TP2)

                    for o in operations:
                        dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation][
                            "progress"] += o.progression()
                        dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation]["nb_ops"] += 1
                    for a in TP2:
                        for c in chronogrs:
                            if dic_ops[a + "-" + c]["nb_ops"] > 0:
                                tmp = str(dic_ops[a + "-" + c]["progress"] / dic_ops[a + "-" + c]["nb_ops"])
                            else:
                                tmp = "0"
                            result.append(tmp)
                    prs.append("#".join(result))
    # progression /= len(taches)
    data = {
        'plannify': plannify,
        'result': result,
        'progression': round(progression, 2)
    }
    if plannify == "#":
        data['progressions'] = prs
    return JsonResponse(data)


def ajax_calcul_date(request):
    plannify = request.GET.get('plannify')
    periode = Periode.objects.get(id=int(request.GET.get("periode")))
    tmp_val = get_period_values(periode, plannify + "_")[0]

    ta1 = datetime.date(int(tmp_val[:4]), int(tmp_val[4:6]), int(tmp_val[6:8]))
    ta2 = datetime.date(int(tmp_val[8:12]), int(tmp_val[12:14]), int(tmp_val[14:16]))
    ta3 = ta2
    test = ta2.isoweekday()
    if test > 1:
        ta2 -= datetime.timedelta(test - 1)
        ta3 += datetime.timedelta(7 - test)
    test_dates = list()
    for i in range(5):
        test_dates.append("Du " + str(ta2) + " Au " + str(ta3))
        ta2 += datetime.timedelta(7)
        ta3 += datetime.timedelta(7)
    bumps1 = [int(tmp_val[:4]), int(tmp_val[4:6]) - 1, int(tmp_val[6:8])]
    bumps2 = [int(tmp_val[8:12]), int(tmp_val[12:14]) - 1, int(tmp_val[14:16])]
    data = {
        'tmp_val': tmp_val,
        'test_dates': test_dates,
        'ta1': str(ta2),
        'result': tmp_val
    }
    return JsonResponse(data)


def delete_mul(request):
    entities = request.POST["multi_values"]
    hierachy = int(request.POST['hierachy'])
    g_v = request.POST['g_v']
    try:
        g_v_2 = request.POST['g_v_2']
    except:
        g_v_2 = None

    from .utilities2 import delete_entities, delete_operations
    if g_v != "o":
        delete_entities(entities)
        response = '/gestionnaire/' + str(hierachy)
        if g_v_2 is not None:
            response = '/gestionnaire/' + str(hierachy - 1)
            response += '/' + str(g_v_2) + '/'
    else:
        a = delete_operations(entities)
        response = '/taches/' + str(a.id) + '/'
    return redirect(response)


@login_required(login_url='/log_account')
def data_form(request, nature=-1, elt_id=0):
    template = "webpages/ctn_bpf/data_form.html"
    context = basis(request)
    nature = int(nature)
    context["nature"] = nature
    context["elt_id"] = elt_id
    periode_ok = PeriodeOk.objects.all().distinct('annee')
    context['periode_ok'] = periode_ok
    if nature != -1:
        template = "webpages/ctn_bpf/data_form_plus.html"
        dataform = DataSet.objects.filter(id=nature, m_institution=context["actual_institution"]).first()
        context["element"] = dataform
        if dataform != None:
            next_nature = nature + 1
            lines = dataform.dS_values()
        else:
            lines = list()
    else:
        next_nature = 1
        lines = DataSet.objects.filter(m_institution=context["actual_institution"])
        try:
            if context["permissions"] == 0 or context["no_simple_user"] == False:
                # role
                role = request.user.personnel.get_function(context["actual_institution"].id).m_role
                lines = lines.filter(m_roles=role)
        except:
            pass
    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context["g_v"] = "dSV"
    context["menu"] = "h"
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    return render(request, template, context)


def error_404(request, exception):
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/errors.html"
        context = basis(request)
    else:
        template = "webpages/ctn_bpf/errors_zero.html"
        context = dict()
    context['error'] = 404
    context['exception'] = exception
    return render(request, template, context)


def error_500(request):
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/errors.html"
        context = basis(request)
    else:
        template = "webpages/ctn_bpf/errors_zero.html"
        context = dict()
    return render(request, template, context)


def extra(request, name=""):
    context = basis(request)
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/extra.html"
        files = OperaFile.objects.filter(m_institution=context["actual_institution"]).select_related("m_institution")
        bool(files)
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None
    else:
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None
        template = "webpages/ctn_bpf/extra.html"
        files = OperaFile.objects.filter(is_public=1)
        bool(files)
    if name != None:
        tmp1 = files.filter(m_name__contains=name)
        tmp2 = list()  # files.filter(m_file__url__contains=name)
        files = list()
        for t in tmp1:
            files.append(t)
        for t in tmp2:
            files.append(t)
    paginator_o = Paginator(files, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context["g_v"] = "ex"
    context["menu"] = "x"
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def get_progressions(request):
    list_ids = request.GET.get('list_ids').split("#")[:-1]
    list_ids = [int(i) for i in list_ids]
    entities = Entity.objects.filter(id__in=list_ids)

    result = list()
    data_ids = list()
    type_Progression = request.GET.get("type_progression")
    if type_Progression == "P":
        for i in entities:
            result.append(i.progression())
            data_ids.append(str(i.id))
    elif type_Progression == "T":
        for i in entities:
            result.append(i.technical_progression())
            data_ids.append(str(i.id))
    elif type_Progression == "F":
        for i in entities:
            result.append(i.finan_progression())
            data_ids.append(str(i.id))
    data = {
        'result': result,
        'ids': data_ids
    }
    return JsonResponse(data, safe=False)


def get_indi_data(request):
    data_id = request.GET.get('indi_id')
    ind = Indicateur.objects.get(id=int(data_id))
    nums = list()
    ids = list()
    for i in ind.indi_numerateur():
        nums.append(str(i))
        ids.append(i.id)
    denums = list()
    for i in ind.indi_denum():
        denums.append(str(i))

    period = ind.m_periodicite
    sub_period = ind.m_sub_periodicite
    cibles = ind.m_cibles
    data = {
        'nom': str(ind),
        'nums': nums,
        'denums': denums,
        'ids': ids
    }
    return JsonResponse(data, safe=False)


# def consult_oper(request):
#     operation = Operation.objects.get(id=int(request.POST["operation"]))


#     request.session['new_rapport'] = 2
#     observations = request.POST["observations"]
#     file = request.FILES['file']
#     oC = OperationConsulted(m_operation=operation,m_observations=observations, file=file)

#     oC.save()
#     if request.method == "POST":
#         m_commentaire = request.POST.get('observations')
#         file = request.FILES['file']
#         save_avis = HistoricRACI.objects.create(m_commentaire=m_commentaire, m_role="C",
#                                                 m_operation_id=request.POST["operation"], file=file)
#         save_avis.save()
#     return redirect("/operations/")


@login_required(login_url='/log_account')
def personnels_raci(request, name=None):
    template = "webpages/ctn_bpf/persos_raci.html"
    context = basis(request)
    context['g_vs'] = 'p2'
    context['g_v'] = 'p2_RACI'

    context['searches'] = []
    context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
        actual_institution=context['actual_institution']).select_related('actual_institution')})
    context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
        institution=context['actual_institution']).select_related('institution')})

    ents = list()
    ieS = list(context['actual_institution'].get_entities())
    bool(ieS)
    # n = ieS.count()
    j = 0

    for i in ieS[:-2]:
        if True:
            tmp = {
                "hierachie": i.m_hierachie,
                "label": str(i),
                'entities': list()
            }
            if j == 0:
                tmp["entities"] = ieS[0].m_entity_type.lines()
            ents.append(tmp)
            j += 1
        else:
            pass
    context['ents'] = ents

    # context['matieres'] = ies[-2].lines()

    elements = list()
    tmps = Personnel.objects.filter()
    for t in tmps:
        if context['actual_institution'] in t.all_institutions():
            elements.append(t)

    akas = list()
    tmp_perso = Personnel.objects.filter()
    # pFs = Personnel_Function.objects.filter(m_institution=context["actual_institution"]).values("m_personnel")

    if True:
        for t in tmp_perso:
            if context['actual_institution'] in t.all_institutions():
                atmp = {
                    'id': t.id,
                    'prenom': t.prenom,
                    'nom': t.nom,
                    'photo': t.photo,
                    'get_function': t.get_function(context['actual_institution'].id),
                    'RACI_entities': t.RACI_entities()
                }
                akas.append(atmp)
            # lines2.add(t)
    else:
        context['lines'] = lis_peros

    if name != None:
        name = name.lower()
        tmps = akas
        akas = list()
        context['lines'] = list()
        for tt in tmps:
            ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
            for t in ta:
                if name in str(t):
                    akas.append(tt)
                    break

    paginator_o = Paginator(akas, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date

    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def data_sets(request, indi_id=0):
    context = basis(request)
    # data_set = DataSet.objects.get(id=indi_id)
    # context['data_set']=data_set
    periode = Periode.objects.all()
    context['periode'] = periode
    indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
    template = "webpages/ctn_bpf/data_sets.html"
    context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
    context["indicateurs"] = indicateurs
    context["menu"] = "h"
    # if indi_id != 0:
    # 	dataset = DataSet.objects.get(id=int(indi_id))
    # 	context["dataset"] = dataset
    """
	context["indicateur"] = indicateur
	context["element"]= indicateur.m_enti
	context["indi_id"] = indi_id
	"""
    return render(request, template, context)


def data_sets_design(request, dS_id):
    data_set = DataSet.objects.get(id=dS_id)
    template = "webpages/ctn_bpf/data_sets_design.html"
    context = basis(request)
    context["dataset"] = data_set
    context["design"] = 1
    return render(request, template, context)


# def ajax_form(request):
#     dF = DataSet.objects.get(id=int(request.GET.get("id_dataset")))
#     # dF = indicateur.dataset()
#     structures = list()
#     structure_id = list()
#     for s in dF.m_structures.filter():
#         structures.append(str(s))
#         structure_id.append(s.id)
#     data = {
#         'periode': dF.periodicite_id,
#         'subperiode': dF.m_sub_periode,
#         'structures': structures,
#         'structures_id': structure_id,
#         'form': dF.m_formulaire
#     }
#     return JsonResponse(data, safe=False)


def ajax_hiera_struc(request):
    institution = request.GET.get("institution")
    logic_strc = request.GET.get("logic_strc")
    m_institution = Institution.objects.get(id=int(institution))
    elt_logic = ""
    for e in logic_strc.split("|")[:-1]:
        a = e.split("#")
        if len(a) > 1:
            elt_logic += a[1] + "|"
        else:
            elt_logic += a[0] + "|"
    structures = Structure.objects.filter(institution=m_institution, values_hierachy__contains=elt_logic)
    data = {
        'ids': list(),
        'names': list()
    }
    data["nb_s"] = elt_logic
    for s in structures:
        data["ids"].append(s.id)
        data["names"].append(str(s))
    return JsonResponse(data, safe=False)


def ajax_RACI_user(request):
    type_RACI = request.GET.get("type_RACI")
    perso = request.GET.get("perso")
    institution = request.GET.get("institution")
    entity_filter = request.GET.get("entity_filter")

    data = dict()
    if type_RACI == "1":
        personnel = Personnel.objects.get(id=int(perso))
        rEL = list()
        data["elts"] = list()
        data["elts_id"] = list()
        data["elts_hierachy"] = list()

        if entity_filter not in ["0", None]:
            entity_filter = int(entity_filter)
            pR = PersonnelRACI.objects.get(id=entity_filter)
            data["elt_actu_id"] = str(pR.m_entity)
            data["elt_actu"] = pR.m_entity.id
        else:
            data["elt_actu_id"] = "#"
            data["elt_actu"] = "#"

        for p in personnel.get_function(institution).m_role.entity_levels():
            rEL.append(str(p))
            data["elts_hierachy"].append(p.m_hierachie)
            tmp_elt = list()
            tmp_id = list()
            for p2 in p.m_entity_type.lines():
                tmp_elt.append(str(p2))
                tmp_id.append(int(p2.id))
            data["elts"].append(tmp_elt)
            data["elts_id"].append(tmp_id)
        data["roles"] = rEL
    # data["test_rEL"] = rEL
    return JsonResponse(data, safe=False)


def ajax_RACI_user_manage(request):
    menu = request.GET.get("menu")
    # entity = Entity.objects.get(id=int(request.GET.get("entity")))
    if menu == "o":
        tache = Tache.objects.get(id=int(request.GET.get("entity")))
        perRACI = tache.personnelRACI()
        data = {
            "responsable": perRACI["responsable"],
            "accounted": perRACI["accounted"],
            "consulted": perRACI["consulted"],
            "informed": perRACI["informed"],
            "test": ""
        }
        allis = ["responsable", "accounted", "consulted", "informed"]
        for s in tache.sup_hierachie():
            all_none = False
            perRACI = s.personnelRACI()
            for al in allis:
                data["test"] += str(perRACI[al]) + "#"
                if data[al] == [None]:
                    all_none = True
                    if perRACI[al] != [None]:
                        data[al] = perRACI[al][1].id
                if all_none == False:
                    break
    return JsonResponse(data, safe=False)


def assign_RACI(request):
    personnel = Personnel.objects.get(id=int(request.POST["perso_assign"]))
    values_assign = request.POST["values_assign"].split("$")
    try:
        operations_check = request.POST["operations_recursive"]
    except:
        operations_check = None
    for v in values_assign[:-1]:
        # entity = Entity.objects.get(id=int(v.split("#")[0]))
        entity = int(v.split("#")[0].replace("'", ""))
        entity = Entity.objects.get(id=entity)
        raci_role = v.split("#")[1]
        if "1" in raci_role:
            if operations_check != None:
                operations = entity.operations()
                rs = raci_role.split("|")
                for o in operations:
                    if rs[0] == "1":
                        o.personnel = personnel
                    if rs[1] == "1":
                        o.accountable = personnel
                    if rs[2] == "1":
                        o.consulted = personnel
                    if rs[3] == "1":
                        o.informed = personnel
                    o.save()
            pR = PersonnelRACI(m_personnel=personnel, m_entity=entity, m_roles=raci_role)

            pR.save()
    return redirect("/personnels_raci/")


def print_pdf(request):
    name_pdf = request.GET.get("name_pdf")
    html = request.GET.get("html")
    html = html.replace("<table", "<table border='1' width='100%' cellpadding='5px'")
    html = html.replace("<td", "<td width='100' ")
    html = html.replace("<th", "<th width='100' ")

    data = dict()

    class MyFPDF(FPDF, HTMLMixin):
        pass

    pdf = MyFPDF()
    pdf.add_page()
    pdf.write_html(html)
    pdf.output('html3.pdf', 'F')
    return JsonResponse(data, safe=False)


# @login_required(login_url='/log_account')
# def List(request):
#     template = "webpages/ctn_bpf/tache_non.html"
#     operation = Operation.objects.all()
#     count = Operation.objects.count()
#     context = basis(request)
#     context["operation"] = operation
#     context["count"] = count
#     return render(request, template, context)


# def taches_effectuee(request):
#     template = "webpages/ctn_bpf/tache_effectuee.html"
#     operation_detail = OperationDetails.objects.all()
#     context = basis(request)
#     context['operation_detail'] = operation_detail
#     return render(request, template, context)


def Avis(request, id):
    #  template="webpages/ctn_bpf/avis_raci.html"
    operation_historic = HistoricRACI.objects.all()
    operation = Operation.objects.get(id=id)
    context = basis(request)
    context['operation_historic'] = operation_historic
    operation_rapport = operation.get_operation_details_invalid().last()
    context["operation_rapport"] = operation_rapport
    try:
        operation = Operation.objects.get(id=id)
        context['operation'] = operation
    except Operation.DoesNotExist:
        context['error_message'] = ""
    return render(request, "webpages/ctn_bpf/avis_raci.html", context)


def recuperer_personnel(request):
    result = Personnel.objects.filter(id=request.POST.get('mail')).values('nom', 'prenom', 'tel').first()
    if result is not None:
        return JsonResponse(result)
    else:
        return JsonResponse({'error': '.'})


def design_form(request):
    context = basis(request)
    if request.method == "POST":
        form_name = request.POST['form_name']
        elements = request.POST.getlist('element')
        indicateurs = request.POST.getlist('indicateur')
        periode = request.POST['periode']
        sub_periode = request.POST['sub_periode']
        actual_institution = context['actual_institution'].id
        role = request.POST.getlist('role')
        structure = request.POST.getlist('structure')
        # print("role:",role)
        # print("structure:",structure)
        # print("indicateur:",indicateurs)
        dS = DataSet.objects.create(m_name=form_name, m_periode=periode, m_sub_periode=sub_periode,
                                    m_institution_id=actual_institution)

        dS.save()
        dS.m_indicateurs.set(indicateurs)
        dS.m_dataelements.set(elements)
        dS.m_roles.set(role)
        dS.m_indicateurs.set(indicateurs)
        dS.m_structures.set(structure)
        responsemndjn = "/data_sets/design/" + str(dS.id) + "/"
        return redirect(responsemndjn)


# def edit_dataset(request, id=0):
#     context = basis(request)
#     data_set = DataSet.objects.get(id=id)
#     context['data_set'] = data_set
#     indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
#     template = "webpages/ctn_bpf/data_sets_edit.html"
#     context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
#     context["indicateurs"] = indicateurs
#     context["menu"] = "h"
#     if id != 0:
#         dataset = DataSet.objects.get(id=int(id))
#         context["dataset"] = dataset

#     return render(request, template, context)


def count_operations(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    count = Operation.objects.filter(m_institution_id=actual_institution, etat="0").count()
    return JsonResponse({'count': count})


def count_tache_consulted(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    count_tache_consulted = Operation.objects.filter(perso=personnel_id, etat="0").count()
    return JsonResponse({'count_tache_consulted': count_tache_consulted})


def count_informed(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    count_informed = OperationDetails.objects.filter(request.user.personnel == personnel.id, etat="2").count()

    return JsonResponse({'count_informed': count_informed})


# def Avis_informed(request, id=0):
#     context = basis(request)
#     template = "webpages/ctn_bpf/avis_informed.html"
#     operation = Operation.objects.get(id=int(id))
#     context['operation'] = operation
#     operation_historic = HistoricRACI.objects.all()
#     context['operation_historic'] = operation_historic
#     operation_rapport = operation.get_operation_details_invalid().last()
#     context["operation_rapport"] = operation_rapport
#     return render(request, template, context)


# def tache_consulted(request):
#     context = basis(request)
#     atual_institution = context['actual_institution']
#     operation = Operation.objects.all()
#     context['operation'] = operation
#     template = "webpages/ctn_bpf/tache_consulted.html"
#     return render(request, template, context)


def edit_data(request, id):
    if request.method == "POST":
        nom_donnee = request.POST['nom_donne']
        data_eltype = request.POST['data_eltype']

        aggregation = request.POST['aggregation']
        comment = request.POST['comment']
        default_value = request.POST['default_value']
        nature_donne = request.POST['nature_donne']
        data_element = DataElement.objects.filter(pk=id)

        data_element.update(m_name=nom_donnee, m_value_type=data_eltype, m_aggregation_type=aggregation,
                            m_description=comment, m_default_value=default_value, m_domain_type=nature_donne)
        # save_data.update()
        return redirect('../dataelts')


# def count_persos(request):
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     perso = request.user.personnel.id

#     count_persos = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="2").count()
#     return JsonResponse({'count_persos': count_persos})


# def count_accountable(request):
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     perso = request.user.personnel.id
#     operation = Operation.objects.all()
#     m_operation_consulted = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="1").count()
#     return JsonResponse({'m_operation_consulted': m_operation_consulted})


def count_effectuee(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    operation = Operation.objects.all()
    count_effect = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="1").count()
    return JsonResponse({'count_effect': count_effect})


# -*- coding: utf-8 -*-
from asgiref.sync import sync_to_async

from django.http import FileResponse, HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import render, redirect, get_object_or_404
from django.core.paginator import Paginator
from django.contrib.auth import authenticate, login, logout
from django.conf import settings

from django.core.mail import send_mail, send_mass_mail

from django.core.mail import EmailMessage, EmailMultiAlternatives
from django.core.cache import cache
from django.views.decorators.cache import cache_page

from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.db.models import ProtectedError
from django.contrib.auth.decorators import login_required

from .models import *
from .utilities import get_period_values, set_pv_tp, subperiods_value, transform_to_plannify
from .utilities2 import split_extras1
import os
import datetime


@login_required(login_url='/log_account')
def admin_institution(request):
    template = "webpages/ctn_bpf/institution_admin.html"
    groupe=Groupe_institution.objects.all()
    baniere = Baniere.objects.all()
    context = {
        'edit': 0,
        'groupe':groupe,
        'baniere':baniere
    }
    return render(request, template, context)


@login_required(login_url='/log_account')
def contact(request):
    template = "webpages/ctn_bpf/contact.html"
    context = {
        'edit': 0
    }
    return render(request, template, context)


def edit_institution(request, institution_id):
    template = "webpages/ctn_bpf/institution_admin.html"
    groupe=Groupe_institution.objects.all()
    baniere = Baniere.objects.all()
    
    context = {
        'edit': 1,
        'institution': Institution.objects.get(id=int(institution_id)),
        'groupe':groupe,
        'baniere':baniere
    }
    return render(request, template, context)


def save_edit_institution(request):
    nom = request.POST["nom"]
    code = request.POST["code"]
    baniere = request.POST['baniere']
    groupe = request.POST['groupe']
    numro_telephone= request.POST['numro_telephone']
    lien_facebook= request.POST['lien_facebook']
    lien_instagram = request.POST['lien_instagram']
    description = request.POST.get('description',None)
    is_social = True
    try:
        file = request.FILES["file"]
    except:
        file = None

    insti_id = int(request.POST['insti_id'])
    institution = Institution.objects.get(id=insti_id)
    institution.sigle = code
    institution.nom = nom
    institution.groupe_id = groupe
    institution.baniere_id = baniere
    institution.numero_whatsapp = numro_telephone
    institution.lien_facebook = lien_facebook
    institution.lien_instagram = lien_instagram
    institution.is_social_media = is_social
    institution.description = description
    if file != None:
        institution.img = file
    institution.save()
    return redirect('/')

#
# def save_institution(request):
#     nom = request.POST["nom"]
#     url = request.POST['url']
#     response = redirect("/")
#     try:
#         code = request.POST["code"]
#     except:
#         code = nom
#     try:
#         image = request.FILES["file"]
#     except:
#         image = OperaFile.objects.filter(m_name="IDF").first().m_file  # Instituti Defaut FIle
#     try:
#         desc = request.POST['desc']
#     except:
#         desc = " "
#     try:
#         app_code = request.POST['app_code']
#     except:
#         app_code = "#"
#     # Informations Savers
#
#     owner = Owner.objects.filter(m_code=app_code).first()
#     if owner == None:
#         response = specific_log(request, 2)
#     else:
#         nb_institutions = owner.nb_institutions()
#         if (owner.m_bought == False and nb_institutions == 0) or (
#                 owner.m_bought == True and nb_institutions <= owner.m_type):
#             institution = Institution(sigle=code, nom=nom, img=image,url=url)
#             institution.owner = owner
#             institution.save()
#             owner.m_user.personnel.actual_institution = institution
#             owner.m_user.personnel.save()
#             try:
#                 check_mail = request.POST['check_mail']
#             except:
#                 check_mail = False
#             if check_mail == True:
#                 owner.m_mail_notified = True
#                 owner.save()
#             # owner.save()
#             if request.user.is_authenticated == False:
#                 user = owner.m_user
#                 login(request, user)
#
#             # tache hierachy modifier
#             entity = EntityType(m_nom="Projet")
#             entity.m_fields = "Nom du Projet|Objectif du Projet|"
#             entity.m_type_fields = "text|text|"
#             entity.m_fields_rapported = "Commentaires|"
#             entity.m_type_fields_rapp = "text|"
#             entity.save()
#             type_entity = InsitutionEntities(m_hierachie=0)
#             type_entity.m_entity_type = entity
#             type_entity.m_institution = institution
#             type_entity.save()
#
#             # Tache Launcher
#             entity = EntityType(m_nom="Tache")
#             entity.is_tache = True
#             entity.m_fields = "Nom de la Tache|Objectif de la Tache|"
#             entity.m_type_fields = "text|text|"
#             entity.m_fields_rapported = "Commentaires|"
#             entity.m_type_fields_rapp = "text|"
#             entity.save()
#             type_entity = InsitutionEntities(m_hierachie=1)
#             type_entity.m_entity_type = entity
#             type_entity.m_institution = institution
#             type_entity.save()
#
#
#             personnel = Personnel.objects.get(bd_user__id=request.user.id)
#             role = Role(nom="Administrateur " + str(institution), description="Supervise la Plateforme",
#                         actual_institution=institution, permissions=100)
#             role.save()
#             function = Personnel_Function(m_institution=institution, m_personnel=personnel, m_role=role)
#             function.save()
#             role = Role(
#                 nom=" " + str(
#                     institution),
#                 description="",
#                 actual_institution=institution, permissions=0)
#             role.save()
#
#             # Initialisation des Structures
#             structure = Structure(nom=institution.sigle, designation=institution.nom)
#             structure.institution = institution
#             structure.save()
#             pers_struc = Personnel_Structure(m_personnel=personnel, m_structure=structure)
#             pers_struc.save()
#
#             # Initialisation des Periodes
#             configurations_periodes = Periode.objects.filter(m_initial=True)
#             for p in configurations_periodes:
#                 per = Institution_Periodes(m_periode=p, m_institution=institution, m_default=True)
#                 per.save()
#             institution.default_period = configurations_periodes.last()
#             institution.default_subperiod = institution.default_period.sub_periods().first()
#             institution.save()
#         else:
#             request.session['too_much_ins'] = 1
#             response = redirect('/log_account/')
#     return response


def set_default_period(request, period=0, sub_period="#"):
    # r_institution = request.COOKIES['institution']
    r_institution = request.user.personnel.actual_institution
    if int(period) != 0:
        r_periode = Periode.objects.get(id=int(period))
        r_institution.default_period = r_periode
        r_institution.default_subperiod = r_periode.sub_periods().last()
    if sub_period != "#":
        r_sub_period = SubPeriode.objects.get(id=int(sub_period))
        r_institution.default_subperiod = r_sub_period
    r_institution.save()
    return redirect('/configurations/')


def authorized_institutions(request):
    if request.user.is_staff:
        institutions = Institution.objects.filter()
    else:
        institutions = [request.user.personnel.get_institution]
    return institutions

from django.shortcuts import redirect
import datetime

def basis(request):
    # Initialisation des variables
    permissions = list()
    actual_institution = None
    animate = None
    animate2 = None
    context = dict()
    user = request.user
    
    # Gestion des animations de session
    try:
        if request.session['logged'] == 1:
            request.session['logged'] = 0
            animate = 0
    except:
        pass
    
    try:
        if request.session['new_rapport'] == 1:
            request.session['new_rapport'] = 0
            animate2 = 0
        elif request.session['new_rapport'] == 2:
            request.session['new_rapport'] = 0
            animate2 = 1
    except:
        pass

    # Vérification de l'authentification
    if request != None and user.is_authenticated:
        # Vérification de l'institution actuelle
        if not hasattr(user.personnel, 'actual_institution') or user.personnel.actual_institution is None:
            # Stockage de l'ID utilisateur et redirection vers la création d'institution
            request.session['user_id_for_institution'] = user.id
            return redirect('/create_institution/')  # Remplacez par l'URL de votre vue de création
        
        actual_institution = user.personnel.actual_institution
        
        # Récupération des informations du personnel
        programmes = list()  # request.user.personnel.get_programmes()
        nb_programmes = 0
        personnel = request.user.personnel
        prenom = personnel.prenom
        nom = personnel.nom
        role = personnel.get_function(actual_institution.id)
        picture = personnel.photo
        functi = role
        entity_manage = None
        
        # Gestion des permissions
        if actual_institution.owner != None and actual_institution.owner.m_user == request.user:
            permissions = 100
        elif functi == None:
            permissions = 10
        else:
            permissions = functi.m_role.permissions
            if functi.m_role.m_nature == "1":
                eRACI = personnel.RACI_manage()
                if eRACI != None:
                    if eRACI[0] != None:
                        entity_manage = eRACI[0]
            elif permissions < 0:
                entity_manage = functi.m_entity
        
        # Construction du contexte
        context = {
            'actual_institution': actual_institution,
            'animate': animate,
            'animate2': animate2,
            'prenom': prenom,
            'role': role,
            'nom': nom,
            'picture': picture,
            'permissions': permissions,
            'programmes': programmes,
            'nb_programmes': nb_programmes,
            'entity_manage': entity_manage
        }
        
        if entity_manage != None:
            context["my_entities"] = personnel.RACI_list()
            context["no_simple_user"] = context["my_entities"] != []
            context["type_ents"] = entity_manage.m_type_entity
            context["hierachie_ent"] = entity_manage.m_type_entity.hierachie()

        context['default_struc_name'] = actual_institution.default_struc_name
        context['this_period'] = datetime.datetime.now()
        context['operations_name'] = actual_institution.operations_name
        context['insti_structures'] = actual_institution.structures()
        context['default_period'] = context['actual_institution'].default_period

        get_entities = actual_institution.get_entities()
        context['get_entities'] = get_entities
        context['get_entities2'] = list(get_entities)[:-1]
  
    else:
        actual_institution = None
        context["institution"] = None
    
    return context


def agenda(request):
    template = "webpages/ctn_bpf/agenda_week.html"
    context = basis(request)
    return render(request, template, context)


def log_account(request):
    template = "webpages/ctn_bpf/register.html"
    context = dict()
    try:
        if request.session['too_much_ins'] == 1:
            context['too_much_ins'] = True
            request.session['too_much_ins'] = None
    except:
        pass
    try:
        if request.session['new_user'] == 1:
            # request.session['new_user'] = 0
            animate = 1
            context['new_user'] = animate
            request.session['new_user'] = 0
    except:
        pass
    try:
        context['bad_log'] = (request.session['bad_log'] != None and request.session['try_log'] != None)
        request.session['try_log'] = None
    except:
        pass
    return render(request, template, context)


# @cache_page(60 * 15)
def index_log(request, nature):
    
    if True:
        context = basis(request)
        actual_institution = context['actual_institution']
        total_operations = Operation.objects.filter(m_institution=actual_institution).count()
    
    # Calcul du nombre d'opérations validées et planifiées
        operations_validated = Operation.objects.filter(m_institution=actual_institution, etat=2).count()  
        operations_planned = Operation.objects.filter(m_institution=actual_institution, etat=0).count()   

    # Calcul du pourcentage de réalisation
        if total_operations > 0:  
            operations_calcul = (operations_validated / total_operations) * 100  
        else:  
            operations_calcul = 0.0  # Assurez-vous que c'est un float
    
    # Returning the result as JSON 
        operation_m = Operation.objects.all()
        context['operation_m'] = operation_m
        operation_details = OperationDetails.objects.all()
        context['operation_details'] = operation_details
        context['today']=date.today()
        context['menu'] = 'i'
        context['operations_calcul'] = operations_calcul
        elements = list()
        top_entity = context['top_entity']

        tops = top_entity.lines()
        bool(tops)

        context['lvl'] = nature

        if nature == -1 and context['permissions'] >= 0:
            nature = 0

        if context['permissions'] == 0:
            nature = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
                'm_institution').last().m_hierachie
            bool(nature)

        context['nature'] = nature
        context['next_nature'] = nature + 1
        # If any Tops have been created, redirection

        if tops.first() == None:
            template = "webpages/ctn_bpf/index_empty.html"
            context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                'actual_institution']).select_related('m_institution').first().m_entity_type
            tmp_lines = list()
        else:
            if context["entity_manage"] != None:
                hierachy = context["entity_manage"].m_type_entity.hierachie()
                hierachi_id = context["entity_manage"].id
                return redirect("gestionnaire/" + str(hierachy) + "/" + str(hierachi_id) + "/")
            else:
                template = "webpages/ctn_bpf/dashboard.html"
            nb_elements = 0
            for t in tops:
                elements.append({'entity': t, 'values': t.levels(nature, context['actual_institution'])})

            context['elements'] = elements
            context['type_entity'] = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=context[
                'actual_institution']).select_related('m_institution').first()
            if context['type_entity'] != None:
                context["type_entity"] = context["type_entity"].m_entity_type
                tmp_lines = context['type_entity'].lines()
            else:
                tmp_lines = list()
        # Moyenne de Progression
        nb_elt = 0
        progress = 0
        """
		for elt in tmp_lines:
			progress += elt.progression()
			nb_elt += 1
		if nb_elt > 0:
			progress /= nb_elt
		"""

        progress = context['actual_institution'].progression()
        context['actual_progression'] = round(progress, 2)
        paginator_o = Paginator(elements, 6)
        page_number_o = request.GET.get('page')
        elements_page = paginator_o.get_page(page_number_o)
        # oeuvres_date
        context['pages_o'] = elements_page
        context['num_pages'] = paginator_o.num_pages
        context['page_range'] = paginator_o.page_range
        context['menu'] = 'l'
        context['top_entities'] = actual_institution.top_entity().lines()
        context['this_entities'] = actual_institution.get_entities()

    return render(request, template, context)


def index(request, nature=-1):
    if request.user.is_authenticated:

        return redirect('/dashboard/e-commerce/')
    else:
        context = dict()
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None

        template = "webpages/ctn_bpf/presentation.html"
        # context['temoignages'] = Temoignage.objects.filter()[:3]
        context['institution_count'] = Institution.objects.count()
        context['projet_count'] = 0
        institution=Institution.objects.filter(parent__isnull=True).order_by('-id')[:8]
        # paginator = Paginator(institution, 6)  # 8 articles par page
        # page_number = request.GET.get('page')
        # page_obj = paginator.get_page(page_number)
        context['institution']=institution
        actualite = Actualite.objects.filter(is_public=True).order_by('-id')  
        context['actualite'] = actualite  
        videos= Archive.objects.filter(format_fichier='video')
        context['videos']=videos
        archives_s = Archive.objects.filter(format_fichier ='pdf')
        context['archives_s']=archives_s
        archive= Archive.objects.all()
        context['archive']=archive
        baniere=Baniere.objects.all().order_by('-id')
        context['baniere']=baniere
        groupe= Groupe_institution.objects.all().order_by('-id')
        context['groupe'] = groupe
        faq = Faq.objects.all()
        rubriques = Rubrique.objects.all()
        context['rubriques'] = rubriques
        context['faq'] = faq
        last_actuality = Actualite.objects.order_by('-date')[:6]
        context['last_actuality'] = last_actuality
        sous_actualite = SousActualite.objects.all()
        context['sous_actualite'] = sous_actualite
        rubrique = Rubrique.objects.prefetch_related('actualite_set').all()
        sousrubrique = Sous_Rubrique.objects.all()
        context['sousrubrique'] = sousrubrique
        context['rubrique']=rubrique


        institution_status = Institution.objects.filter(status=1)
        context['institution_status']=institution_status
        
        tmp1 = InsitutionEntities.objects.filter(m_hierachie=1)
        for t in tmp1:
            context['projet_count'] += t.m_entity_type.lines().count()
        context['operations_count'] = Operation.objects.count()
        context['personnel_count'] = Personnel.objects.count()
    try:
        if request.session['too_much_ins'] == 1:
            context['too_much_ins'] = True
        # request.session['too_much_ins'] = None
    except:
        pass
    try:
        if request.session['assistance'] == 1:
            context['assist_send'] = True
            request.session['assistance'] = None
    except:
        pass
    return render(request, template, context)


def bad_auth(request):
    template = "webpages/ctn_bpf/bad_auth.html"
    context = {
        'error': "Erreur au niveau de l'Adresse/Mot de Passe"
    }
    return render(request, template, context)


def main(request, menu_main=0):
    template = "webpages/ctn_bpf/main.html"
    if menu_main == 1:
        template = "webpages/ctn_bpf/presentation_framework.html"
    elif menu_main == 2:
        template = "webpages/ctn_bpf/presentation_documentation.html"
    docus = OperaFile.objects.filter(m_category="DOC")
    apps = OperaApp.objects.filter()
    context = {
        "docus": docus,
        "apps": apps
    }
    return render(request, template, context)


def gestionnaire_search(request):
    generator = request.POST['generator']
    name = request.POST['search']
    if generator == '0':
        hierachy = int(request.POST['hierachy'])
        gest = int(request.POST['gest'])
        response = gestionnaire(request, hierachy, gest, name)
    elif generator == 'o':
        gest = int(request.POST['gest'])
        response = ges_taches(request, gest, None, name)
    elif generator == 's':
        response = structures(request, name)
    elif generator == 'r':
        response = roles(request)
    elif generator == 'p':
        response = personnels(request, name)
    elif generator == 'i2':
        hierachy = int(request.POST['hierachy'])
        gest = int(request.POST['gest'])
        response = evaluer(request, hierachy, gest, name)
    elif generator == "ex":
        response = extra(request, name)
    elif generator == "dSV":
        pass
    return response


# @cache_page(60 * 15)
@login_required(login_url='/log_account')
def gestionnaire(request, gest_val, gest_id=0, name=None, structure=None, periode=None, enums="#"):
    tmp_gest_val = gest_val
    context = basis(request)
    actual_institution = context['actual_institution']
    bool(actual_institution)

    context['base_img_val'] = context['actual_institution'].img.url

    dataset_settings = DataSet.objects.filter(m_institution=actual_institution)
    context['dataset_settings'] = dataset_settings
   
    if int(gest_val) == -1:
        gest_val = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
            'm_institution').last().m_hierachie
        bool(gest_val)
        tmp_gest_val = gest_val
       
    try:
        entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,
                                                   m_institution=actual_institution).select_related(
            'm_institution').first().m_entity_type
    except:
        entity = InsitutionEntities.objects.filter(m_institution=actual_institution).select_related(
            'm_institution').last().m_entity_type
    
    is_tache = False
    context['is_sub_tache'] = False
    context['detail_g_v'] = False
    context['sup_hierachy'] = list()  
    if gest_id != 0:
        # gest_val = str(int(gest_val) + 1)
        # entity = InsitutionEntities.objects.filter(m_hierachie=gest_val,m_institution=context['actual_institution']).first().m_entity_type
        sup_entity = Entity.objects.filter(id=gest_id).first()
        if sup_entity != None:
            lines = sup_entity.sub_entities()
        else:
            lines = list()
        tmp_gest_val = str(int(gest_val) + 1)
        sub_type = InsitutionEntities.objects.filter(m_hierachie=tmp_gest_val,
                                                     m_institution=context['actual_institution']).select_related(
            'm_institution').first()

        if context["permissions"] <= 0 and sup_entity in context["my_entities"]:
            context["autoE"] = 1
        elif context["permissions"] <= 0:
            for t in sup_entity.sup_hierachie():
                if t in context["my_entities"]:
                    context["autoE"] = 1
                    break
        if sub_type != None:  # Ce n'est pas une tache
            sub_type = sub_type.m_entity_type
            fields = sub_type.fields()
            context['is_sub_tache'] = sub_type.is_tache
            context['sub_entity'] = sub_type
            context['base_val'] = sup_entity
            context['sub_entities'] = sup_entity.sub_entities()
            context['gest_id'] = gest_id
            context['objects_field'] = sub_type.objects_field()
            context['calculates_field'] = sub_type.calculates_field()
            if sup_entity != None:
                if sup_entity.m_type_entity.is_pic_represented == True and sup_entity.m_pic_represented != None:
                    all_dataset = sup_entity.dataset.all()
                    context['all_dataset'] = all_dataset
                  
                    try:
                        context['base_img_val'] = sup_entity.m_pic_represented.url
                    except:
                        pass
            actu_entity = sub_type
        else:
            is_tache = True
            fields = list()
            actu_entity = entity
        context['detail_g_v'] = True
    else:
        actu_entity = entity
        enmPT = actu_entity.enum_fields()['result']
        """
		test_PT = dict()
		for e in enmPT:
			test_PT[e['name']] = e['lines']
		"""
        lines = entity.lines()
        is_tache = entity.is_tache
        fields = entity.fields()
        context['objects_field'] = entity.objects_field()
        context['calculates_field'] = entity.calculates_field()

       

    if name != None:
        tmp = list()
        for l in lines:
            if name in l.get_name():
                tmp.append(l)
        lines = tmp

    if structure != None:
        tmp = list()
        for l in lines:
            if l.structure == structure:
                tmp.append(l)
        lines = tmp

    if periode != None:
        tmp = list()
        for l in lines:
            if periode in l.plannification():
                tmp.append(l)
        lines = tmp

    context['is_tache'] = is_tache
    context['hierachy'] = int(tmp_gest_val)
    context['next_hierachy'] = int(tmp_gest_val) + 1
    context['gest_val'] = int(gest_val)
    context['entity'] = entity
    context['actu_entity'] = actu_entity
    context['sup_zone'] = entity.sup_entity(actual_institution.id)
    context['fields'] = fields
    # context['lines'] = lines
    context['menu'] = 'g'
    paginator_o = Paginator(list(lines), 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
   

    if int(tmp_gest_val) > 0 and gest_id != 0:
        context['sup_hierachy'] = sup_entity.sup_hierachie()

    if (int(tmp_gest_val) - 1 > 0) and InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
                                                                         m_institution=context[
                                                                             'actual_institution']).select_related(
            'm_institution').first() == None:
        context['none_search'] = True
    else:
        context['first_sup_search'] = True

    if tmp_gest_val == '0' and entity.m_enum_values in ["", None]:
        context['none_search'] = True
    context['searches'] = list(InsitutionEntities.objects.filter(m_hierachie=(int(tmp_gest_val) - 1),
                                                                 m_institution=context[
                                                                     'actual_institution']).select_related(
        'm_institution'))
    """
	if is_tache or context['is_sub_tache']:
		context['searches'].append({'label':'Structure','code':'s','values':context['structures']})
	"""
    try:
        if context['base_val'] != None:
            taches = list()  # context['base_val'].taches()
            struc = set()
            for t in taches:
                struc.add(t.structure)

            context['structures_not_null'] = struc
    except:
        pass
    try:

        if context["entity_manage"] != None:
            context["not_add"] = 1
            entityd = Entity.objects.get(id=context['base_val'].id)

           

    # Optionnel : afficher les datasets pour vérification
           

          
           
            
   
            if entityd in context["my_entities"]:

                if context["role"].m_role.permissions >= 0:
                    context["permissions"] = 0
                if context["permissions"] >= 0:
                    request.session["permissions_valider"] = True
            else:
                if request.session["permissions_valider"] == True:
                    pass  # context["permissions"] = -100
    except:
        pass
    if context['permissions'] < 0:
        template = "webpages/ctn_bpf/entities_simple_user.html"
        try:
            if context['base_val'].id == context['entity_manage'].id:
                context["auto_simple"] = 1
        except:
            pass
    else:
        if is_tache or context['is_sub_tache'] == True:
            template = "webpages/ctn_bpf/taches.html"
            context['structures'] = Structure.objects.filter(institution=context['actual_institution']).select_related(
                'institution')
        else:
            template = "webpages/ctn_bpf/entities.html"

    if enums != "#":
        context['da_enums'] = enums
    if is_tache and gest_id != 0:
        response = redirect('/taches/' + str(gest_id) + '/')
    else:
        response = render(request, template, context)
    return response


@login_required(login_url='/log_account')
def messengers(request):
    context = basis(request)
    template = "webpages/ctn_bpf/messengers.html"
    return render(request, template, context)


# @cache_page(60 * 15)
def ges_taches(request, tache_id, arg_period=None, search=None):
    context = basis(request)
    base_val = Tache.objects.get(id=int(tache_id))
    lines = Operation.objects.filter(tache=base_val).select_related('tache')
    lines_tache = lines
    context['sup_hierachy'] = base_val.sup_hierachie()

    if search != None:
        tmp = lines
        lines = list()
        for l in tmp:
            if search in str(l):
                lines.append(l)
    context['arg_period'] = arg_period
    if arg_period != None:
        periodes = base_val.plan_months()
        prd = periodes[(arg_period - 1)]
        context['periodes'] = prd
        lines = lines.filter(m_tache_plannification=prd)
        context['test'] = list()
        actual_institution = context['actual_institution']
        week = list()
        for t in actual_institution.default_subperiod.decoup_desc_slip2():
            week.append({'per': t, 'val': list()})
        for l in lines:
            ps = l.periodes()
            t_ps = ps.desc_split()
            i_p = 0
            for t in t_ps:
                if int(t) == 0:
                    week[i_p]['val'].append(l)
                    break
                i_p += 1
        context['test'] = week

    context['none_search'] = True
    context['entity'] = base_val.m_type_entity
    context['base_val'] = base_val
    context['sub_entity'] = context['actual_institution'].operations_name
    tmp_perso = Personnel.objects.filter()
    context['personnels'] = set()
    actual_institution=context['actual_institution']
    nature=NatureOperation.objects.filter(institution_id=actual_institution.id)
    context['nature']=nature
    personne=  Personnel.objects.filter(actual_institution_id=actual_institution.id)
    context['personne'] = personne
    dataset=DataSet.objects.filter(m_institution_id=actual_institution.id)
    context['dataset'] = dataset
    categorie_operation=CategorieOperation.objects.filter(institution_id=actual_institution.id)
    context['categorie_operation']=categorie_operation
    period = PeriodeOk.objects.all().distinct('annee')
    context['period'] = period
    periode_ok=PeriodeOk.objects.all()
    context['periode_ok'] = periode_ok
    structure = Structure.objects.filter(institution_id=actual_institution.id)
    context['structure'] = structure
    all_dataset = base_val.dataset.all()
    context['all_dataset'] = all_dataset
    for t in tmp_perso:
        if context['actual_institution'] in t.all_institutions():
            context['personnels'].add(t)
    context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
        'actual_institution')
    plan = base_val.plannification()
    if plan != None:
        context['searches'] = [{'label': '', 'values': base_val.plannification().table(), 'not_filter': True}]
    else:
        context['searches'] = [{'label': '', 'values': ["Aucune Valeur"], 'not_filter': True}]
    context['g_v'] = 'o'
    context['menu'] = 'go'
    base_valE = Entity.objects.get(id=base_val.id)

    if context["permissions"] <= 0 and base_valE in context["my_entities"]:
        context["autoE"] = 1
    elif context["permissions"] <= 0:
        for t in base_val.sup_hierachie():
            if t in context["my_entities"]:
                context["autoE"] = 1
                break

    if context['permissions'] < 0:
        template = "webpages/ctn_bpf/operations_simple_user.html"
        if context['base_val'].id == context['entity_manage'].id:
            context["auto_simple"] = 1
            lines = lines_tache
    else:
        if arg_period is None:
            template = "webpages/ctn_bpf/operations.html"
        else:
            template = "webpages/ctn_bpf/operations_periodes.html"

    paginator_o = Paginator(lines, 12)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    context['lines'] = elements_page
    operations_dataset=DataSet.objects.filter(m_institution=context['actual_institution'])
    context['operations_dataset'] = operations_dataset
    # return HttpResponse(elements_page)
    

    # operations_dataset = lines.dataset.all()
    # context['operations_dataset'] = operations_dataset
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    # context['roles_RACI'] =
    try:
        if request.session["permissions_valider"] == True:
            context["permissions"] = 0
            context["not_add"] = 1
    except:
        pass
    return render(request, template, context)


def structure_hie(request):
    return structures(request, None, 1)

#
# def structures(request, name=None, hierachie=None):
#     template = "webpages/ctn_bpf/structure.html"
#     context = basis(request)
#     context['entity'] = str(context['actual_institution'].default_struc_name)
#     context['lines'] = Structure.objects.filter(institution=context['actual_institution']).select_related('institution')
#     if name != None:
#         context['lines'] = context['lines'].filter(nom__contains=name)
#     context['fields'] = ['Logo', 'Nom',
#                          'Designation',
#                          'Responsable', 'Total : ' + str(context['actual_institution'].last_entity())]
#     context['menu'] = 's'
#     context['personnels'] = Personnel.objects.filter(actual_institution=context['actual_institution']).select_related(
#         'actual_institution')
#     context['g_v'] = 's'
#     context['none_search'] = True
#     if hierachie != None:
#         stH = context["actual_institution"].Structure_Hierachy()
#         vals = ""
#         for s2 in stH:
#             s3 = s2.m_levels_fields.split("|")[:-1]
#             for s in s3:
#                 vals += str(request.POST[s]) + "|"
#         tmp = vals.split("#")
#         re = ""
#         for tm in tmp:
#             re += tm.split("|")[0] + "|"
#         vals = re
#         context['vals'] = vals
#         context['lines'] = context['lines'].filter(values_hierachy__contains=vals)
#         context["stH"] = stH[0].m_levels_fields
#     return render(request, template, context)


def structure_details(request, structure_id=0):
    template = "webpages/ctn_bpf/structure_details.html"
    context = basis(request)
    structure = Structure.objects.get(id=int(structure_id))
    entity = context['actual_institution'].last_entity()
    lines = Tache.objects.filter(structure=structure).select_related('structure')

    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    fields = entity.fields()

    context['structure'] = structure
    context['base_val'] = structure
    # context['gest_id']=gest_id
    context['entity'] = entity
    context['sub_entity'] = entity
    context['objects_field'] = entity.objects_field()
    context['fields'] = fields
    context['is_tache'] = True
    return render(request, template, context)


def users_simples(request, search=None):
    template = "webpages/ctn_bpf/roles.html"
    fields_personnel = ['', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', '']
    fields_roles = ['Role', 'Description', 'Entite']
    personnel = Personnel.objects.filter()
    context = basis(request)
    roles = Role.objects.filter(actual_institution=context['actual_institution'], is_simple_user=1).select_related(
        'actual_institution')

    if search != None:
        roles = roles.filter(nom__contains=search)
    context['entity'] = 'Utilisateur Simple'
    context['fields1'] = fields_personnel
    context['personnel'] = personnel
    context['fields'] = fields_roles
    context['lines'] = roles
    context['g_v'] = 'r'
    context['g_vs'] = 'u2'
    return render(request, template, context)


def personnels(request, name=None, lis_peros=None):
    template = "webpages/ctn_bpf/roles.html"
    context = basis(request)
    context['entity'] = 'Personnel'
    context['fields'] = ['', 'Nom', 'Prenom', 'Telephone', 'Email', 'Fonction', 'Structures','sexe']
    context['lines'] = list()
    lines2 = set()
    tmp_perso = Personnel.objects.filter()
    if lis_peros == None:
        for t in tmp_perso:
            if context['actual_institution'] in t.all_institutions():
                atmp = {
                    'id': t.id,
                    'photo': t.photo,
                    'prenom': t.prenom,
                    'nom': t.nom,
                    'tel': t.tel,
                    'mail': t.mail,
                    'sexe':t.sexe,
                    'get_function': t.get_function(context['actual_institution'].id),
                    'get_structure': t.get_structure(context['actual_institution'].id)
                }
                context['lines'].append(atmp)
                lines2.add(t)
    else:
        context['lines'] = lis_peros
    # context['lines'] = Personnel.objects.filter(actual_institution=context['actual_institution'])
    if name != None:
        name = name.lower()
        tmps = context['lines']
        context['lines'] = list()
        for tt in tmps:
            ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
            for t in ta:
                if name in str(t):
                    context['lines'].append(tt)
                    break
    paginator_o = Paginator(context['lines'], 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)

    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    context['menu'] = 'g'
    context['g_v'] = 'p2'
    context['g_vs'] = 'p2'
    context['roles'] = Role.objects.filter(actual_institution=context['actual_institution']).select_related(
        'actual_institution')
    context['searches'] = []
    context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
        actual_institution=context['actual_institution']).select_related('actual_institution')})
    context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
        institution=context['actual_institution']).select_related('institution')})
    context['functions'] = list()
    context['structures'] = list()
    for p in lines2:
        context['functions'].append(p.get_function(context['actual_institution'].id))
        context['structures'].append(p.get_structure(context['actual_institution']))
    try:
        if request.session['perso_saved'] > 0:
            context['perso_saved'] = True
            tmp_user = Personnel.objects.get(id=request.session['perso_saved'])
            context['perso_get'] = tmp_user
            request.session['perso_saved'] = None
    except:
        pass
    return render(request, template, context)


# def personnel_id(request, perso_id):
#     context = basis(request)
#     template = "webpages/ctn_bpf/profile.html"
#     personnel = Personnel.objects.get(id=perso_id)
#     context["personnel"] = personnel
#     context["prenom"] = personnel.prenom
#     context["nom"] = personnel.nom
#     context["role"] = personnel.get_function(context["actual_institution"].id)
#     return render(request, template, context)


"""
def roles(request):
	template = "webpages/ctn_bpf/personnel_roles.html"
	context = basis(request)
	context['lines'] = Role.objects.filter(institution=context['actual_institution'])
	context['menu'] = 'g'
	return render(request,template,context)
"""


def filter_perso(request, structure_id=0, role_id=0):
    if structure_id == 0:
        structure = request.POST["Structure"]
        tds = structure
        if str(structure) != '0':
            structure = Structure.objects.get(id=int(structure))
    else:
        structure = Structure.objects.get(id=structure_id)

    if role_id == 0:
        role = int(request.POST["Fonction"])
        if str(role) != '0':
            role = Role.objects.get(id=role)
    else:
        role = Role.objects.get(id=role_id)
    personnel = Personnel.objects.filter()
    context = basis(request)
    result = list()
    if structure != '0':
        for p in personnel:
            if p.get_structure() != None and p.get_structure().m_structure == structure:
                result.append(p)
    if role != '0':

        if structure == '0':
            tmp = personnel
        else:
            tmp = result
        result = list()
        for p in tmp:

            if p.get_function() != None and p.get_function().m_role == role:
                result.append(p)
    return personnels(request, None, result)


def gestionnaire_id(request, gest_val, gest_id):
    pass

from django.shortcuts import redirect
from django.contrib.auth import authenticate, login, logout
from django.urls import reverse

from django.conf import settings
from django.contrib.auth import authenticate, login
from django.contrib import messages
from django.shortcuts import redirect
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.cache import never_cache
import logging
from django.views.decorators.http import require_POST
from django.views.decorators.http import require_GET
logger = logging.getLogger(__name__)

@require_POST
@csrf_protect
@never_cache
def log(request):
    """Gestion sécurisée de la connexion avec valeurs par défaut"""
    # Valeur par défaut si le paramètre n'est pas défini
    max_attempts = getattr(settings, 'MAX_LOGIN_ATTEMPTS', 5)
    
    # Initialisation du compteur de tentatives
    bad_log = request.session.get('bad_log', 0) + 1
    request.session['bad_log'] = bad_log
    request.session['try_log'] = True
    
    # Protection contre les attaques par force brute
    if bad_log > max_attempts:
        logger.warning(f"Trop de tentatives de connexion depuis l'IP {request.META.get('REMOTE_ADDR')}")
        messages.error(request, "Trop de tentatives. Veuillez réessayer plus tard ou contacter l'administrateur.")
        return redirect("account_locked")
    
    # Validation des entrées
    email = request.POST.get('email', '').strip()
    password = request.POST.get('password', '').strip()
    
    if not email or not password:
        messages.error(request, "L'email et le mot de passe sont requis")
        return redirect("/register/")
    
    # Recherche et authentification de l'utilisateur
    authenticated_user = None
    matching_users = User.objects.filter(email=email)
    
    for user in matching_users:
        if authenticate(username=user.username, password=password):
            authenticated_user = user
            break
    
    if not authenticated_user:
        messages.error(request, "Identifiants incorrects")
        return redirect("/register/")
    
    # Connexion réussie
    login(request, authenticated_user)
    request.session['bad_log'] = 0  # Réinitialisation du compteur
    
    # Journalisation de la connexion
    logger.info(f"Connexion réussie pour {authenticated_user.email} depuis {request.META.get('REMOTE_ADDR')}")
    
    # Redirection en fonction du profil
    if hasattr(authenticated_user, 'personnel'):
        personnel = authenticated_user.personnel
        if hasattr(personnel, 'actual_institution') and personnel.actual_institution:
            request.session['personnel_id'] = personnel.id
            return redirect('dashboard')
        return redirect('boutique')
    
    messages.info(request, "Veuillez contacter l'administrateur pour obtenir l'accès")
    return redirect('/bad_auth/')

logger = logging.getLogger(__name__)

@require_GET
@never_cache
def logout_view(request):
    """Déconnexion sécurisée avec gestion des paramètres manquants"""
    if request.user.is_authenticated:
        # Journalisation avant déconnexion
        logger.info(f"Déconnexion de {request.user.email} depuis {request.META.get('REMOTE_ADDR')}")
        
        # Nettoyage complet de la session
        session_keys = list(request.session.keys())
        for key in session_keys:
            del request.session[key]
        
        # Déconnexion propre
        logout(request)
        
        # Préparation de la réponse
        response = redirect('/')
        
        # Suppression des cookies avec valeurs par défaut si les paramètres sont absents
        session_cookie_name = getattr(settings, 'SESSION_COOKIE_NAME', 'sessionid')
        csrf_cookie_name = getattr(settings, 'CSRF_COOKIE_NAME', 'csrftoken')
        
        response.delete_cookie(session_cookie_name)
        response.delete_cookie(csrf_cookie_name)
        
        # Headers de sécurité
        response['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
        response['Pragma'] = 'no-cache'
        response['Expires'] = 'Fri, 01 Jan 1990 00:00:00 GMT'
        
        return response
    
    return redirect('/')

def specific_log(request, type_view=0):
    template = "webpages/ctn_bpf/specific_log.html"
    context = {

    }
    if type_view == 2:
        context['specific'] = 0  # Not Code
    return render(request, template, context)


def save_entity(request):
    try:
        institution = Institution.objects.get(id=int(request.POST['institution']))
    except:
        institution = basis(request)['actual_institution']
    try:
        operation_aggregate = request.POST['ope_aggregate']
    except:
        entity_nom = request.POST['entity_nom']
        entity_hierachy = request.POST['entity_hierachy']
        fields_name = request.POST['fields_name']
        fields_type = request.POST['fields_type']
        rapp_fields_name = request.POST['fields_name2']
        rapp_fields_type = request.POST['fields_type2']
        dataset = request.POST.getlist('dataset',[])
        if request.POST['entity_image'] == '0':
            entity_image = False
        else:
            entity_image = True
        edit_or_create = request.POST['edit_or_create']
        operation_aggregate = None
        enum_fields = request.POST['enum_fields']
    if operation_aggregate is None:
        if edit_or_create == 'e':
            edit_id = request.POST['edit_id']
            institutionEntity = InsitutionEntities.objects.get(id=int(edit_id))
            entity = institutionEntity.m_entity_type
            actual_fields = entity.fields()
            actual_values = entity.lines()
            for l in actual_values:
                value = l.m_value_fields
                tmp = ""
                for f in fields_name.split("|")[:-1]:
                    if f not in actual_fields:
                        tmp += " |"
                    else:
                        tmp += str(l.get_value(f)) + "|"
                l.m_value_fields = tmp
                l.save()
                
        else:
            entity = EntityType(m_nom=entity_nom)
        entity.is_pic_represented = entity_image
        entity.m_nom = entity_nom
        entity.m_fields = fields_name
        entity.m_type_fields = fields_type
        entity.m_fields_rapported = rapp_fields_name
        entity.m_type_fields_rapp = rapp_fields_type
        entity.m_enum_values = enum_fields
        entity.indicateur_fields = request.POST['indicateurs_field']
        entity.save()
        # tache hierachy modifier
        hierachie = int(entity_hierachy) + 1

        # Decalage des Relations
        if edit_or_create != 'e':

            to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
            for d in to_decaler:
                d.m_hierachie += 1
                d.save()
            institutionEntity = InsitutionEntities(m_hierachie=hierachie, m_entity_type=entity,
                                                   m_institution=institution)
            if to_decaler.first() == None:
                institutionEntity.m_entity_type.is_tache = True
                institutionEntity.m_entity_type.save()
        else:
            institutionEntity.m_hierachie = hierachie
        institutionEntity.save()
        for datasets in dataset:
            institutionEntity.dataset.add(datasets)
    else:
        edit_or_create = request.POST['edit_or_create_O']
        aggregate_name = request.POST['aggregate_name']
        aggregate_fields_name = request.POST['aggregate_fields_name']
        aggregate_fields_type = request.POST['aggregate_fields_type']
        aggregate_rap_fields_name = request.POST['aggregate_rap_fields_name']
        aggregate_rap_fields_type = request.POST['aggregate_rap_fields_type']

        # Aggregates launching
        aggregates = institution.operations_modules()
        # Aggregates launching

        if aggregates == None:
            aggregates = Aggregate(m_institution=institution)

        aggregates.m_nom = aggregate_name
        aggregates.m_fields = aggregate_fields_name
        aggregates.m_type_fields = aggregate_fields_type
        aggregates.m_fields_rapported = aggregate_rap_fields_name
        aggregates.m_type_fields_rapp = aggregate_rap_fields_type
        aggregates.save()
    return redirect('/configurations/')


def save_entity_value(request):
    institution = int(request.POST['institution'])
    hierachie = int(request.POST['hierachie'])
    dataset = request.POST.getlist("dataset_id")
   
   
    if hierachie != -1:
        type_entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution__id=institution).first()
    else:
        type_entity = InsitutionEntities.objects.filter(m_institution__id=institution).last()
    type_entity = type_entity.m_entity_type
    fields_value = request.POST['fields']
    edit_or_create = request.POST['edit_or_create']

    is_tache = request.POST['is_tache']
    if is_tache == 'True':
        if edit_or_create == 'e':
            edit_id = request.POST['edit_id']
            entity = Tache.objects.get(id=int(edit_id))
            entity.m_value_fields = fields_value
            entity.m_type_entity = type_entity
        else:
            entity = Tache(m_value_fields=fields_value, m_type_entity=type_entity)
        structures_list = request.POST['structures_list']  # getFieldValues()
        structures_roles = request.POST['structures_roles']
        try:
            entity.montant = float(request.POST["finances"])
        except:
            pass
        entity.save()
        r_struc = list()
        tmp_struc = list()
        r_roles = structures_roles
        r_roles = r_roles.split('\n')
        i = 0

        for s in structures_list.split('|')[:-1]:
            if s not in tmp_struc:
                tmp_struc.append(s)
        for s in tmp_struc:
            r_struc.append(Structure.objects.get(id=int(s)))
        r_struc.sort(key=lambda x: x.nom)
        try:
            if edit_or_create == 'e':
                for s in entity.structures.filter():
                    s.delete()
            for s in r_struc:
                if s == 0:
                    pass
                else:
                    r_str = StructureRole(m_structure=s, m_role=r_roles[i])
                    r_str.save()
                    entity.structures.add(r_str)
                    i += 1
            entity.structure = entity.structures.first().m_structure  # next(iter(r_struc)).m_structure
        except:
            pass

        entity.save()
        calendar = request.POST['calendar_selected']
        periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
        if edit_or_create == 'e' and calendar != "#":
            plani_tche = TachePlannify.objects.filter(m_tache=entity)
            for p in plani_tche:
                p.delete()
        if calendar != "#":
            plani_tche = TachePlannify(m_tache=entity, m_planify=calendar, m_periode=periode)
            plani_tche.save()
            set_pv_tp(plani_tche)
    else:
        if edit_or_create == 'e':
            edit_id = request.POST['edit_id']
            entity = Entity.objects.get(id=int(edit_id))
            entity.m_value_fields = fields_value
            entity.m_type_entity = type_entity
        else:
            entity = Entity(m_value_fields=fields_value, m_type_entity=type_entity)
        entity.save()
        for datasets in dataset:
            data = DataSet.objects.get(id=int(datasets))
            entity.dataset.add(data)
        
        

       
            
    try:
        sup_entity = request.POST['sup_entity']
    except:
        sup_entity = None
    # relations_entities
    if sup_entity != None:
        sup_entity = Entity.objects.get(id=int(sup_entity))

        if edit_or_create == 'e':
            delete_hierachie = EntityHierachie.objects.filter(m_sub_entity=entity).first()
            if delete_hierachie != None:
                delete_hierachie.delete()
        entity_hierachie = EntityHierachie(m_sub_entity=entity, m_sup_entity=sup_entity)
        entity_hierachie.save()

    # Image de Couverture
    try:
        entity.m_pic_represented = request.FILES["cover_img"]
        entity.save()
        
    except:
        pass

    i_f = 0
    fields_name = entity.m_type_entity.fields()
    for f in entity.m_type_entity.type_fields():
        if f in ['file', 'image']:
            try:
                eF = EntityFile(m_entity=entity, m_field=f, m_file=request.FILES[fields_name[i_f]])
                eF.save()
                entity.set_value(fields_name[i_f], str(eF.id))
            except:
                entity.set_value(fields_name[i_f], str("Aucun Fichier"))
            entity.save()
        i_f += 1
    base_val = request.POST["base_val"]

    # Enumerations Values
    split_extras1(entity)  # Clean the Error Files

    if base_val not in ['', ' ', '0', None]:
        response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
    else:
        response = "/gestionnaire/" + str(hierachie) + "/"
    response = redirect(response)
    return response


# def save_gestion(request):
#     context = basis(request)
#     generator = request.POST['generator']
#     edit_or_create = request.POST['edit_or_create']
#     try:
#         r_redirect = request.POST['redirect']
#     except:
#         pass
#     if generator == 'i':
#         r_sigle = request.POST['sigle']
#         r_nom = request.POST['nom']
#         r_image = request.FILES['image']
#         institution = Institution(sigle=r_sigle, nom=r_nom, img=r_image)
#         institution.save()
#         response = "/gestionnaire/i/"
#     elif generator == 'eD':
#         r_nom = request.POST['nom']
#         # r_fields_type = request.POST['fields_type']
#         # r_fields = request.POST['fields']
#         r_domain_type = request.POST['domain_type']
#         r_value_type = request.POST['value_type']
#         r_aggregation_type = request.POST['aggregation_type']
#         r_description = request.POST['description']
#         try:
#             r_null_conserv = request.POST['null_conserv']
#         except:
#             r_null_conserv = 0
#         try:
#             r_fill_valid = request.POST['fill_valid']
#         except:
#             r_fill_valid = 0
#         try:
#             r_logo = request.FILES['logo']
#         except:
#             r_logo = None
#         r_default_value = request.POST["default_value"]

#         dE = DataElement(m_name=r_nom)
#         if r_logo != None:
#             m_logo = r_logo
#         dE.m_domain_type = r_domain_type
#         dE.m_value_type = r_value_type
#         dE.m_aggregation_type = r_aggregation_type
#         dE.m_description = r_description

#         try:
#             if int(r_null_conserv) == 1:
#                 dE.is_zero_collect = True
#         except:
#             dE.is_zero_collect = False
#         try:
#             if int(r_fill_valid) == 1:
#                 if request.POST['default_value'] == None:
#                     tmp = 0
#                 else:
#                     tmp = request.POST['default_value']
#                 dE.m_default_value = int(tmp)
#         except:
#             dE.m_default_value = None
#         actual_institution = context['actual_institution']
#         dE.m_institution = actual_institution
#         dE.save()
#         response = "/dataelts/"
#     elif generator == 'a0':
#         r_user = User.objects.get(id=int(request.POST['user']))
#         r_message = request.POST['message']
#         a = Assistance(m_user=r_user, m_message=r_message)
#         a.save()
#         request.session['assistance'] = 1
#         response = "/assistance/"
#     elif generator == "str":
#         actual_institution = context['actual_institution']
#         r_value = request.POST['value']
#         actual_institution.default_struc_name = r_value
#         actual_institution.save()
#         response = "/structures/"
#     elif generator == "p2":
#         r_nom = request.POST['nom']
#         r_prenom = request.POST['prenom']
#         r_mail = request.POST['mail']
#         r_tel = request.POST['tel']
#         personnel_saved = Personnel.objects.filter(mail=r_mail).first()
#         try:
#             r_img = request.FILES['photo']
#         except:
#             if edit_or_create != 'e':
#                 r_img = OperaFile.objects.filter(m_name="USR").first().m_file
#             else:
#                 r_img = None
#         if personnel_saved == None:
#             tes_none = (User.objects.filter(email=r_mail).first())
#             if tes_none != None:
#                 try:
#                     personnel_saved = tes_none.personnel
#                 except:
#                     personnel_saved = Personnel(bd_user=tes_none, nom=r_nom, prenom=r_prenom, mail=r_mail, photo=r_img,
#                                                 actual_institution=context['actual_institution'],tel=r_tel)
#                     personnel_saved.save()

#         try:
#             r_structure = request.POST['Structure']
#         except:
#             r_structure = '0'
#         if r_structure != '0':
#             r_structure = Structure.objects.get(id=int(r_structure))
#         else:
#             r_structure = None
#         r_role = request.POST['Fonction']
#         r_role = Role.objects.get(id=int(r_role))
#         edit_or_create = request.POST['edit_or_create']
#         if edit_or_create != 'e':
#             if personnel_saved == None:
#                 
#                 password = ""
#                 for i in range(0, 8):
#                     password += str(random.randint(0, 9))
#                 usn = str(password) + str(User.objects.count() + 2)
#                 r_bd_user = User(username=usn, email=r_mail)
#                 subject = "Nouveau Compte Opera +"
#                 message_context = {
#                     'password': password,
#                     'name': r_nom + "" + r_prenom
#                 }
#                 message = render_to_string('webpages/ctn_bpf/mails/new_personnel.html', message_context)
#                 email = r_mail
#                 email_from = settings.EMAIL_HOST_USER
#                 recipient_list = [email, ]
#                 msg = EmailMessage(subject, message, email_from, recipient_list)
#                 msg.content_subtype = 'html'
#                 try:
#                     msg.send()
#                     r_bd_user.set_password(password)
#                 except:
#                     r_bd_user.set_password("user1234")
#                 # r_bd_user.set_password('User'+password)
#                 r_bd_user.save()
#                 personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, photo=r_img,
#                                       actual_institution=context['actual_institution'])
#                 personnel.bd_user = r_bd_user
#             else:
#                 personnel = personnel_saved
#         else:
#             edit_id = request.POST['edit_id']
#             if personnel_saved == None:
#                 personnel = Personnel.objects.get(id=int(edit_id))
#             else:
#                 personnel = personnel_saved
#             personnel.nom = r_nom
#             personnel.prenom = r_prenom
#             personnel.mail = r_mail
#             personnel.bd_user.email = r_mail
#             personnel.m_tel = r_tel
#             personnel.bd_user.save()
#             if r_img != None:
#                 personnel.photo = r_img
#         if personnel_saved == None:
#             personnel.save()
#         else:
#             request.session['perso_saved'] = personnel_saved.id
#         try:
#             simple_user = request.POST['simple_user']
#         except:
#             simple_user = '0'
#         if simple_user == '0':
#             ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
#             ps.save()
#             pf = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             if pf == None:
#                 pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
#                                         m_institution=context['actual_institution'])
#             else:
#                 pf.m_role = r_role
#             pf.save()
#         else:
#             entity = Entity.objects.get(id=int(simple_user))
#             pf = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             if pf == None:
#                 pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
#                                         m_institution=context['actual_institution'])
#             pf.m_entity = entity
#             pf.save()

#             ps = Personnel_Function.objects.filter(m_personnel=personnel,
#                                                    m_institution=context['actual_institution']).first()
#             ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
#             ps.save()
#         response = "/personnels/"
#     elif generator == "r":  # Role
#         r_nom = request.POST['nom']
#         r_description = request.POST['description']
#         r_permission = request.POST['permission']
#         r_institution = Institution.objects.get(id=int(request.POST['institution']))
#         r_ros_click = request.POST["ros_click"]

#         if int(r_ros_click) in [1, 2]:
#             r_permission = "-1"

#         if r_permission == '-1':
#             r_permission = 0
#         else:
#             permissions_hierachie = InsitutionEntities.objects.filter(m_institution=r_institution).last().m_hierachie
#             if (permissions_hierachie + 1) >= int(r_permission):
#                 r_permission = 0  # (permissions_hierachie+1) - int(r_permission)
#             else:
#                 r_permission = int(r_permission)
#         if edit_or_create == 'c':
#             role = Role(actual_institution=r_institution, nom=r_nom, description=r_description,
#                         permissions=r_permission)
#         else:
#             edit_id = request.POST['edit_id']
#             role = Role.objects.get(id=int(edit_id))
#             role.nom = r_nom
#             role.description = r_description
#             role.permissions = r_permission
#         if int(r_ros_click) == 1:
#             r_entity_administr = request.POST["permission_entity"]
#             eH = InsitutionEntities.objects.filter(id=int(r_entity_administr)).first().m_entity_type
#             role.m_simple_auth = eH
#             entities = list()
#             """
# 			for e in r_entity_administr.split("#")[:-1]:
# 				entities.append(Entity.objects.get(id=int(e)))
# 			"""
#             role.save()
#             # role.m_entities.set(entities)
#             role.m_nature = "1"
#         elif int(r_ros_click) == 2:
#             role.permissions = -100
#             user_simple_entity = request.POST['user_simple_entity']
#             role.is_simple_user = 1
#             role.m_simple_auth = EntityType.objects.get(id=int(user_simple_entity))
#         role.save()
#         response = "/roles/"
#     elif generator == "s":
#         try:
#             r_pic = request.FILES["logo"]
#         except:
#             r_pic = None
#         r_nom = request.POST['nom']
#         r_designation = request.POST['designation']
#         r_institution = request.POST['Institution']
#         r_institution = Institution.objects.filter(id=int(r_institution)).first()
#         try:
#             r_responsable = Personnel.objects.filter(id=int(request.POST['responsable'])).first()
#         except:
#             r_responsable = None
#         if edit_or_create == 'e':
#             edit_id = int(request.POST['edit_id'])
#             structure = Structure.objects.get(id=int(edit_id))
#             structure.photo = r_pic
#             structure.nom = r_nom
#             structure.designation = r_designation
#             structure.institution = r_institution
#         else:
#             structure = Structure(nom=r_nom, designation=r_designation,
#                                   institution=r_institution)  # ,responsable=r_responsable
#             if r_pic != None:
#                 structure.photo = r_pic
#         structure.save()

#         if r_responsable != None:
#             if edit_or_create == 'c':
#                 sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
#             else:
#                 edit_id = int(request.POST['edit_id'])
#                 structure = Structure.objects.get(id=int(edit_id))
#                 sR = StructureResponsable.objects.filter(m_structure=structure).first()
#                 if sR == None:
#                     sR = StructureResponsable(m_structure=structure, m_responsable=r_responsable)
#                 else:
#                     sR.m_responsable = r_responsable
#             sR.save()
#         response = "/structures/"
#     elif generator == 'd_s_1':
#         if edit_or_create == "c":
#             dS = DataSet()
#             dS.save()
#             response = "/data_sets/design/" + str(dS.id) + "/"
#             form_part = False
#         else:
#             edit_id = request.POST["edit_id"]
#             dS = DataSet.objects.get(id=int(edit_id))

#             try:
#                 form_html = request.POST["form_design"]
#                 response = "/data_form/-1/0/"
#                 form_part = True
#                 for v in dS.m_dataelements.filter():
#                     form_html = form_html.replace("dE$" + str(v.id) + "$",
#                                                   "<div class='variableSelector'>  <div><input class='form-control' name='D0elt" + str(
#                                                       v.id) + "' type='text'></div> </div>")  # <div><label><small>"+str(v)+"</small></label></div>
#                 for v in dS.m_indicateurs.filter():
#                     form_html = form_html.replace("dI$" + str(v.id) + "$",
#                                                   "<div class='indicSelector' data-id='" + str(v.id) + "'> </div>")
#                 dS.m_formulaire = form_html
#             except:
#                 response = "/data_sets/design/" + str(dS.id) + "/"
#                 form_part = False
#         if not form_part:
#             form_name = request.POST["form_name"]
#             if form_name not in [None, ""]:
#                 dS.m_name = form_name
#             dS.m_periode = request.POST["periode"]
#             dS.m_sub_periode = request.POST["sub_periode"]

#             """
# 			r_indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
# 			dS.m_indicateur = r_indicateur
# 			"""
#             dS.m_institution = context["actual_institution"]
#             # ephoxVariables_input = request.POST["ephoxVariables_input"]
#             variables_list = request.POST["variables_list"].split("#")
#             indicateurs_list = request.POST["indicateurs_list"].split("#")
#             variables_set = set()
#             indicateurs_set = set()

#             for v in variables_list[:-1]:
#                 dE = DataElement.objects.get(id=int(v))
#                 variables_set.add(dE)

#             for v in indicateurs_list[:-1]:
#                 dI = Indicateur.objects.get(id=int(v))
#                 indicateurs_set.add(dI)

#             """
# 			if ephoxVariables_input != "#":
# 				id_insert = 1
# 				ephoxVar = ephoxVariables_input.split("#")
# 				for v in ephoxVar[1:-1]:
# 					dE = DataElement.objects.get(id=int(v))
# 					dS.m_formulaire = dS.m_formulaire.replace("de$"+str(v)+"$","<div class='variableSelector'> <div><label><small>"+str(dE)+"</small></label></div> <div><input class='form-control' name='"+str(id_insert)+"' type='text'></div> </div>")
# 					id_insert += 1
# 					variables_set.add(dE)
# 				dS.save()
# 			"""
#             variables_set = list(variables_set)
#             indicateurs_set = list(indicateurs_set)
#             dS.m_dataelements.set(variables_set)
#             dS.m_indicateurs.set(indicateurs_set)

#             r_structure = request.POST["structures_list"].split("$")
#             structures_set = list()
#             for r in r_structure[:-1]:
#                 structures_set.append(Structure.objects.get(id=int(r)))
#             dS.m_structures.set(structures_set)

#             r_role = request.POST["roles_list"].split("$")
#             roles_set = list()
#             for r in r_role[:-1]:
#                 roles_set.append(Role.objects.get(id=int(r)))
#             dS.m_roles.set(roles_set)

#         dS.save()
#     elif generator == 'o':
#         r_m_tache_plannification = request.POST['tache_periode']
#         r_tache = request.POST['tache']
#         response = "/taches/" + r_tache + "/"
#         r_tache = Tache.objects.get(id=int(r_tache))

#         # r_code = request.POST['code']

#         r_nom = request.POST['nom']
#         r_perso = request.POST['perso']
#         r_accountable = request.POST['accountable']
#         r_consulted = request.POST['consulted']
#         r_informed = request.POST['informed']
#         date_echeance_str = request.POST['date_echeance']
#         try:
#             r_role = request.POST['role']
#         except:
#             pass
#         if r_perso != "0":
#             r_perso = Personnel.objects.get(id=int(r_perso))
#         else:
#             r_perso = None
#         if r_accountable != "0":
#             r_accountable = Personnel.objects.get(id=int(r_accountable))
#         else:
#             r_accountable = None
#         if r_consulted != "0":
#             r_consulted = Personnel.objects.get(id=int(r_consulted))
#         else:
#             r_consulted = None
#         if r_informed != "0":
#             r_informed = Personnel.objects.get(id=int(r_informed))
#         else:
#             r_informed = None

#         """		try:
# 			r_perso = Personnel.objects.get(id=int(r_perso))
# 			r_accountable = Personnel.objects.get(id=int(r_accountable))
# 			r_consulted = Personnel.objects.get(id=int(r_consulted))
# 			r_informed	 = Personnel.objects.get(id=int(r_informed))
# 		except:
# 			pass"""
#         try:
#             r_montant = int(request.POST['montant'])
#         except:
#             r_montant = 0
#         file_oko = None
#         r_chronogr = request.POST['chronogr']
#         r_who_assign = int(request.POST['who_assign'])
#         r_sub_period = request.POST['sub_period']
#         r_notification = request.POST['notification']
#         r_priorite = request.POST['priorite']
#         try:
#             r_operation_aggregates = request.POST['operation_aggregates']
#         except:
#             r_operation_aggregates = None
#         if edit_or_create == 'c':
#             operation = Operation(tache=r_tache, nom=r_nom, montant=r_montant, notification=r_notification,
#                                   priorite=r_priorite, date_echeance=date_echeance_str)
#             operation.m_value = ""
#             t2 = r_tache.sup_entity()
#             tmp = str(r_tache.id) + "#"
#             while t2 != None:
#                 tmp = str(t2.id) + "#" + tmp
#                 t2 = t2.sup_entity()
#             operation.code = tmp

#             if context['actual_institution'].default_options != True:
#                 try:
#                     if r_operation_aggregates is not None:
#                         operations_values = r_operation_aggregates.split("|")
#                         i_val = 0
#                         for val in context['actual_institution'].operations_modules().fill_fields():
#                             if val["type"] in ['file', 'image']:
#                                 try:
#                                     oF = OperationFile(operation=operation, m_field=val['field'],
#                                                        m_file=request.FILES[val['field'] + '_nam'])
#                                     operation.save()
#                                     oF.save()
#                                 except:
#                                     pass
#                             operation.m_value += str(
#                                 operations_values[i_val]) + "|"  # str(operations_values[i_val]) + "|"
#                             i_val += 1
#                     else:
#                         operation.m_value = r_operation_aggregates
#                 except:
#                     pass
#                 operation.m_value += " "
#             else:
#                 try:
#                     file_oko = request.FILES['file_oko']
#                     operation.fichier_joint = file_oko
#                 except:
#                     pass
#         else:

#             edit_id = request.POST['edit_id']
#             operation = Operation.objects.get(id=int(edit_id))
#             operation.nom = r_nom
#             operation.montant = r_montant
#             operation.notification = r_notification
#             operation.priorite = r_priorite
#             if r_operation_aggregates is None:
#                 for val in context['actual_institution'].operations_modules().fields_rapported()[:-1]:
#                     operation.m_value += " " + "|"
#             else:
#                 operation.m_value = r_operation_aggregates
#         operation.m_tache_plannification = r_m_tache_plannification
#         # Add Institution to Operation
#         operation.m_institution = context["actual_institution"]

#         list_operations = list()
#         if r_who_assign == 0:
#             if r_perso != "0":
#                 operation.personnel = r_perso
#             if r_accountable != "0":
#                 operation.accountable = r_accountable
#             if r_consulted != "0":
#                 operation.consulted = r_consulted
#             if r_informed != "0":
#                 operation.informed = r_informed
#             list_operations.append(operation)
#         elif r_who_assign == 1:
#             role = Role.objects.get(id=int(r_role))
#             for perso in role.persos():
#                 operation.personnel = perso.m_personnel
#                 list_operations.append(operation)
#         else:
#             list_operations.append(operation)

#         for o in list_operations:
#             o.save()
#             if edit_or_create == 'e':
#                 op = OperationPeriode.objects.filter(m_operation=o).first()
#                 if op != None:
#                     tmp_chrono = SubPeriode.objects.filter(id=int(r_sub_period)).first()
#                     if tmp_chrono != None:
#                         op.m_chronogramme = tmp_chrono
#                     op.m_desc_realisation = r_chronogr
#                     op.save()
#                 else:
#                     op = OperationPeriode(m_operation=o, m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
#                                           m_desc_realisation=r_chronogr)
#                     op.save()
#             else:
#                 op = OperationPeriode(m_operation=o, m_chronogramme=SubPeriode.objects.get(id=int(r_sub_period)),
#                                       m_desc_realisation=r_chronogr)
#                 op.save()
#         subject = "Attribution - " + str(operation.institution().operations_name())
#         email_from = settings.EMAIL_HOST_USER
#         try:
#             raci_roles = [operation.personnel, operation.accountable, operation.consulted, operation.informed]
#             all_emails = list()
#             msg_emails = list()
#             i_r = 0
#             for r in raci_roles:
#                 i_r += 1
#                 if r is not None:
#                     tmp_context = {
#                         'operation': operation,
#                         'personnel': r,
#                         'tache': operation.tache,
#                         'institution': operation.institution()
#                     }
#                     if i_r == 2:
#                         tmp_context['role'] = 'A'
#                     elif i_r == 3:
#                         tmp_context['role'] = 'C'

#                     elif i_r == 4:
#                         tmp_context['role'] = 'I'
#                     else:
#                         tmp_context['role'] = 'Responsable'
#                     message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', tmp_context)
#                     # message2 = (subject, message, email_from, [r_role.m_personnel.mail])
#                     message2 = EmailMessage(subject, message, email_from, [r.mail, ])
#                     message2.content_subtype = 'html'

#                     msg_emails.append(message2)
#                     try:
#                         message2.send()
#                     except:
#                         pass
#         # recipient_list = all_emails
#         # send_mass_mail((msg_emails), fail_silently=False)
#         except:
#             message_context = {
#                 'operation': operation,
#                 'personnel': operation.personnel,
#                 'tache': operation.tache,
#                 'institution': operation.institution()
#             }
#             message = "<html><head></heady><body><b>Vous avez une</b></body></html>"
#             message = render_to_string('webpages/ctn_bpf/mails/new_operation.html', message_context)
#             if r_perso != '0':
#                 email = r_perso.mail
#                 recipient_list = [email, ]
#                 msg = EmailMessage(subject, message, email_from, recipient_list)
#                 msg.content_subtype = 'html'
#                 try:
#                     if file_oko != None:
#                         msg.attach(file_oko.name, file_oko.read(), file_oko.content_type)
#                     msg.send()
#                 except:
#                     pass
#         """
# 		try:
# 			send_mail( subject, message, email_from, recipient_list, fail_silently=False)
# 			msg = EmailMessage(subject, message, email_from, recipient_list)
# 			msg.content_subtype = 'html'
# 			msg.send()
# 		except:
# 			pass
# 		"""
#     elif generator == 'w':
#         r_nom = request.POST['nom']
#         r_prenom = request.POST['prenom']
#         r_mail = request.POST['mail']
#         r_password = request.POST['password']
#         r_username = User.objects.count() + 1
#         try:
#             r_user = User(username=r_username, email=r_mail)
#             r_user.set_password(r_password)
#             r_user.save()
#         except:
#             r_user = User(username='ngb' + str(r_username + 1000), email=r_mail)
#             r_user.set_password(r_password)
#             r_user.save()

#         # Code generator
#         code = ""
#         
#         for i in range(6):
#             code += str(random.randint(0, 9))
#         # code = "000111"
#         owner = Owner(m_user=r_user, m_code=code)
#         owner.save()
#         personnel = Personnel(nom=r_nom, prenom=r_prenom, mail=r_mail, bd_user=r_user)
#         personnel.photo = OperaFile.objects.filter(m_name="USR").first().m_file
#         personnel.save()
#         subject = ""
#         message = " Bonjour, utilisez ce code pour renseigner une Institution au sein d'Opera " + str(code)
#         email = r_mail
#         email_from = settings.EMAIL_HOST_USER
#         recipient_list = [email, ]
#         try:
#             send_mail(subject, message, email_from, recipient_list, fail_silently=False)
#         except:
#             pass  # No cconnexion
#         response = "/log_account/"
#         request.session['new_user'] = 1
#     elif generator == "i2":
#         id_e = int(request.POST["entity_id"])
#         entity = Entity.objects.get(id=id_e)
#         for i in entity.get_indicateurs():
#             tmp_per = request.POST["period" + str(i.id)]
#             tmp_num = request.POST["numer" + str(i.id)]
#             tmp_field = request.POST["id" + str(i.id)]
#             tmp_field = DataElement.objects.filter(id=int(tmp_field)).first()
#             # i.m_values = str(tmp_per)+"#"+str(tmp_num)+"\n" + str(i.m_values)
#             iV = IndicateurVal(m_indicateur=i, m_periode=tmp_per, m_valeur=tmp_num, m_numerateur=tmp_field)
#             iV.save()

#         entity.is_rapported = True
#         entity.save()
#         response = "/chaine_indicateurs/"
#         context['indique'] = True
#     elif generator == "dSv":
#         r_dataset = DataSet.objects.get(id=int(request.POST["dSv_id"]))
#         r_user = request.user.personnel
#         r_variables = r_dataset.m_dataelements
#         r_values = request.POST["variables_value"].split("#")
#         r_values_names = request.POST["variables_names"].split("#")
#         r_values_dict = dict()

#         for v in r_variables.filter():
#             r_values_dict["D0elt" + str(v.id)] = None

#         for i in range(len(r_values)):
#             r_values_dict[r_values_names[i]] = r_values[i]

#         r_structures = [request.POST["struc_selec"]]
#         r_period1 = request.POST["period1_saisie"]
#         r_period2 = request.POST["period2_saisie"]
#         entity = DataSetValue(m_dataset=r_dataset, m_user=r_user, m_period_value=r_period1,
#                               m_sub_period_value=r_period2)
#         entity.save()

#         i = 0
#         for v in r_variables.filter():
#             dt = DSet_DElt(m_dataelement=v, m_dataset_value=entity,
#                            m_value=r_values_dict["D0elt" + str(v.id)])  # r_values[i])
#             dt.save()
#             i += 1
#         for v in r_structures:
#             stru = Structure.objects.get(id=int(v))
#             entity.m_structures.add(stru)
#         entity.save()
#         response = "/data_form/" + str(r_dataset.id) + "/" + str(0) + "/"
#     elif generator == "ieD":
#         formula = request.POST["formule"]
#         indicateur = Indicateur.objects.get(id=int(request.POST["indicateur"]))
#         indicateur.m_datalets_calcul = formula
#         indicateur.save()
#         response = "/dataelts/indic/"
#     elif generator == "pass":
#         password = request.POST["password"]
#         user = request.user
#         user.set_password(password)
#         user.save()
#         response = "/profile/"
#     elif generator == "ind_va":
#         entity = EntityType.objects.get(id=int(request.POST["entity_ind_id"]))
#         entity.indicateur_fields = request.POST["ind_val"]
#         entity.save()
#         response = "/configurations/"
#     elif generator == "cOi":
#         entity = Tache.objects.get(id=request.POST["configOp_id"])
#         tA = TacheAggregate.objects.filter(m_tache=entity).first()
#         if tA == None:
#             tA = TacheAggregate(m_tache=entity)
#         i = 1
#         for i1 in context["actual_institution"].operations_modules().fields():
#             if request.POST["fiel1" + str(i)] not in ["#", "", " "]:
#                 tA.m_values1 += request.POST["fiel1" + str(
#                     i)] + ""
#             else:
#                 tA.m_values1 += "#" + ""
#         i = 1
#         for i1 in context["actual_institution"].operations_modules().fill_fields_rapp():
#             if request.POST["fiel2" + str(i)] not in ["#", "", " "]:
#                 tA.m_values2 += request.POST["fiel2" + str(
#                     i)] + ""
#             else:
#                 tA.m_values2 += "#" + ""
#             i += 1
#         tA.save()
#         response = "/taches/" + str(entity.id)
#     return redirect(response)


def planifier2(request, period_id=0):
    template = "webpages/ctn_bpf/plannifier.html"
    annees = set()
    context = basis(request)
    entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
    tasks = entity.lines()

    # actual_period =

    context['searches'] = list()
    context['g_v'] = '1'
    context['institution'] = Institution.objects.last()
    if period_id != 0:
        context['actual_period'] = Institution_Periodes.objects.get(id=int(period_id))
    else:
        period = request.user.personnel.actual_institution.default_period
        institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                            m_periode=period).first()
        context['actual_period'] = institutionPe
    context['taches'] = tasks
    context['ranges'] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
    return render(request, template, context)


def roles(request, search=None):
    template = "webpages/ctn_bpf/roles.html"
    fields_personnel = ['', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', '']
    fields_roles = ['Role', 'Description', 'Permissions',
                    'Entite']
    personnel = Personnel.objects.filter()
    context = basis(request)
    roles = Role.objects.filter(actual_institution=context['actual_institution']).select_related('actual_institution')
    if search != None:
        roles = roles.filter(nom__contains=search)
    context[
        'entity'] = 'Role'
    context['fields1'] = fields_personnel
    context['personnel'] = personnel
    context['fields'] = fields_roles
    context['lines'] = roles
    context['g_v'] = 'r'
    context['g_vs'] = 'r2'
    return render(request, template, context)


def repartir_tache(request):
    r_tache = request.POST['tache']
    r_roles_tache = request.POST['roles_tache']
    r_personnel_tache = request.POST['personnel_tache']
    roles = r_roles_tache.split("_")
    personnels = r_personnel_tache.split("_")
    r_roles = list()
    r_persos = list()
    for r in roles:
        if r != '':
            r_roles.append(Role.objects.get(id=int(r)))
    for p in personnels:
        if p != '':
            r_persos.append(Personnel.objects.get(id=int(p)))
    tache = Tache.objects.get(id=int(r_tache))
    subject = "Attribution de la Tache"
    message = " Vous avez une Tache "
    email = r_persos[0].mail
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    # send_mail( subject, message, email_from, recipient_list, fail_silently=False)

    repartition = TacheRepartition(m_tache=tache)
    repartition.save()
    repartition.m_personnels.set(r_persos)
    repartition.m_roles.set(r_roles)
    repartition.save()
    return redirect("/gestionnaire/t/")


def modify(request, arg_val=""):
    r_personnel_id = request.POST['personnel']
    r_role_id = request.POST['role']
    personnel = Personnel.objects.get(id=int(r_personnel_id))
    role = Role.objects.get(id=int(r_role_id))
    r_institution = Institution.objects.get(id=int(request.POST['institution']))
    p_f = Personnel_Function(m_personnel=personnel, m_role=role, m_institution=r_institution)
    p_f.save()
    return redirect('/personnels/')


def save_plannify(request):
    tache_id = request.POST['calendar_tache']
    calendar = request.POST['calendar_selected']
    periode = Periode.objects.get(id=int(request.POST['calendar_periode']))
    tache = Tache.objects.get(id=int(tache_id))
    try:
        plani_tche = TachePlannify.objects.filter(m_tache__id=int(tache_id)).first()
        plani_tche.m_planify = calendar
        plani_tche.m_periode = periode
    except:
        plani_tche = TachePlannify(m_tache=tache, m_planify=calendar, m_periode=periode)
    plani_tche.save()
    institutionPe = Institution_Periodes.objects.filter(m_institution=request.user.personnel.actual_institution,
                                                        m_periode=periode)
    return redirect("/planifier/" + str(institutionPe.first().id) + "/")


# @cache_page(60 * 15)
def operations_home(request, lvl=-1, arg_structure="#", periode="#", search="#", only_not=0):
    template = "webpages/ctn_bpf/index.html"
    context = basis(request)
    if lvl == -1:
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
    else:
        entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution'],
                                                   m_hierachie=lvl).last().m_entity_type
    lines = entity.lines()
    tache_lvl = entity.is_tache
    if arg_structure not in ["#", '0']:
        tmp_structure = Structure.objects.get(id=int(arg_structure))
        try:
            tmp = list()
            for l in lines:
                if l.structure == tmp_structure:
                    tmp.append(l)
                else:
                    pass
            lines = tmp
            context['arg_structure'] = int(arg_structure)
        except:
            pass
    if periode not in ["#", '0']:
        try:
            tmp = list()
            for t in lines:
                if periode in t.plannification().table():
                    tmp.append(t)
            lines = tmp
        except:
            pass
    if search != "#":
        tmp = list()
        for t in lines:
            if search in t.get_name():
                tmp.append(t)
        lines = tmp
    context['entity'] = entity
    context['sup_entity'] = entity.sup_entity(context['actual_institution'].id)
    context['lines'] = lines
    context['fields'] = entity.fields()
    context['operation'] = 1
    context['personnel'] = Personnel.objects.filter()
    context['menu'] = 'o'
    context['lvl'] = lvl
    context['g_v'] = 'o'
    context['periode'] = periode
    context["tache_lvl"] = tache_lvl

    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    
    return render(request, template, context)


@login_required(login_url='/log_account')
def notifications(request):
    template = "webpages/ctn_bpf/index.html"
    context = basis(request)
    entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
        'm_institution').last().m_entity_type
    lines = list()
    for l in entity.lines():
        if l.progression() < 100:
            operations = l.operations()
            appd = False
            for o in operations:
                if o.personnel == request.user.personnel:
                    lines.append(l)
                    break
    context['notif'] = True
    context['entity'] = entity

    # context['lines'] = lines
    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    context['fields'] = entity.fields()
    context['personnel'] = Personnel.objects.filter()
    context['menu'] = 'o'
    context['g_v'] = 'o'
    return render(request, template, context)


# @login_required(login_url='/log_account')
# def alert_notifs(request, search=None, tree=None, report=0):
#     context = basis(request)
#     template = "webpages/ctn_bpf/alert_notifs.html"
#     operation_historic = HistoricRACI.objects.all()
#     perso = request.user.personnel
#     context['report'] = report
#     context['operation_historic'] = operation_historic
#     repeat_mode = context["actual_institution"].repeat_mode
#     if repeat_mode:
#         na_class = OperationDetails
#         if report == 0:
#             main_operations = Operation.objects.filter(personnel=perso.id,
#                                                        etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 1:
#             main_operations = na_class.objects.filter(m_operation__accountable=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 2:
#             main_operations = na_class.objects.filter(m_operation__consulted=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 3:
#             main_operations = na_class.objects.filter(m_operation__informed=perso.id,
#                                                       etat='2')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 100:
#             main_operations = na_class.objects.filter()
#     else:
#         na_class = Operation
#         if report == 0:
#             main_operations = na_class.objects.filter(personnel=perso.id,
#                                                       etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 1:
#             main_operations = na_class.objects.filter(accountable=perso.id,
#                                                       etat='1')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 2:
#             main_operations = na_class.objects.filter(consulted=perso.id,
#                                                       etat='0')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 3:
#             main_operations = na_class.objects.filter(informed=perso.id,
#                                                       etat='2')  # .values('m_institution','code','nom','id','date_creation')
#         elif report == 100:
#             main_operations = na_class.objects.filter()
#     bool(main_operations)
#     if repeat_mode and report != 0:
#         tmp = list()
#         for n in main_operations:
#             tmp.append(n.m_operation.id)
#         main_operations = Operation.objects.filter(id__in=tmp)

#     main_operations = main_operations.order_by('-date_creation')
#     if tree == '1':
#         entHidden = request.POST["entHidden"]
#         context["entHidden"] = entHidden.split("#")
#         main_operations = main_operations.filter(code__contains=entHidden)
#     tmp = list()
#     try:
#         n = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).count()
#     except:
#         n = 0

#     for i in range(n):
#         tmp.append(set())

#     for o in main_operations:
#         if o.code != None:
#             o2 = o.code.split("#")
#             try:
#                 for i in range(n):
#                     tmp[i].add(o2[i])
#             except:
#                 pass

#     ents = list()
#     for i in range(n):
#         try:
#             ents.append({
#                 "hierachie": i,
#                 'entities': Entity.objects.filter(id__in=list(tmp[i]))
#             })
#         except:
#             pass
#     context['ents'] = ents
#     context['n'] = n

#     main_operations2 = OperationRole.objects.filter(m_personnel=perso.id).values('m_operation')
#     context['main_operations2'] = main_operations2
#     # operations = perso.get_taches() #get_operations()

#     results = list()
#     results = list(main_operations)
#     """
# 	for o in operations:
# 		if o.progression() == 0 and o.rapported() in ['0',None] :
# 			results.append(o)
# 	"""
#     paginator_o = Paginator(results, 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     context['menu'] = 'aN'
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range
#     context['lines'] = context['pages_o']
#     return render(request, template, context)


# def save_rapport(request):
#     context = basis(request)
#     r_operation = Operation.objects.get(id=int(request.POST['operation_id']))
#     actual_institution = context['actual_institution']

#     r_operation.etat = "1"
#     r_operation.save()
#     if request.method == "POST":
#         operation_comm = request.POST.get('operation_comm')
#         operation_raci = HistoricRACI.objects.create(m_commentaire=operation_comm,
#                                                      m_operation_id=request.POST['operation_id'], m_role="R")
#         operation_raci.save()
#         if context["actual_institution"].repeat_mode == True:
#             r_operation = OperationDetails(m_operation=r_operation)
#             r_operation.personnel = request.user.personnel
#             r_operation.m_institution_id = actual_institution
#             r_operation.save()
#             fil_class = OperationDetailsFile
#     else:
#         fil_class = OperationFile
#     try:
#         r_commentaire = request.POST['operation_comm']
#     except:
#         r_commentaire = None
#     try:
#         r_fichier = request.FILES['operation _fichier']
#     except:
#         r_fichier = None
#     if context['actual_institution'].default_options != True:
#         rapport_input = request.POST['rapport_input']
#         rapport_values = request.POST['rapport_values']
#         try:
#             aggregates = context['actual_institution'].operations_modules().type_fields_rapported()
#             aggs_fields = context['actual_institution'].operations_modules().fields_rapported()
#         except:
#             aggregates = list()
#         i = 1
#         for a in aggregates:
#             if a == 'file':
#                 delet = fil_class.objects.filter(m_field=aggs_fields[(i - 1)], operation=r_operation)
#                 delet.delete()
#                 oF = fil_class.objects.create(m_field=aggs_fields[(i - 1)], operation=r_operation)
#                 try:
#                     oF.m_file = request.FILES['file_r' + str(i)]
#                 except:
#                     pass
#                 oF.save()
#             i += 1
#         r_operation.m_value_reported = rapport_values
#         r_operation.etat = '1'
#         r_operation.date_rapported = datetime.datetime.now()
#         r_operation.m_commentaire = r_commentaire
#         r_operation.save()
#     else:
#         r_operation.etat = '1'
#         rapport_input = request.POST['rapport_input']
#         if rapport_input != 'c':
#             rapport = OperationRapport(operation=r_operation, commentaire=r_commentaire)
#         else:
#             # r_nom = request.POST['operation_nom']
#             rapport = OperationRapport(piece_jointe=r_fichier, operation=r_operation, commentaire=r_commentaire)
#             # r_operation.etat = '1' #nom_piece_jointe=r_nom
#             periode = r_operation.periodes()
#             desc_tmp = periode.desc_split()
#             desc_tmp.append("")
#             index = 0
#             for i in desc_tmp:
#                 if i == '9':
#                     pass
#                 elif i == '0':
#                     desc_tmp[index] = '1'
#                     rapport.period = index
#                     rapport.save()
#                     request.session['new_rapport'] = 1
#                     break
#                 elif i == '1':
#                     request.session['have_to_done'] = 1
#                     break
#                 index += 1
#             desc_tmp = "_".join(desc_tmp)

#             periode.m_desc_realisation = desc_tmp
#             periode.save()
#     try:
#         finances = request.POST["finances"]
#         r_operation.montant2 = int(finances)
#     except:
#         r_operation.montant2 = 0
#     r_operation.save()
#     request.session['new_rapport'] = 1
#     try:
#         operation = r_operation
#         peA = None
#         tmps = [operation.accountable, operation.consulted]
#         message_context1 = {
#             'operation': operation,
#             'role': 'A',
#             'commentaires': r_commentaire,
#             'lien': "/decision/o/" + str(operation.id) + "/",
#             'institution': operation.institution()
#         }
#         message_context2 = {
#             'operation': operation,
#             'role': 'C',
#             'commentaires': r_commentaire,
#             'lien': "/decision/o/" + str(operation.id) + "/",
#             'institution': operation.institution()
#         }

#         subject = str(operation) + " - attente de validation"
#         message1 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context1)
#         message2 = render_to_string('webpages/ctn_bpf/mails/rapport_operation.html', message_context2)
#         recipient_list1 = [operation.accountable.bd_user.email, ]
#         if operation.consulted != None:
#             recipient_list2 = [operation.consulted.bd_user.email, ]
#         else:
#             recipient_list2 = list()
#         email_from = settings.EMAIL_HOST_USER
#         msg1 = EmailMessage(subject, message1, email_from, recipient_list1)
#         msg1.content_subtype = 'html'
#         msg2 = EmailMessage(subject, message2, email_from, recipient_list2)
#         msg2.content_subtype = 'html'
#         try:
#             if r_fichier != None:
#                 msg1.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
#                 msg2.attach(r_fichier.name, r_fichier.read(), r_fichier.content_type)
#             msg1.send()
#             msg2.send()
#         except:
#             pass
#     except:
#         pass
#     response = redirect('/operations/')
#     return response


def assign_supervisor(request):
    tache = Tache.objects.get(id=int(request.POST["assign"]))
    supervisor = Personnel.objects.get(id=int(request.POST['perso']))
    tache.superviseur = supervisor
    tache.save()
    return redirect('/gestionnaire/t/')


# def valid_rapport(request):
#     opera_valider_id = request.POST['opera_valider_id']
#     operation = Operation.objects.get(id=int(opera_valider_id))
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     try:
#         operation_rapport = request.POST["operation_rapport"]
#         operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
#         operation_rapport.etat = "2"
#         operation_rapport.m_institution_id = actual_institution
#         operation_rapport.save()
#     except:
#         operation.etat = '2'

#     index = 0
#     if request.method == "POST":
#         m_commentaire = request.POST.get('opera_valider_comment')
#         # date_realisation = date.today()
#         # date_realisation = datetime.today().date()
#         save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
#                                                     m_operation_id=request.POST['opera_valider_id'], m_role='A')
#         save_historic.save()
#     # if defaulted configurations
#     try:
#         periode = operation.periodes()
#         desc_tmp = periode.desc_split()
#         desc_tmp.append("")
#         for i in desc_tmp:
#             if i in ['9', '0']:
#                 pass
#             elif i == '1':
#                 desc_tmp[index] = '2'
#                 request.session['validation_done'] = 1
#                 break
#             index += 1
#         desc_tmp = "_".join(desc_tmp)
#         periode.m_desc_realisation = desc_tmp
#         periode.save()
#     except:
#         pass
#     operation.save()

#     subject = " Evolution " + str(operation)
#     message_context = {
#         'operation': operation,
#     }
#     message = render_to_string('webpages/ctn_bpf/mails/inform_evolution.html', message_context)

#     email_from = settings.EMAIL_HOST_USER
#     recipient_list = [operation.personnel.bd_user.email, ]
#     if operation.informed != None:
#         recipient_list.append(operation.informed.bd_user.email)
#     msg = EmailMessage(subject, message, email_from, recipient_list)
#     msg.content_subtype = 'html'
#     try:
#         msg.send()
#         send = '0'
#     except:
#         send = '1'

#     return redirect('/operations/')


def in_valid_rapport(request):
    opera_invalider_id = request.POST['opera_invalider_id']
    commentaire = request.POST["opera_invalider_comment"]
    operation = Operation.objects.get(id=int(opera_invalider_id))
    operation.etat = '0'
    periode = operation.periodes()
    desc_tmp = periode.desc_split()
    desc_tmp.append("")
    try:
        operation_rapport = request.POST["operation_rapport"]
        operation_rapport = OperationDetails.objects.get(id=int(operation_rapport))
        operation_rapport.etat = 0
        operation_rapport.save()  #:save()
    except:
        operation_rapport.etat = 0
        pass
    index = 0
    if request.method == "POST":
        m_commentaire = request.POST.get('opera_invalider_comment')
        # date_realisation = date.today()
        # date_realisation = datetime.today().date()
        save_historic = HistoricRACI.objects.create(m_commentaire=m_commentaire,
                                                    m_operation_id=request.POST['opera_invalider_id'], m_role='A')
        save_historic.save()
    for i in desc_tmp:
        if i in ['1']:
            desc_tmp[index] = '0'
            request.session['validation_done'] = 1
        index += 1
    desc_tmp = "_".join(desc_tmp)
    periode.m_desc_realisation = desc_tmp
    periode.save()
    operation.save()
    message_context = {
        'operation': operation,
        'commentaire': commentaire
    }

    subject = " Rapport non Valide"
    message = render_to_string('webpages/ctn_bpf/mails/operation_invalid.html', message_context)
    email = operation.personnel.bd_user.email
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    msg = EmailMessage(subject, message, email_from, recipient_list)
    msg.content_subtype = 'html'
    try:
        msg.send()
        send = '0'
    except:
        send = '1'

    return redirect('/operations/')


def delete(request):
    id_entity = request.POST['id_entity']
    generator = request.POST['generator']
    try:
        force = False
        if generator == 'o':
            entity = Operation.objects.get(id=int(id_entity))
            response = redirect('/taches/' + str(entity.tache.id) + '/')
        elif generator == 'eD':
            entity = DataElement.objects.get(id=int(id_entity))
            response = redirect('/dataelts/')
        elif generator == 'p2':
            entity = Personnel.objects.get(id=int(id_entity))
            response = redirect('/personnels/')
        elif generator == 'r':
            entity = Role.objects.get(id=int(id_entity))
            response = redirect('/roles/')
        elif generator == 's':
            entity = Structure.objects.get(id=int(id_entity))
            response = redirect('/structures/')
        elif generator == 'e':
            entity = InsitutionEntities.objects.get(id=int(id_entity))
            hierachie = entity.m_hierachie
            institution = entity.m_institution
            to_decaler = InsitutionEntities.objects.filter(m_hierachie__gte=hierachie, m_institution=institution)
            for d in to_decaler:
                d.m_hierachie -= 1
                d.save()
            response = redirect('/configurations/')
            entity = entity.m_entity_type
        elif generator == 'i2':
            entity = Indicateur.objects.get(id=int(id_entity))
            response = redirect('/evaluer/' + str(entity.m_enti.m_type_entity.hierachie()))
        elif generator == 'iF3':
            entity = IndicateurVal.objects.get(id=int(id_entity))
            sup = entity.m_indicateur.m_enti
            try:
                s_sup = sup.sup_entity().id
                sup_hierachie = sup.m_type_entity.hierachie()

                response = redirect('/data_form/' + str(sup_hierachie) + '/' + str(s_sup) + '/')
            except:
                response = redirect('/data_form/-1/0/')
        elif generator == 'y':
            entity = Institution_Periodes.objects.get(id=int(id_entity))
            response = redirect('/configurations/')
        elif generator == 'z':
            entity = SubPeriode.objects.get(id=int(id_entity))
            response = redirect('/configurations/')
        elif generator == 'p2_RACI':
            entity = PersonnelRACI.objects.get(id=int(id_entity))
            response = redirect('/personnels_raci/')
        elif generator == "dSV":
            entity = DataSet.objects.get(id=int(id_entity))
            response = redirect("/data_form/-1/0/")
        else:
            hierachie = int(request.POST['hierachy'])
            try:
                base_val = int(request.POST["base_val"])
            except:
                base_val = "0"
            if base_val not in ['', '0', None]:
                response = "/gestionnaire/" + str(hierachie - 1) + "/" + str(base_val) + "/"
            else:
                response = "/gestionnaire/" + str(hierachie) + "/"

            entity = Entity.objects.get(id=int(id_entity))
            response = redirect(response)
        entity.delete()
    except ProtectedError:
        # render the template with your message in the context
        # or you can use the messages framework to send the message:
        template = "webpages/ctn_bpf/error_delete.html"
        context = basis(request)
        entity = Entity.objects.filter(id=int(id_entity)).first()
        if entity != None:
            context["entity"] = entity
            tmp_hierachie = entity.m_type_entity.hierachie()
            context['hierachie'] = tmp_hierachie
            if entity.m_type_entity.is_tache == True:
                subs = context["actual_institution"].operations_name
            else:
                tmp_hierachie += 1
                subs = InsitutionEntities.objects.filter(m_institution=context["actual_institution"],
                                                         m_hierachie=tmp_hierachie).first()
            context['subs'] = subs
            context['element'] = 1
        response = render(request, template, context)
    return response


def ajax_lines(request):
    type_search = request.GET.get('type_search')
    value_search = request.GET.get('value_search')
    sub_search = request.GET.get('sub_search')
    results = list()
    lines = list()
    progressions = list()
    lines_count = 0

    if value_search != "|":
        results = objets[type_search].objects.filter(nom__contains=value_search)
    else:
        pass

    if type_search == 'o':
        for r in results:
            progressions.append(r.progression())
            lines.append(r.nom + "|" + str(r.personnel) + "|" + str(r.montant) + "|" + r.semaines + "|")

    lines_count = results.count()
    data = {
        'progressions': progressions,
        'lines': lines,
        'lines_count': lines_count
    }
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def configurations(request):
    template = "webpages/ctn_bpf/configurations.html"
    context = basis(request)
    actual_institution = context['actual_institution']
    context['institution'] = request.user.personnel.actual_institution
    context['menu'] = 'c'
    context['g_v'] = 'e'
    context['basis_periodes'] = Periode.objects.filter(m_initial=True)
    dataset = DataSet.objects.filter(m_institution = actual_institution)
    context['dataset'] = dataset
    return render(request, template, context)


# def profile(request):
#     template = "webpages/ctn_bpf/profile.html"
#     context = basis(request)
#     context['institution'] = context['actual_institution']
#     context["personnel"] = request.user.personnel
#     return render(request, template, context)


def filter_op_search(request):
    search = request.POST['search']
    return filter_op(request, search)


def filter_op(request, search="#"):
    try:
        niveau = int(request.POST['niveau'])
        periode = request.POST['periode']
        structure = request.POST['structure']
    except:
        niveau = -1
        periode = "#"
        structure = "#"
    try:
        only_not = int(request.POST["only_not"])
    except:
        only_not = 0
    return operations_home(request, niveau, structure, periode, search, only_not)


def notifs(request):
    user_id = request.GET.get('value')
    insti_id = request.GET.get('institution')
    actual_institution = Institution.objects.get(id=int(insti_id))
    perso = Personnel.objects.get(bd_user__id=int(user_id))
    if actual_institution.repeat_mode == False:
        operations1 = list()
        operations = Operation.objects.filter(personnel=perso)
        operations_report = Operation.objects.filter(accountable=perso, etat='1')
        count_is_consulted = Operation.objects.filter(consulted=perso, etat='1').count()
        count_is_informed = Operation.objects.filter(informed=perso, etat='2',is_deleted=False).count()


    else:
        operations1 = Operation.objects.filter(personnel=perso)
        operations = OperationDetails.objects.filter(m_operation__personnel=perso)
        operations_report = OperationDetails.objects.filter(m_operation__accountable=perso, etat='1')
        count_is_consulted = OperationDetails.objects.filter(m_operation__consulted=perso, etat='1').count()
        count_is_informed = OperationDetails.objects.filter(m_operation__informed=perso, etat='2',is_deleted=False).count()

    # General_Results
    nb_taches = 0
    nb_have_rapported = 0
    nb_is_done = 0
    nb_have_to_do = 0
    nb_observations = 0

    nb_have_rapported2 = 0
    nb_is_done2 = 0
    nb_have_to_do2 = 0
    nb_observations2 = 0
    if True:
        for o in operations1:
            if o.etat == '0':
                nb_have_to_do += 1
                nb_taches += 1
                if o.institution() == actual_institution:
                    nb_have_to_do2 += 1
        for o in operations:
            if o.etat == '1':
                nb_have_rapported += 1
                if o.institution() == actual_institution:
                    nb_have_rapported2 += 1
            else:
                nb_is_done += 1
                if o.institution() == actual_institution:
                    nb_is_done2 += 1

        for o in operations_report:
            nb_observations += 1
            if o.institution() == actual_institution:
                nb_observations2 += 1

    data = {
        'result': nb_taches,
        'have_to_done': nb_have_to_do,
        'is_done': nb_is_done,
        'have_rapported': nb_have_rapported,
        'have_to_done2': nb_have_to_do2,
        'is_done2': nb_is_done2,
        'have_rapported2': nb_have_rapported2,
        'nb_observations': nb_observations,
        'nb_observations2': nb_observations2,
        'count_is_consulted': count_is_consulted,
        'count_is_informed': count_is_informed
    }
    # entities = institution.get_entities()
    indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution).count()
    data["indi_total"] = indicateurs_all
    return JsonResponse(data)


def indicateurs_ajax(request):
    actual_institution = request.GET.get("institution")
    actual_year = request.GET.get("actual_year")

    try:
        entity_type = int(request.GET.get("entity_type"))
        type_indic = request.GET.get("type_indic")
    except:
        entity_type = None

    try:
        id_entity = int(request.GET.get("id_entity"))
        id_entity = Entity.objects.get(id=id_entity)
    except:
        id_entity = None

    if entity_type == None:
        if id_entity != None:
            indicateurs_all = Indicateur.objects.filter(m_enti=id_entity)
        else:
            indicateurs_all = Indicateur.objects.filter(m_institution=actual_institution)
        nb_all = indicateurs_all.count()
        indicateurs_renseignes = list()
        nb_renseignes = 0

        for i in indicateurs_all:
            if i.actu_value != None:
                indicateurs_renseignes.append(i)
                nb_renseignes += 1

        indicateurs_values = list()
        cibles = list()
        for i in indicateurs_renseignes:
            cibles.append(i.get_cibles(actual_year))
            indicateurs_values.append(i.actu_value())
        data = {
            'all': nb_all,
            'nb_renseignes': nb_renseignes,
            'cibles': cibles,
            'indicateurs_values': indicateurs_values
        }
    elif type_indic == "F":
        if id_entity == None:
            eT = EntityType.objects.filter(id=entity_type).first()
            entities = eT.lines()
        else:
            eT = id_entity.m_type_entity
            entities = id_entity.sub_entities()
        resul1 = list()
        resul2 = list()
        for e in entities:
            try:  # it may be Operation
                operations = e.operations()
                if eT.is_tache == False:
                    taches = e.taches()
                else:
                    taches = [e]
                tmp = 0
                tmp2 = 0
                for t in taches:
                    if t.montant != None:
                        tmp += int(t.montant)
                for o in operations:
                    tmp2 += int(o.montant2)
                resul1.append(tmp)
                resul2.append(tmp2)
            except:
                pass

        data = {
            'list_montant1': resul1,
            'list_montant2': resul2
        }
        entq = list()
        entq_id = list()
        for e in entities:
            entq.append(str(e))
            entq_id.append(str(e.id))
        data['entities'] = entq
        data["entities_id"] = entq_id
    else:
        if id_entity == None:
            eT = EntityType.objects.filter(id=entity_type).first()
            entities = eT.lines()
        else:
            entities = [id_entity]
        indicateurs_all = Indicateur.objects.filter(m_enti__in=entities)
        ens = dict()
        ens_good = dict()
        ens_bad = dict()
        nbE = indicateurs_all.count()
        for i in entities:
            ens[str(i.id)] = 0
            ens_good[str(i.id)] = 0
            ens_bad[str(i.id)] = 0

        for i in indicateurs_all:
            ens[str(i.m_enti.id)] += 1
            try:
                if int(i.get_cibles(actual_year)) > int(i.actu_value()):
                    ens_bad[str(i.m_enti.id)] += 1
                else:
                    ens_good[str(i.m_enti.id)] += 1
            except:
                pass

        if nbE > 0:
            for i in entities:
                ens[str(i.id)] = ens[str(i.id)]  # *100/nbE
                ens_good[str(i.id)] = ens_good[str(i.id)]  # *100/nbE
                ens_bad[str(i.id)] = ens_bad[str(i.id)]  # *100/nbE

        list_ens = list()
        list_ens_good = list()
        list_ens_bad = list()
        for i in entities:
            list_ens.append(ens[str(i.id)])
            list_ens_good.append(ens_good[str(i.id)])
            list_ens_bad.append(ens_bad[str(i.id)])
        data = {
            'list_ens': list_ens,
            'list_ens_good': list_ens_good,
            'list_ens_bad': list_ens_bad
        }
        entq = list()
        entq_id = list()
        for e in entities:
            entq.append(str(e))
            entq_id.append(str(e.id))
        data['entities'] = entq
        data["entities_id"] = entq_id
    return JsonResponse(data, safe=False)


def institutions(request, search=None):
    template = "webpages/ctn_bpf/institution.html"
    
    context = basis(request)
    groupe = Groupe_institution.objects.all()
    context['groupe']=groupe
    baniere=Baniere.objects.all()
    context['baniere']=baniere
    institutions1 = list()
    structures = Personnel_Structure.objects.filter(m_personnel=request.user.personnel)
    for s in structures:
        if s.m_structure.institution not in institutions1:
            institutions1.append(s.m_structure.institution)
    for i in Institution.objects.filter(owner__m_user__id=request.user.id):
        if i not in institutions1:
            institutions1.append(i)
    if search != None:
        tmp = institutions1
        institutions1 = list()
        for i in tmp:
            if search in i.nom or search in i.sigle:
                institutions1.append(i)
    institutions1 = sorted(institutions1, key=lambda t: t.sigle)
    paginator_o = Paginator(institutions1, 2500)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['institutions1'] = elements_page
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    context['menu'] = 'i'
    return render(request, template, context)


def set_institution(request, institution_id):
    institution = Institution.objects.get(id=institution_id)
    request.user.personnel.actual_institution = institution
    request.user.personnel.save()
    return redirect("/")


def operations_details_list(request, operation_id):
    template = "webpages/ctn_bpf/operations_details_list.html"
    context = basis(request)
    actual_institution = context['actual_institution']
    operation = Operation.objects.get(id=operation_id)
    operation_heritage = Operation.objects.filter(parent_id=operation_id,m_institution=actual_institution)
    context["operation"] = operation
    context['operation_heritage'] = operation_heritage
    return render(request, template, context)


# def operations_details(request, operation_id):
#     template = "webpages/ctn_bpf/operations_details.html"
#     context = basis(request)
#     operation = Operation.objects.get(id=operation_id)
#     actual_institution = context['actual_institution']
#     if operation.institution() != context['actual_institution']:
#         request.user.personnel.actual_institution = operation.institution()
#         request.user.personnel.save()
#         context = basis(request)
#     lines = list()

#     tache = operation.tache
#     if actual_institution.default_options != True:
#         try:
#             i = 0
#             for th in actual_institution.operations_modules().fill_fields_rapp():
#                 a = th
#                 if a["type"] == "choix":
#                     a["extras"] = operation.get_value(a["field"])
#                 lines.append(a)
#             aggs2 = tache.aggregates2()
#             for a in aggs2:
#                 lines[i]["field"] = a
#                 i += 1
#         except:
#             pass
#     context["lines"] = lines

#     tache = operation.tache
#     context['operation'] = operation
#     context['tache'] = tache
#     context['institutions'] = Institution.objects.filter()
#     context['menu'] = 'o'
#     return render(request, template, context)


# def history(request, dates="#"):
#     template = "webpages/ctn_bpf/history.html"
#     context = basis(request)
#     operation_rapport=OperationRapport.objects.all()
#     entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).select_related(
#         'm_institution').last().m_entity_type
#     tasks = entity.lines()
#     if context['actual_institution'].default_options == True:
#         context['fields'] = [entity.m_nom, 'Operation', 'Personnel', 'Rapport Technique', 'Date']
#         unsorted_results = list()
#         for t in tasks:
#             for o in t.operations():
#                 aka = OperationRapport.objects.filter(operation__id=o.id)
#                 for o2 in aka:
#                     unsorted_results.append(o2)
#     else:
#         if context["actual_institution"].repeat_mode == True:
#             template = "webpages/ctn_bpf/history_rapport.html"
#             tasks = context["actual_institution"].taches()
#             context["taches"] = tasks

#             context['menu'] = 'h'
#             # context['dates'] = dates
#             paginator_o = Paginator(tasks, 10)
#             page_number_o = request.GET.get('page')
#             elements_page = paginator_o.get_page(page_number_o)
#             # oeuvres_date
#             context['pages_o'] = elements_page
#             context['num_pages'] = paginator_o.num_pages
#             context['page_range'] = paginator_o.page_range
#             """
# 			paginator_o = Paginator(sorted_result,10)
# 			page_number_o = request.GET.get('page')
# 			elements_page = paginator_o.get_page(page_number_o)
# 			#oeuvres_date
# 			context['pages_o']=elements_page
# 			context['num_pages']=paginator_o.num_pages
# 			context['page_range']=paginator_o.page_range
# 			"""
#         else:
#             tmpas = context['actual_institution'].operations_modules().fill_fields_rapp()
#             aggregates = list()
#             for t in tmpas:
#                 if t['type'] == 'choix':
#                     aggregates.append(t['extras'])
#                 else:
#                     aggregates.append(t['field'])
#             context['fields'] = [entity.m_nom, context['actual_institution'].operations_name] + aggregates + [
#                 'Personnel', 'Date']

#             unsorted_results = list()
#             for t in tasks:
#                 for o in t.operations():
#                     unsorted_results.append(o)

#             sorted_result = sorted(unsorted_results, key=lambda t: t.date_creation)
#             if dates != "#":
#                 start_date = request.POST['start_date']
#                 end_date = request.POST['end_date']
#                 context['start_date'] = start_date
#                 context['end_date'] = end_date

#                 start_date = start_date.split("-")
#                 end_date = end_date.split("-")
#                 start_date = [int(elt) for elt in start_date]
#                 end_date = [int(elt) for elt in end_date]

#                 result = list()
#                 for t in sorted_result:
#                     start_date_cmp = start_date == list() or (
#                                 t.date_creation.year > start_date[0] or t.date_creation.year == start_date[
#                             0] and t.date_creation.month > start_date[1] or t.date_creation.year == start_date[
#                                     0] and t.date_creation.month == start_date[1] and t.date_creation.day >= start_date[
#                                     2])
#                     end_date_cmp = end_date == list() or (
#                                 t.date_creation.year < end_date[0] or t.date_creation.year == end_date[
#                             0] and t.date_creation.month < end_date[1] or t.date_creation.year == end_date[
#                                     0] and t.date_creation.month == end_date[1] and t.date_creation.day <= end_date[2])

#                     if start_date_cmp and end_date_cmp:
#                         result.append(t)
#             sorted_result = result

#             context['lines'] = sorted_result
#             context['nb_lines'] = len(sorted_result)
#             context['institutions'] = Institution.objects.filter()
#             context['menu'] = 'h'
#             context['dates'] = dates
#             paginator_o = Paginator(sorted_result, 10)
#             page_number_o = request.GET.get('page')
#             elements_page = paginator_o.get_page(page_number_o)
#             # oeuvres_date
#             context['pages_o'] = elements_page
#             context['num_pages'] = paginator_o.num_pages
#             context['page_range'] = paginator_o.page_range
#     return render(request, template, context)


def calendar(request):
    template = "webpages/ctn_bpf/agenda_week.html"
    context = basis(request)
    return render(request, template, context)


def save_period(request):
    institution = request.POST['institution']
    periode = request.POST['periode']
    decoupage = request.POST['decoupage']
    edit_or_create = request.POST['edit_or_create']
    try:
        big_period = request.POST["big_periode"]
        sub_period = 0
    except:
        sub_period = None
    if sub_period != None:
        r_big_period = Periode.objects.get(id=int(big_period))
        sub_period = request.POST["sub_period"]
        details = request.POST["details"]
        if edit_or_create != 'e':
            r_sub_period = SubPeriode(m_periode=r_big_period, m_sub_value=periode, m_decoupage=decoupage,
                                      m_decoupage_description=details)
        else:
            edit_id = request.POST['edit_id']
            r_sub_period = SubPeriode.objects.get(id=int(edit_id))
            r_sub_period.m_periode = r_big_period
            r_sub_period.m_sub_value = periode
            r_sub_period.m_decoupage = decoupage
            r_sub_period.m_decoupage_description = details
        r_sub_period.save()
    else:
        if edit_or_create != 'e':
            r_period = Periode(m_value=periode, m_decoupage=decoupage)
        else:
            edit_id = request.POST['edit_id']
            r_period = Periode.objects.get(id=int(edit_id))
            r_period.m_value = periode
            r_period.m_decoupage = decoupage
        r_period.save()
        if edit_or_create != 'e':
            institution = Institution.objects.get(id=int(institution))
            i_periode = Institution_Periodes(m_institution=institution, m_periode=r_period)
            i_periode.save()
    return redirect("/configurations/")


def ajax_graphiques(request):
    data = dict()
    id_tache = int(request.GET.get('id_graph'))
    type_graph = request.GET.get('type_graph')
    nature_graph = int(request.GET.get('nature_graph'))
    inst_graph = Institution.objects.get(id=int(request.GET.get('inst_graph')))
    actual_config = inst_graph.default_options

    if nature_graph != -1:
        element = InsitutionEntities.objects.filter(m_institution=inst_graph,
                                                    m_hierachie=nature_graph).first().m_entity_type
    else:
        element = InsitutionEntities.objects.filter(m_institution=inst_graph).last().m_entity_type

    if element.is_tache:
        entity = Tache.objects.get(id=id_tache)
        operations = entity.operations()
        nb_operations = len(operations)
    else:
        entity = Entity.objects.get(id=id_tache)

    if type_graph == 'eT':
        if element.is_tache:
            tache_tmp = Tache.objects.get(id=entity.id)
            plansT = list()
            for p in tache_tmp.plannification().table():
                plansT.append(p)
            x_abcisses = list()
            for p in plansT:
                for xi in inst_graph.default_subperiod.decoup_desc_slip2():
                    x_abcisses.append(str(p) + "-" + str(xi))

            # Matrice des mois
            result = list()

            x_interval = tache_tmp.plannification().table()
            operations = tache_tmp.operations()
            nb_operations = operations.count()
            tmp_sum = 0
            nb_x_abcisses = 0
            tmp_dict = list()
            for x in x_interval:
                # tmp_sum = 0
                operations_2 = operations.filter(m_tache_plannification=x)
                all_dict = list()
                for op in operations_2:
                    x_dict = list()
                    for t in op.periodes().desc_split():
                        x_dict.append(0)
                    i_x_d = 0

                    for t in op.periodes().desc_split():
                        if actual_config == True:
                            if t == '2':
                                tmp_val = 100
                            else:
                                tmp_val = 0
                        else:
                            if t != '9':
                                ds = {'0': 0, '1': 0, '2': 100}
                                tmp_val = ds[op.etat]
                            else:
                                tmp_val = 0

                        x_dict[i_x_d] += tmp_val
                        i_x_d += 1
                    all_dict.append(x_dict)
                # all_dict contient la matrice d'un mois i)

                tmp_dict_result = list()
                if operations_2.first() != None:
                    for t in operations_2[0].periodes().desc_split():
                        tmp_dict_result.append(0)
                    for a_dict in all_dict:
                        ia = 0
                        for a in a_dict:
                            tmp_dict_result[ia] += a
                            ia += 1
                tmp_dict += tmp_dict_result
            result_tmp = 0
            result = list()
            for t in tmp_dict:
                result_tmp += t
                result.append((result_tmp / nb_operations))
        else:
            x_abcisses = inst_graph.default_period.decoup_slip()
            tmp = list()
            taches = entity.taches()
            discovered = list()
            index_tmp = 0
            nb_taches = len(taches)
            for x in x_abcisses:
                tmp.append(0)
                for t in taches:
                    if x in t.plannification().table() and t not in discovered:
                        tmp[index_tmp] += t.progression()
                        discovered.append(t)
                index_tmp += 1
            y_abcisses = list()
            for y in range(index_tmp):
                if nb_taches > 0:
                    y_abcisses.append((tmp[y] / nb_taches))
                else:
                    y_abcisses.append(0)
            result = list()
            rst = 0
            for y in y_abcisses:
                rst += y
                result.append(rst)
    elif type_graph == 'p':
        x_abcisses = set()
        result_x = list()
        y_abcisses = list()
        for o in operations:
            x_abcisses.add(o.personnel)
        for perso in x_abcisses:
            y_abcisses.append(perso.progression_taches(inst_graph))
        for x in x_abcisses:
            result_x.append(str(x))
        x_abcisses = result_x
        result = y_abcisses
    elif type_graph == 't':
        x_abcisses = list()
        result = list()
        subs = entity.sub_entities()
        try:
            sub_name = str(subs[0].m_type_entity)
        except:
            sub_name = " "
        i = 0
        for x in subs:
            result.append(x.progression())
            x_abcisses.append(str(x))
            i += 1
        data['nb_sub'] = i
        data['sub_names'] = sub_name
    data['x_abcisses'] = x_abcisses
    data['y_abcisses'] = result
    return JsonResponse(data, safe=False)


# @login_required(login_url='/log_account')
# def decision(request, nature="#", element_id=0, operation_rapport_id=None):
#     context = basis(request)
#     if nature == "o":
#         template = "webpages/ctn_bpf/decision.html"
#         operation = Operation.objects.get(id=element_id)
#         if context["actual_institution"].repeat_mode == True:
#             operation_historic = HistoricRACI.objects.all()
#             context['operation_historic'] = operation_historic
#             template = "webpages/ctn_bpf/decision_rapport.html"
#             operation = Operation.objects.get(id=element_id)
#             if operation_rapport_id == None:
#                 operation_rapport = operation.get_operation_details_invalid().last()
#                 context["operation_rapport"] = operation_rapport
#         context['operation'] = operation
#         context['tache'] = operation.tache
#     else:
#         context["entity"] = Entity.objects.get(id=int(element_id))
#         template = "webpages/ctn_bpf/decision_plus.html"
#     return render(request, template, context)




def get_elements(request):
    # Elements can be Entity, Forms
    if True:  # try:
        other_limk = request.GET.get("other")
        institution = Institution.objects.get(id=int(request.GET.get('institution')))
        if other_limk == "dS":
            dSs = DataSet.objects.filter(m_institution=institution)
            data = {
                "datasets": list(),
                "datasets_id": list()
            }
            for d in dSs:
                data["datasets"].append(str(d))
                data["datasets_id"].append(str(d.id))
        elif other_limk == "dE_code":
            data = dict()
            codes = request.GET.get("codes").split("#")
            result = list()
            codes_replace = list()
            for code in codes[:-1]:
                res = list()
                j = 0
                n = len(code)
                while j < n:
                    if code[j] == "$":
                        j += 1
                        k = j
                        while code[j] != "$":
                            j += 1

                        res.append(code[k:j])
                        j += 2
                    else:
                        j += 1
                tmp_res = list()
                tmp_res2 = list()
                for r in res:
                    tmp_res.append(str(DataElement.objects.get(id=int(r))))
                    tmp_res2.append(r)
                result.append(tmp_res)
                codes_replace.append(tmp_res2)
            data["data_elts"] = result
            data["codes_replace"] = codes_replace
        elif other_limk == "dI_formula":
            values = request.GET.get("value").split("#")
            data_elts = DataSet.objects.get(id=int(request.GET.get("dataset")))
            result_formula = list()
            for v in values[:-1]:
                ind = Indicateur.objects.get(id=int(v))
                result_formula.append(ind.m_numerateur)
            data = dict()
            data["data_elts"] = data_elts.join_dataelts()
            data["formulas"] = result_formula
    else:  # except:
        value = int(request.GET.get('value'))
        nature = int(request.GET.get('nature'))
        institution = Institution.objects.get(id=int(request.GET.get('institution')))
        entity_type = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=institution).select_related(
            'm_institution').first().m_entity_type
        # entity to upload
        entity = Entity.objects.get(id=value)
        default_fields = entity_type.fields()
        default_fields_type = entity_type.type_fields()
        default_fields_values = entity.values()
        # Default Values to putt
        expected_fields = entity_type.fields_rapported()
        expected_types_type = entity_type.type_fields_rapported()
        results = list()
        data = {
            'entity': str(entity),
            'default_fields': default_fields,
            'default_fields_type': default_fields_type,
            'default_fields_values': default_fields_values,
            'expected_fields': expected_fields,
            'expected_types_type': expected_types_type
        }
    return JsonResponse(data, safe=False)


def get_elements_hierachy(request):
    nature = int(request.GET.get('nature'))
    institution = Institution.objects.get(id=int(request.GET.get('institution')))
    if nature == -100:
        type_entity = request.GET.get('type_entity')
        role = Role.objects.get(id=int(type_entity))
        entity_type = role.m_simple_auth
    elif nature != -1:
        entity_type = InsitutionEntities.objects.filter(m_hierachie=nature,
                                                        m_institution=institution).first().m_entity_type
    else:
        entity_type = InsitutionEntities.objects.filter(m_institution=institution).last().m_entity_type
    try:
        big_entity = int(request.GET.get('big_entity'))
        ent = Entity.objects.get(id=int(big_entity))
        lines = ent.sub_entities()
    except:
        lines = entity_type.lines()
    tmp = list()
    ids = list()
    for l in lines:
        tmp.append(str(l))
        ids.append(l.id)
    data = {
        'lines': tmp,
        'ids': ids
    }
    return JsonResponse(data, safe=False)


def get_entities_subsequency(request):
    pass


def get_elements_subsequency_true(request):
    nature = int(request.GET.get('nature'))
    entity = int(request.GET.get('entity'))
    report = int(request.GET.get('report'))
    try:
        institution = int(request.GET.get("institution"))
    except:
        institution = None
    if entity != -1:
        try:
            entity = Entity.objects.get(id=entity)
        except:
            entity = 0
        elts = entity.child_trees()
    else:
        elts = [Institution.objects.get(id=institution).top_entity().lines()]

    data_names = list()
    data_ids = list()
    for elt in elts:
        tmp_id = list()
        tmp_name = list()
        for e in elt:
            tmp_id.append(e.id)
            tmp_name.append(str(e))
        data_names.append(tmp_name)
        data_ids.append(tmp_id)

    data = {
        'data_ids': data_ids,
        'data_names': data_names
    }
    return JsonResponse(data, safe=False)


def get_elements_subsequency(request):
    nature = int(request.GET.get('nature'))
    entity = int(request.GET.get('entity'))
    report = int(request.GET.get('report'))
    try:
        institution = int(request.GET.get("institution"))
    except:
        institution = None
    try:
        entity = Entity.objects.get(id=entity)
    except:
        entity = 0

    if report == 0:
        operations = Operation.objects.filter(etat='0', personnel=request.user.personnel).values('code')
    elif report == 1:
        operations = Operation.objects.filter(etat='1', accountable=request.user.personnel).values('code')
    elif report == 2:
        operations = Operation.objects.filter(etat='1', consulted=request.user.personnel).values('code')
    elif report == 3:
        operations = Operation.objects.filter(etat='2', informed=request.user.personnel).values('code')
    else:
        operations = Operation.objects.filter().values('code')

    if institution != None:
        institution = Institution.objects.get(id=institution)
        operations = operations.filter(m_institution=institution)

    bool(operations)
    result = list()
    if entity != 0:
        for o in operations:
            try:
                if o['code'] not in ["", None] and o['code'].split("#")[nature] == str(entity.id):
                    result.append(o)
            except:
                pass
    else:
        pre_hierachie = int(request.GET.get("pre_hierachy"))
        if pre_hierachie not in [0, -1]:
            for o in operations:
                if o['code'] not in ["", None] and o['code'].split("#")[(nature - 1)] == str(pre_hierachie):
                    result.append(o)
        elif nature == 0:
            result = list(operations)
    steps = list()

    k = 0
    if True:
        if report != 100:
            for i in operations[0]['code'].split("#"):
                steps.append(set())
                k += 1
        else:
            for i in list(operations)[-1]['code'].split("#"):
                steps.append(set())
                k += 1
    else:
        pass

    # Recuperer les Operations
    i = 0
    for o in result:
        i = 0
        for j in range(k):
            if o['code'] not in [None, "", " "]:
                steps[i].add(o['code'].split("#")[j])
                i += 1

    # Transformer en Liste
    ajax_steps = list()
    for s in steps:
        ajax_steps.append("#".join(list(s)))

    ajax_steps2 = list()
    for s in steps:
        s3 = list(s)
        s2 = list()
        for t in s3:
            if t not in ['', None]:
                s2.append(int(t))
        a = Entity.objects.filter(id__in=list(s2))
        a2 = [str(t) for t in list(a)]
        ajax_steps2.append("#".join(a2))

    data = {
        'operations': result,
        'ajax_steps': ajax_steps,
        'ajax_steps2': ajax_steps2
    }
    return JsonResponse(data, safe=False)


def save_valid_rapport(request):
    nature = request.POST['nature']
    resultat = request.POST['resultat_realise']
    institution = Institution.objects.get(id=int(request.POST['institution']))
    entity_type = InsitutionEntities.objects.filter(m_hierachie=nature, m_institution=institution).first().m_entity_type
    entity = Entity.objects.get(id=int(request.POST['value']))
    entity.is_rapported = True
    entity.save()
    tR = EntityRapport(m_entity=entity, m_resultat_realise=resultat)
    tR.save()
    return redirect('/' + nature + '/')


def filter_entities(request):
    institution = Institution.objects.get(id=int(request.POST['institution']))
    sub_value = request.POST['sub_value']
    hierachie = int(request.POST['hierachie'])
    tmp_hierachie = hierachie - 1
    if hierachie <= 0:
        hierachie = 0
        value = '0'
    else:
        entity_type = InsitutionEntities.objects.filter(m_institution=institution,
                                                        m_hierachie=(hierachie - 1)).first().m_entity_type
        entity_type_actual = InsitutionEntities.objects.filter(m_institution=institution,
                                                               m_hierachie=(hierachie)).first().m_entity_type
        enums_list = list()
        enums = entity_type_actual.enum_fields()['result']
        if entity_type_actual.m_enum_values not in ['', None]:
            for val in enums:
                enums_list.append(request.POST["enum_" + val['name']])
        if enums_list != list():
            enums_list = "||".join(enums_list)
        value = request.POST[str(entity_type)]
    # gestionnaire(request,gest_val,gest_id=0,name=None,structure=None,periode=None)
    if value != '0':
        element = Entity.objects.get(id=int(value))
        if enums_list != list():
            response = redirect('/gestionnaire/' + str(tmp_hierachie) + '/' + str(element.id) + '/')
        else:
            response = gestionnaire(request, str(tmp_hierachie), str(element.id), None, None, None, enums_list)
    else:
        response = redirect('/gestionnaire/' + str(hierachie) + '/')
    return response


def search(request):
    if request.user.is_authenticated == True:
        template = "webpages/ctn_bpf/search.html"
        val = request.POST['search']
        context = basis(request)
        searches = list()
        entities = context['actual_institution'].get_entities()
        for e in entities:
            lines = e.m_entity_type.lines()
            hierachie = e.m_hierachie
            def_color = '#00a2c3'
            if e.m_entity_type.is_tache:
                def_color = 'orange'
            for l in lines:
                if val in str(l):
                    searches.append({'nature': 'e', 'label': e, 'value': l, 'hierachie': hierachie, 'color': def_color})

        for s in Structure.objects.filter(nom__contains=val, institution=context['actual_institution']):
            searches.append({'nature': 's', 'label': 'Structure', 'value': s, 'color': '#9012a1'})

        for s in Personnel.objects.filter(nom__contains=val):
            searches.append({'nature': 'p', 'label': 'Personnel', 'value': str(s), 'color': '#12c304'})

        context['searches'] = searches
    else:
        return redirect("/")
    return render(request, template, context)


def search2(request, menu):
    search = request.POST["search"]
    if menu == 'i':
        response = institutions(request, search)
    elif menu == 'p2':
        response = personnels(request, search)
    elif menu == 'p2_RACI':
        response = personnels_raci(request, search)
    elif menu == 'r':
        response = roles(request, search)
    elif menu == 'aN':
        response = alert_notifs(request, search)
    return response


@login_required(login_url='/log_account')
def messages(request):
    template = "webpages/ctn_bpf/search.html"
    context = basis(request)
    context['msg_view'] = True
    results = list()
    personnel = request.user.personnel
    accounted = personnel.operations_accounted()
    bool(accounted)
    """
	for o in Operation.objects.filter():
		if  o.rapported() not in [None,'0'] and o.progression()<100 and context['permissions'] > 0:
			results.append({'value':o,'name':'Operation','link':'o','nature':'r'})
	"""
    for o in accounted:
        if o.rapported() not in [None, '0'] and o.progression() < 100:
            # and context['permissions'] > 0
            results.append({'value': o, 'name': 'Operation', 'link': 'o', 'nature': 'r'})
    entities_type = context['actual_institution'].get_entities()
    nb_observations = 0
    """
	for e in entities_type:
		lines = e.m_entity_type.lines()
		for l in lines :
			if l.is_rapported != True and l.progression() == 100:
				results.append({'value':l,'name':str(l.m_type_entity),'link':'o','nature':'o'})
	"""
    context['msgs'] = True
    paginator_o = Paginator(results, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def bad_pass(request):
    mail = request.POST['mail']
    sent = False
    try:
        subject = "Restauration de Mot de Passe"
        code = ""
        
        for i in range(0, 6):
            code += str(random.randint(0, 9))
        # r_bd_user.set_password('User'+password)
        message = " Entrez ce code pour restaurer votre Compte "
        email = r_perso.mail
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [email, ]
        send_mail(subject, message, email_from, recipient_list, fail_silently=False)
        sent = True
    except:
        pass
    data = {
        'sent': sent
    }
    if sent == True:
        data['code'] = code
    return JsonResponse(data)


def notifs_rapp(request):
    user_id = request.GET.get('value')
    insti_id = request.GET.get('institution')
    insti_id = Institution.objects.get(id=int(insti_id))
    # perso = Personnel.objects.get(bd_user__id=int(user_id))
    operations = Operation.objects.filter(personnel=request.user.personnel)
    # General_Results
    nb_is_rapported = 0
    nb_have_to_report = 0
    nb_observations = 0

    nb_is_rapported2 = 0
    nb_have_to_report2 = 0
    nb_observations2 = 0

    actual_institution = insti_id

    context = basis(request)
    perso = request.user.personnel
    for o in operations:
        if o.etat == '0':
            nb_have_to_report += 1
            if o.institution() == actual_institution:
                nb_have_to_report2 += 1
        elif o.etat == '1':
            nb_is_rapported += 1
            if o.institution() == actual_institution:
                nb_is_rapported2 += 1
    entities_type = insti_id.get_entities()

    nb_observations = Operation.objects.filter(etat='1', accountable=perso).count()

    for e in entities_type:
        lines = e.m_entity_type.lines()
        for l in lines:
            if l.is_rapported != True and l.progression() == 100:
                nb_observations += 1

    personnel = request.user.personnel
    # for o in operations
    """
	for o in accounted:#o.institution() in context['personnel'].all_institutions() and
		if o.progression() < 100 and o.rapported() not in ['0',None]:
			# and context['permissions'] > 0
			nb_observations += 1
	"""
    data = {
        'nb_have_to_report': nb_have_to_report,
        'nb_is_rapported': nb_is_rapported,
        'nb_observations': nb_observations,
        'nb_have_to_report2': nb_have_to_report2,
        'nb_is_rapported2': nb_is_rapported2,
        'nb_observations2': nb_observations2
    }
    return JsonResponse(data)


def valid_observations(request):
    element_id = request.POST["element_id"]
    valid_attributes = request.POST['attributes']

    element = Entity.objects.get(id=int(element_id))
    is_tache = element.m_type_entity.is_tache
    if is_tache:
        element = Tache.objects.get(id=int(element_id))
    element.is_rapported = True
    element.m_reported_fields = valid_attributes
    element.save()
    return redirect('/operations/')


def print_mail_file(request):
    owners = Owner.objects.filter()
    mail_lists = list()
    for o in owners:
        mail_lists.append(o.m_user.email)
    context = {
        'mail_lists': mail_lists
    }
    template = "webpages/ctn_bpf/csv_template.html"
    return render(request, template, context)


def assistance(request):
    template = "webpages/ctn_bpf/assistance.html"
    context = basis(request)
    result = render(request, template, context)
    try:
        if request.session['assistance'] == 1:
            result = redirect('/')
    except:
        pass
    return result


def ajax_restore(request):
    
    r_mail = request.GET.get('mail')
    code = ""
    for i in range(6):
        code += str(random.randint(0, 9))
    message_context = {
        'code': code,
    }
    subject = " "
    message = render_to_string('webpages/ctn_bpf/mails/new_code.html', message_context)
    email = r_mail
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email, ]
    msg = EmailMessage(subject, message, email_from, recipient_list)
    msg.content_subtype = 'html'
    try:
        msg.send()
        send = '0'
    except:
        send = '1'
    data = {
        'code': code,
        'send': send
    }
    return JsonResponse(data)


def restorepass(request):
    mail = request.POST['restore']
    password = request.POST['password']
    user = User.objects.filter(email=mail).first()
    user.set_password(password)
    user.save()
    login(request, user)
    return redirect('/')


def documentation(request):
    document = OperaFile.objects.filter(m_name="DOCU").first().m_file.url
    return redirect(document)


# New Updates
@login_required(login_url='/log_account')
def chaine_indicateurs(request):
    template = "webpages/ctn_bpf/chaine_resultat.html"
    context = basis(request)
    actual_institution = context['actual_institution']
    context['menu'] = 'l'
    context['top_entities'] = actual_institution.top_entity().lines()
    context['this_entities'] = actual_institution.get_entities()
    return render(request, template, context)


def get_indicateur_value(request):
    indicateur = Indicateur.objects.get(id=int(request.GET.get('id_indicateur')))
    fields = indicateur.m_fields
    periodicite = indicateur.m_periodicite
    final_cible = indicateur.m_final_cible
    if final_cible == None:
        final_cible = ""
    cibles = indicateur.m_cibles
    data_verification = indicateur.m_data_verification

    verification_indi = indicateur.m_verification_indi

    data = {
        'obj': indicateur.m_objectif_indi,
        'indicateur': indicateur.m_name,
        'fields': fields,
        'periodicite': periodicite,
        'final_cible': final_cible,
        'cibles': cibles,
        'verification_indi': verification_indi,
        'data_verification': data_verification,
        "data_verificationind": "#",
        'others': "#"
    }
    tmp_verifi = data_verification.split("#")
    if tmp_verifi[0] == "1":
        ind_ve = DataSet.objects.get(id=int(tmp_verifi[1]))
        data["data_verificationind"] = str(ind_ve)
        data["data_verificationind_url"] = "/data_form/" + str(ind_ve.id) + "/0/"
    if indicateur.m_others not in [None, ""]:
        data["others"] = indicateur.m_others
    return JsonResponse(data, safe=False)


def ajax_institution(request):
    sens = request.GET.get('sens')
    devise = request.GET.get('devise')
    institution = request.GET.get('institution')
    institution = Institution.objects.get(id=int(institution))
    if int(sens) == 1:
        institution.default_options = False
    elif int(sens) == 0:
        institution.default_options = True
    elif int(sens) == 3:
        institution.finan_options = None
    elif int(sens) == 2:
        institution.finan_options = devise
    institution.save()
    data = {
        'nada': True
    }
    return JsonResponse(data, safe=False)


# def save_indicateur(request):
#     edit_or_create = request.POST["edit_or_create"]
#     gest_id = request.POST['gest_id']
#     gest_val = request.POST['gest_val']
#     name = request.POST["nature_indicateur"]

#     fields = request.POST["indi_adds"]
#     periodicite = request.POST["periodicite"]
#     periodicite2 = request.POST["periodicite2"]

#     cibles = request.POST["indi_cibls"]
#     type_entity = request.POST["entity_id"]
#     data_verification = request.POST["indi_srcs"]

#     numerateur = request.POST["numerateur"]
#     denominateur = request.POST["denominateur"]

#     objectif_indi = request.POST["objectif_indi"]
#     verification_moyen = request.POST["verification_moyen"] + "#" + request.POST["veri_type"]

#     sources_speci = request.POST["specig_form"]
#     if sources_speci == "1":
#         try:
#             sources_speci += "#" + request.POST["dataSt"]
#         except:
#             pass

#     codes_colors = request.POST["codes_colors"]
#     alerts_modals = request.POST["alert_modals"]
#     others = request.POST["other"]

#     cibles = request.POST["indi_cibls"]
#     coeficient = int(request.POST["coefficient"])

#     unite = request.POST["unite_indicateur"]

#     try:
#         default_calcul = request.POST["default_calcul"]
#     except:
#         default_calcul = 1

#     if edit_or_create == "c":

#         entity = Entity.objects.get(id=int(type_entity))
#         indi = Indicateur(m_name=name, m_fields=fields, m_periodicite=periodicite, m_sub_periodicite=periodicite2,
#                           m_data_verification=data_verification, m_cibles=cibles, m_enti=entity)
#     else:
#         edit_id = request.POST["edit_id"]
#         indi = Indicateur.objects.get(id=int(edit_id))
#         indi.m_name = name
#         indi.m_fields = fields
#         indi.m_periodicite = periodicite
#         indi.m_sub_periodicite = periodicite2
#         indi.m_data_verification = data_verification
#         indi.m_cibles = cibles
#     indi.m_institution = basis(request)["actual_institution"]
#     indi.m_cibles = cibles
#     indi.m_numerateur = numerateur
#     indi.m_denominateur = denominateur
#     indi.m_coefficient = coeficient
#     indi.m_data_verification = sources_speci
#     indi.m_unite = unite

#     indi.objectif_indi = objectif_indi
#     indi.m_colors_code = codes_colors
#     indi.m_verification_indi = verification_moyen
#     indi.alerts_code = alerts_modals
#     indi.m_others = others

#     try:
#         ind.m_secundo_options = request.POST["other_fields"]
#     except:
#         pass
#     if int(default_calcul) == 1:
#         formula = "$" + str(numerateur) + "$" + " * " + str(coeficient) + " /" + "$" + str(denominateur) + "$"
#         indi.m_datalets_calcul = formula
#     indi.save()
#     return redirect('/evaluer/' + gest_val + '/' + gest_id)


# @login_required(login_url='/log_account')
# def evaluer(request, hierachie="0", gest_id=0, search=None, specifi_id=None):
#     context = basis(request)
#     hierachie = int(hierachie)
#     if specifi_id == None:
#         if hierachie != -1:
#             entity = InsitutionEntities.objects.filter(m_hierachie=hierachie, m_institution=context[
#                 'actual_institution']).first().m_entity_type
#         else:
#             entity = InsitutionEntities.objects.filter(m_institution=context['actual_institution']).last().m_entity_type
#         context['entity'] = entity
#         context['hierachie'] = hierachie
#         context['hierachy'] = hierachie
#         if gest_id == 0:
#             elements = entity.lines()
#         else:
#             get_e = Entity.objects.get(id=int(gest_id))
#             context['base_val'] = get_e
#             elements = list(get_e.sub_entities())
#             context['sup_hierachy'] = list()
#             for t in get_e.sup_hierachie():
#                 context['sup_hierachy'].append(t)
#             context['sup_hierachy'].append(get_e)
#
#         if search != None:
#             tmp = elements
#             elements = list()
#             for t in tmp:
#                 if search in t.m_value_fields:
#                     elements.append(t)
#
#     else:
#         a_entity = Entity.objects.get(id=specifi_id)
#         entity = a_entity.m_type_entity
#         context['entity'] = entity
#         context['hierachie'] = hierachie
#         context['hierachy'] = hierachie
#         elements = [a_entity]
#     paginator_o = Paginator(elements, 10)
#     page_number_o = request.GET.get('page')
#     elements_page = paginator_o.get_page(page_number_o)
#     # oeuvres_date
#     dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
#
#     context["indi_options"] = entity.indicateurs
#     try:
#         context["indi_options"][0] == None
#         context["no_secund"] = False
#     except:
#         context["no_secund"] = None
#
#     context['menu'] = 'g'
#     context['g_v'] = 'i2'
#     context['gest_id'] = gest_id
#     context['gest_val'] = hierachie
#     context['gest_val_1'] = hierachie + 1
#     context['pages_o'] = elements_page
#     context['num_pages'] = paginator_o.num_pages
#     context['page_range'] = paginator_o.page_range
#     context['dataelts'] = dataelts
#     context['dataelts2'] = dataelts.exclude(m_default_value=None)
#
#     template = "webpages/ctn_bpf/evaluer.html"
#     return render(request, template, context)


def evaluer_detail(request, gest_id=0):
    return evaluer(request, "0", 0, None, gest_id)


def indic_plus(request, indic_id):
    context = basis(request)
    entity = Entity.objects.get(id=int(indic_id))
    template = "webpages/ctn_bpf/indic_plus.html"
    context['entity'] = entity
    return render(request, template, context)


def data_elements(request):
    context = basis(request)
    entity = Entity.objects.get(id=int(indic_id))
    template = "webpages/ctn_bpf/indic_plus.html"
    context['entity'] = entity
    return render(request, template, context)


def duplicate(request):
    from .utilities2 import duplicate_entity_logic, duplicate_tache, duplicate_entity, duplicate_operation
    generator_d = request.POST['generator_d']
    response = ""
    if generator_d == 'e':
        value = request.POST['dup_id']
        entity = Entity.objects.get(id=int(value))
        link = request.POST['link']
        response = redirect(link)
        # new = int(request.POST['new_dup'])
        new = 0
        try:
            name = request.POST['nom_dup']
            if name in [None, '']:
                name = "#"
        except:
            name = "#"
        try:
            relogic_dup = int(request.POST['relogic_dup'])
        except:
            relogic_dup = 0

        if relogic_dup == 0:
            duplicate_entity(entity, name)
        else:
            duplicate_entity_logic(entity, name)

    elif generator_d == 'o':
        value = request.POST['dup_id']
        entity = Operation.objects.get(id=int(value))
        link = request.POST['link']
        response = redirect(link)  # redirect("/taches/"+str(operation.m_tache.id))
        try:
            name = request.POST['nom_dup']
            if name in [None, '']:
                name = "#"
        except:
            name = "#"
        o2 = duplicate_operation(entity, name)
        o2.tache = entity.tache
        try:
            relogic_dup = (request.POST['reraci_dup'])
            r_personnel = Personnel.objects.get(id=int(request.POST["perso"]))
            r_accountable = Personnel.objects.get(id=int(request.POST["accountable"]))
            r_consulted = Personnel.objects.get(id=int(request.POST["consulted"]))
            r_informed = Personnel.objects.get(id=int(request.POST["informed"]))
            o2.personnel = r_personnel
            o2.accountable = r_accountable
            o2.consulted = r_consulted
            o2.informed = r_informed
        except:
            relogic_dup = 0
        o2.save()

    elif generator_d == 'i':
        values = request.POST['values_d'].split("|")
        response = redirect("/institution/")
        try:
            entity_dup = request.POST['entity_dup']
        except:
            entity_dup = "0"
        for v in values[:-1]:
            ins = Institution.objects.get(id=int(v))
            tmp = ins
            tmp.id = None
            tmp.save()

            # entity Institutions
            ins_entities = InsitutionEntities.objects.filter(m_institution__id=int(v))
            for i in ins_entities:
                tmp11 = i.m_entity_type
                tmp11.id = None
                tmp11.save()
                tmp1 = InsitutionEntities(m_institution=tmp, m_hierachie=i.m_hierachie, m_entity_type=tmp11)
                tmp1.save()
                if entity_dup == '1':
                    for i2 in tmp11.lines():
                        tmp2 = i2
                        tmp2.m_type_entity = tmp11
                        if tmp11.is_tache:
                            tmp3 = Tache.objects.get(id=tmp2.id)
                            tmp3.m_type_entity = tmp11
                        tmp2.id = None
                        tmp3.id = None
                        tmp2.save()
                        tmp3.save()

            # structures
            structures = Structure.objects.filter(institution__id=int(v))
            for i in structures:
                tmp2 = i
                tmp2.id = None
                tmp2.institution = ins
                tmp2.save()

            # aggregates
            aggregates = Aggregate.objects.filter(m_institution__id=int(v)).first()
            if aggregates != None:
                tmp3 = aggregates
                tmp3.id = None
                tmp3.m_institution = ins
                tmp3.save()

            # roles
            roles = Role.objects.filter(actual_institution__id=int(v))
            for r in roles:
                tmp4 = r
                tmp4.id = None
                tmp4.actual_institution = ins
                tmp4.save()
        request.session['new_ins'] = 1
    return response


def print_pdf(request):
    ind = int(request.GET.get('ind'))

    context = basis(request)
    operations = list()
    if ind == 1:
        tmp_ops = Operation.objects.filter()
    elif ind == 2:
        p = request.user.personnel
        tmp_ops = Operation.objects.filter(personnel=p)
    if ind in [1, 2]:
        for t in tmp_ops:
            if t.institution() == context['actual_institution']:
                operations.append(t)
        lines = list()
        taches_lines = list()
        for o in operations:
            tmp_line = str(
                o.tache) + "" + str(
                o) + "" + str(
                o.personnel)
            if o.periodes() != None:
                tmp_line += "" + str(
                    o.periodes().details_periode())
            else:
                tmp_line += "" + " "
            if context['actual_institution'].default_options != True:
                values = o.value_split()
                agr_fields = o.agr_fields()
                i = 0
                for v in agr_fields:
                    if v != 'file':
                        try:
                            tmp_line += "" + str(
                                values[i])
                        except:
                            tmp_line += "" + " "
                    else:
                        tmp_line += "" + " -- "
                    i += 1
                tmp_line += "" + o.status_op()
            lines.append(tmp_line)
    elif ind == 4:
        taches = context['actual_institution'].last_entity().lines()
        lines = list()
        for t in taches:
            hierachie = ""
            for h in t.sup_hierachie():
                hierachie += str(
                    h.get_name()) + ""
            fields = ""
            for f in t.values():
                fields += str(
                    f) + ""
            lines.append(hierachie + fields + str(
                t.progression()) + "" + str(
                t.m_date_modif))
    data = {
        'lines': lines
    }
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def dataelts(request, elt_id=0, elt_str=0):
    context = basis(request)
    context['g_v'] = 'eD'
    if elt_id == 0:
        template = "webpages/ctn_bpf/dataelts.html"
        indicateurs = Indicateur.objects.filter()
        dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
        context['indicateurs'] = indicateurs
        context['dataelts'] = dataelts
        groupe_element=GroupeElement.objects.all()
        context['groupe_element']=groupe_element
    else:
        template = "webpages/ctn_bpf/data_element_id.html"
        dataelt = DataElement.objects.get(id=int(elt_id))
        context["dataelt"] = dataelt
        context["structures"] = Structure.objects.filter(institution=context["actual_institution"])
        if elt_str == 0:
            context["actu_struc"] = context["structures"].first()
        else:
            context["actu_struc"] = Structure.objects.get(id=int(elt_str))
        # lines = dataelt
        tmps = dataelt.element_values(context["actu_struc"])
        periods_tmp = dict()
        p_tmps = list()

        class DEL:
            def __init__(self, e1, e2, e3=0):
                self.sup_period = e1
                self.period = e2
                self.value = e3

            def __repr__(self):
                return self.sup_period

        for t in tmps:
            a = t.m_dataset_value.m_period_value + "-" + t.m_dataset_value.m_sub_period_value
            if a in p_tmps:
                if t.m_value not in ["", None]:
                    periods_tmp[a].value += float(t.m_value)
            else:
                elts = DEL(t.m_dataset_value.m_sub_period_value, t.m_dataset_value.m_period_value, 0)
                if t.m_value not in ["", None]:
                    elts.value = float(t.m_value)
                else:
                    elts.value = 0
                periods_tmp[a] = elts
                p_tmps.append(a)
        context["values"] = list()
        for p in p_tmps:
            context["values"].append(periods_tmp[p])
    # context["values"].group_by = ['designation']
    return render(request, template, context)


@login_required(login_url='/log_account')
def dataelts_edit(request, elt_id):
    template = "webpages/ctn_bpf/dataelts_edit.html"
    context = basis(request)
    indicateurs = Indicateur.objects.filter()
    dataelts = DataElement.objects.filter(id=elt_id).first()
    context['indicateurs'] = indicateurs
    context['dataelts'] = dataelts
    return render(request, template, context)


@login_required(login_url='/log_account')
def dataelts_indic(request):
    template = "webpages/ctn_bpf/dataelts_indic.html"
    context = basis(request)
    context['is_indi'] = True
    context['indicateurs'] = list()
    tmps_is = Indicateur.objects.filter()
    dataelts = DataElement.objects.filter()
    for i in tmps_is:
        enti = i.m_enti
        if enti != None:
            if enti.m_type_entity.get_institution(context['actual_institution']) != None:
                context['indicateurs'].append(i)
    context['dataelts'] = dataelts
    return render(request, template, context)


def ajax_progression(request):
    plannify = request.GET.get("plannify")
    periode = Periode.objects.get(id=int(request.GET.get("periode")))

    year = request.GET.get("year")
    institution = request.GET.get("institution")
    institution = Institution.objects.get(id=int(institution))
    sub_period = institution.default_subperiod

    try:
        mods = request.GET.get("mods")
    except:
        mods = None

    try:
        entity = request.GET.get("entity")
    # entity_type =  request.GET.get("entity_type")
    except:
        entity = None

    progression = 0
    t_plannify = list()

    """
	for t in taches:
		t_plannify.append(t.plannification())
	"""
    result = list()
    if plannify != "#":
        cumulate = int(request.GET.get("cumul1"))  # 1 #Mettre une variable
        nb_ops = 0
        ops = list()
        if entity == None:
            operations = Operation.objects.filter(m_institution=institution)
        else:
            operations = Entity.objects.get(id=int(entity)).operations()
        bool(operations)
        for o in operations:
            ops.append(o)

        try:
            tmp_val = get_period_values(periode, plannify + "_")[0]
        except:
            tmp_val = None

        if tmp_val != None:
            result.append(tmp_val)
            for o in ops:
                if o.m_tache_plannification != None:
                    v = get_period_values(periode, o.m_tache_plannification + "_")
                    cond1 = (cumulate == 0) and int(v[0]) == int(tmp_val)
                    cond2 = (cumulate == 1) and int(v[0]) <= int(tmp_val)
                    if len(v) > 0:
                        if cond1 or cond2:
                            progression += o.progression()
                            nb_ops += 1
                else:
                    pass
        glob_ops = int(request.GET.get("cumul2"))  # 1
        if glob_ops == 1:
            nb_ops = operations.count()
        if nb_ops > 0:
            progression /= nb_ops
    else:
        if mods in [None, "0"]:
            prs = list()
            tops = institution.top_entity().lines()
            plannify_all = request.GET.get("plannify_all")
            plannify_all = plannify_all.split("#")[:-1]
            t_plannify2 = t_plannify
            t_plannify = subperiods_value(periode, year)
            mrd_t = list()
            i_t = 0
            for t in tops:
                mrd_t.append(list())
                for p in t_plannify:
                    mrd_t[i_t].append(0)
                i_t += 1

            i_t = 0

            for to in tops:
                nb_jT = 0
                if to.m_type_entity.is_tache == False:
                    tach = to.taches()
                else:
                    tach = [to]
                ops = list()
                for t in tach:
                    ops += t.operations()
                t_plannify2 = list()
                for a in tach:
                    a = Tache.objects.get(id=a.id)
                    t_plannify2.append(a.plannification())
                j_t = 0
                for p in t_plannify:
                    progression = 0
                    nb_jT = 0
                    nb_ops = 0
                    if p != None:
                        for o in ops:
                            try:
                                v = get_period_values(periode, o.m_tache_plannification + "_")
                                if len(v) > 0:
                                    if int(v[0]) == int(p):
                                        progression += o.progression()
                                    nb_ops += 1
                            except:
                                pass
                        if nb_ops != 0:
                            mrd_t[i_t][j_t] = round(progression / nb_ops, 2)
                        j_t += 1
                i_t += 1
            prs = list()
            j = 0
            for t in mrd_t:
                tmp = ""
                for s in t:
                    tmp += str(s) + "#"
                prs.append(tmp)
        else:
            prs = list()
            tops = institution.top_entity().lines()
            for t in tops:
                result = list()
                operations = t.operations()
                nb_x = len(institution.default_period.decoup_slip()) * len(
                    institution.default_subperiod.decoup_desc_slip())
                if institution.default_period.m_logic_type == 3:
                    chronogrs = ["0_9_9_9_9_", "9_0_9_9_9_", "9_9_0_9_9_", "9_9_9_0_9_", "9_9_9_9_0_"]
                    year = request.GET.get("year")
                    TP1 = subperiods_value(institution.default_period, int(year))
                    TP2 = list()
                    dic_ops = dict()
                    for t in TP1:
                        a = transform_to_plannify(t)
                        TP2.append(a)
                        for c in chronogrs:
                            dic_ops[a + "-" + c] = {
                                "progress": 0,
                                "nb_ops": 0
                            }
                    # operations = operations.filter(m_tache_plannification__in=TP2)

                    for o in operations:
                        dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation][
                            "progress"] += o.progression()
                        dic_ops[o.m_tache_plannification + "-" + o.periodes().m_desc_realisation]["nb_ops"] += 1
                    for a in TP2:
                        for c in chronogrs:
                            if dic_ops[a + "-" + c]["nb_ops"] > 0:
                                tmp = str(dic_ops[a + "-" + c]["progress"] / dic_ops[a + "-" + c]["nb_ops"])
                            else:
                                tmp = "0"
                            result.append(tmp)
                    prs.append("#".join(result))
    # progression /= len(taches)
    data = {
        'plannify': plannify,
        'result': result,
        'progression': round(progression, 2)
    }
    if plannify == "#":
        data['progressions'] = prs
    return JsonResponse(data)


def ajax_calcul_date(request):
    plannify = request.GET.get('plannify')
    periode = Periode.objects.get(id=int(request.GET.get("periode")))
    tmp_val = get_period_values(periode, plannify + "_")[0]

    ta1 = datetime.date(int(tmp_val[:4]), int(tmp_val[4:6]), int(tmp_val[6:8]))
    ta2 = datetime.date(int(tmp_val[8:12]), int(tmp_val[12:14]), int(tmp_val[14:16]))
    ta3 = ta2
    test = ta2.isoweekday()
    if test > 1:
        ta2 -= datetime.timedelta(test - 1)
        ta3 += datetime.timedelta(7 - test)
    test_dates = list()
    for i in range(5):
        test_dates.append("Du " + str(ta2) + " Au " + str(ta3))
        ta2 += datetime.timedelta(7)
        ta3 += datetime.timedelta(7)
    bumps1 = [int(tmp_val[:4]), int(tmp_val[4:6]) - 1, int(tmp_val[6:8])]
    bumps2 = [int(tmp_val[8:12]), int(tmp_val[12:14]) - 1, int(tmp_val[14:16])]
    data = {
        'tmp_val': tmp_val,
        'test_dates': test_dates,
        'ta1': str(ta2),
        'result': tmp_val
    }
    return JsonResponse(data)


def delete_mul(request):
    entities = request.POST["multi_values"]
    hierachy = int(request.POST['hierachy'])
    g_v = request.POST['g_v']
    try:
        g_v_2 = request.POST['g_v_2']
    except:
        g_v_2 = None

    from .utilities2 import delete_entities, delete_operations
    if g_v != "o":
        delete_entities(entities)
        response = '/gestionnaire/' + str(hierachy)
        if g_v_2 is not None:
            response = '/gestionnaire/' + str(hierachy - 1)
            response += '/' + str(g_v_2) + '/'
    else:
        a = delete_operations(entities)
        response = '/taches/' + str(a.id) + '/'
    return redirect(response)


@login_required(login_url='/log_account')
def data_form(request, nature=-1, elt_id=0):
    template = "webpages/ctn_bpf/data_form.html"
    context = basis(request)
    nature = int(nature)
    context["nature"] = nature
    context["elt_id"] = elt_id
    periode_ok = PeriodeOk.objects.all().distinct('annee')
    context['periode_ok'] = periode_ok
    if nature != -1:
        template = "webpages/ctn_bpf/data_form_plus.html"
        dataform = DataSet.objects.filter(id=nature, m_institution=context["actual_institution"]).first()
        context["element"] = dataform
        if dataform != None:
            next_nature = nature + 1
            lines = dataform.dS_values()
        else:
            lines = list()
    else:
        next_nature = 1
        lines = DataSet.objects.filter(m_institution=context["actual_institution"])
        try:
            if context["permissions"] == 0 or context["no_simple_user"] == False:
                # role
                role = request.user.personnel.get_function(context["actual_institution"].id).m_role
                lines = lines.filter(m_roles=role)
        except:
            pass
    paginator_o = Paginator(lines, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context["g_v"] = "dSV"
    context["menu"] = "h"
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range

    return render(request, template, context)


def error_404(request, exception):
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/errors.html"
        context = basis(request)
    else:
        template = "webpages/ctn_bpf/errors_zero.html"
        context = dict()
    context['error'] = 404
    context['exception'] = exception
    return render(request, template, context)


def error_500(request):
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/errors.html"
        context = basis(request)
    else:
        template = "webpages/ctn_bpf/errors_zero.html"
        context = dict()
    return render(request, template, context)


def extra(request, name=""):
    context = basis(request)
    if request.user.is_authenticated:
        template = "webpages/ctn_bpf/extra.html"
        files = OperaFile.objects.filter(m_institution=context["actual_institution"]).select_related("m_institution")
        bool(files)
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None
    else:
        try:
            personnel_opera = settings.PERSONNAL_OPERA
            context["personnel_opera"] = personnel_opera
            if personnel_opera:
                context['actual_institution_name'] = settings.PERSONNAL_INSTITUTION
        except:
            personnel_opera = None
        template = "webpages/ctn_bpf/extra.html"
        files = OperaFile.objects.filter(is_public=1)
        bool(files)
    if name != None:
        tmp1 = files.filter(m_name__contains=name)
        tmp2 = list()  # files.filter(m_file__url__contains=name)
        files = list()
        for t in tmp1:
            files.append(t)
        for t in tmp2:
            files.append(t)
    paginator_o = Paginator(files, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date
    context["g_v"] = "ex"
    context["menu"] = "x"
    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def get_progressions(request):
    list_ids = request.GET.get('list_ids').split("#")[:-1]
    list_ids = [int(i) for i in list_ids]
    entities = Entity.objects.filter(id__in=list_ids)

    result = list()
    data_ids = list()
    type_Progression = request.GET.get("type_progression")
    if type_Progression == "P":
        for i in entities:
            result.append(i.progression())
            data_ids.append(str(i.id))
    elif type_Progression == "T":
        for i in entities:
            result.append(i.technical_progression())
            data_ids.append(str(i.id))
    elif type_Progression == "F":
        for i in entities:
            result.append(i.finan_progression())
            data_ids.append(str(i.id))
    data = {
        'result': result,
        'ids': data_ids
    }
    return JsonResponse(data, safe=False)


def get_indi_data(request):
    data_id = request.GET.get('indi_id')
    ind = Indicateur.objects.get(id=int(data_id))
    nums = list()
    ids = list()
    for i in ind.indi_numerateur():
        nums.append(str(i))
        ids.append(i.id)
    denums = list()
    for i in ind.indi_denum():
        denums.append(str(i))

    period = ind.m_periodicite
    sub_period = ind.m_sub_periodicite
    cibles = ind.m_cibles
    data = {
        'nom': str(ind),
        'nums': nums,
        'denums': denums,
        'ids': ids
    }
    return JsonResponse(data, safe=False)


# def consult_oper(request):
#     operation = Operation.objects.get(id=int(request.POST["operation"]))


#     request.session['new_rapport'] = 2
#     observations = request.POST["observations"]
#     file = request.FILES['file']
#     oC = OperationConsulted(m_operation=operation,m_observations=observations, file=file)

#     oC.save()
#     if request.method == "POST":
#         m_commentaire = request.POST.get('observations')
#         file = request.FILES['file']
#         save_avis = HistoricRACI.objects.create(m_commentaire=m_commentaire, m_role="C",
#                                                 m_operation_id=request.POST["operation"], file=file)
#         save_avis.save()
#     return redirect("/operations/")


@login_required(login_url='/log_account')
def personnels_raci(request, name=None):
    template = "webpages/ctn_bpf/persos_raci.html"
    context = basis(request)
    context['g_vs'] = 'p2'
    context['g_v'] = 'p2_RACI'

    context['searches'] = []
    context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
        actual_institution=context['actual_institution']).select_related('actual_institution')})
    context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
        institution=context['actual_institution']).select_related('institution')})

    ents = list()
    ieS = list(context['actual_institution'].get_entities())
    bool(ieS)
    # n = ieS.count()
    j = 0

    for i in ieS[:-2]:
        if True:
            tmp = {
                "hierachie": i.m_hierachie,
                "label": str(i),
                'entities': list()
            }
            if j == 0:
                tmp["entities"] = ieS[0].m_entity_type.lines()
            ents.append(tmp)
            j += 1
        else:
            pass
    context['ents'] = ents

    # context['matieres'] = ies[-2].lines()

    elements = list()
    tmps = Personnel.objects.filter()
    for t in tmps:
        if context['actual_institution'] in t.all_institutions():
            elements.append(t)

    akas = list()
    tmp_perso = Personnel.objects.filter()
    # pFs = Personnel_Function.objects.filter(m_institution=context["actual_institution"]).values("m_personnel")

    if True:
        for t in tmp_perso:
            if context['actual_institution'] in t.all_institutions():
                atmp = {
                    'id': t.id,
                    'prenom': t.prenom,
                    'nom': t.nom,
                    'photo': t.photo,
                    'get_function': t.get_function(context['actual_institution'].id),
                    'RACI_entities': t.RACI_entities()
                }
                akas.append(atmp)
            # lines2.add(t)
    else:
        context['lines'] = lis_peros

    if name != None:
        name = name.lower()
        tmps = akas
        akas = list()
        context['lines'] = list()
        for tt in tmps:
            ta = (tt["prenom"].lower() + tt["nom"].lower()).split(" ")
            for t in ta:
                if name in str(t):
                    akas.append(tt)
                    break

    paginator_o = Paginator(akas, 10)
    page_number_o = request.GET.get('page')
    elements_page = paginator_o.get_page(page_number_o)
    # oeuvres_date

    context['pages_o'] = elements_page
    context['num_pages'] = paginator_o.num_pages
    context['page_range'] = paginator_o.page_range
    return render(request, template, context)


def data_sets(request, indi_id=0):
    context = basis(request)
    # data_set = DataSet.objects.get(id=indi_id)
    # context['data_set']=data_set
    periode = Periode.objects.all()
    context['periode'] = periode
    indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
    template = "webpages/ctn_bpf/data_sets.html"
    context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
    context["indicateurs"] = indicateurs
    context["menu"] = "h"
    # if indi_id != 0:
    # 	dataset = DataSet.objects.get(id=int(indi_id))
    # 	context["dataset"] = dataset
    """
	context["indicateur"] = indicateur
	context["element"]= indicateur.m_enti
	context["indi_id"] = indi_id
	"""
    return render(request, template, context)


def data_sets_design(request, dS_id):
    data_set = DataSet.objects.get(id=dS_id)
    template = "webpages/ctn_bpf/data_sets_design.html"
    context = basis(request)
    context["dataset"] = data_set
    context["design"] = 1
    return render(request, template, context)


# def ajax_form(request):
#     dF = DataSet.objects.get(id=int(request.GET.get("id_dataset")))
#     # dF = indicateur.dataset()
#     structures = list()
#     structure_id = list()
#     for s in dF.m_structures.filter():
#         structures.append(str(s))
#         structure_id.append(s.id)
#     data = {
#         'periode': dF.periodicite_id,
#         'subperiode': dF.m_sub_periode,
#         'structures': structures,
#         'structures_id': structure_id,
#         'form': dF.m_formulaire
#     }
#     return JsonResponse(data, safe=False)


def ajax_hiera_struc(request):
    institution = request.GET.get("institution")
    logic_strc = request.GET.get("logic_strc")
    m_institution = Institution.objects.get(id=int(institution))
    elt_logic = ""
    for e in logic_strc.split("|")[:-1]:
        a = e.split("#")
        if len(a) > 1:
            elt_logic += a[1] + "|"
        else:
            elt_logic += a[0] + "|"
    structures = Structure.objects.filter(institution=m_institution, values_hierachy__contains=elt_logic)
    data = {
        'ids': list(),
        'names': list()
    }
    data["nb_s"] = elt_logic
    for s in structures:
        data["ids"].append(s.id)
        data["names"].append(str(s))
    return JsonResponse(data, safe=False)


def ajax_RACI_user(request):
    type_RACI = request.GET.get("type_RACI")
    perso = request.GET.get("perso")
    institution = request.GET.get("institution")
    entity_filter = request.GET.get("entity_filter")

    data = dict()
    if type_RACI == "1":
        personnel = Personnel.objects.get(id=int(perso))
        rEL = list()
        data["elts"] = list()
        data["elts_id"] = list()
        data["elts_hierachy"] = list()

        if entity_filter not in ["0", None]:
            entity_filter = int(entity_filter)
            pR = PersonnelRACI.objects.get(id=entity_filter)
            data["elt_actu_id"] = str(pR.m_entity)
            data["elt_actu"] = pR.m_entity.id
        else:
            data["elt_actu_id"] = "#"
            data["elt_actu"] = "#"

        for p in personnel.get_function(institution).m_role.entity_levels():
            rEL.append(str(p))
            data["elts_hierachy"].append(p.m_hierachie)
            tmp_elt = list()
            tmp_id = list()
            for p2 in p.m_entity_type.lines():
                tmp_elt.append(str(p2))
                tmp_id.append(int(p2.id))
            data["elts"].append(tmp_elt)
            data["elts_id"].append(tmp_id)
        data["roles"] = rEL
    # data["test_rEL"] = rEL
    return JsonResponse(data, safe=False)


def ajax_RACI_user_manage(request):
    menu = request.GET.get("menu")
    # entity = Entity.objects.get(id=int(request.GET.get("entity")))
    if menu == "o":
        tache = Tache.objects.get(id=int(request.GET.get("entity")))
        perRACI = tache.personnelRACI()
        data = {
            "responsable": perRACI["responsable"],
            "accounted": perRACI["accounted"],
            "consulted": perRACI["consulted"],
            "informed": perRACI["informed"],
            "test": ""
        }
        allis = ["responsable", "accounted", "consulted", "informed"]
        for s in tache.sup_hierachie():
            all_none = False
            perRACI = s.personnelRACI()
            for al in allis:
                data["test"] += str(perRACI[al]) + "#"
                if data[al] == [None]:
                    all_none = True
                    if perRACI[al] != [None]:
                        data[al] = perRACI[al][1].id
                if all_none == False:
                    break
    return JsonResponse(data, safe=False)


def assign_RACI(request):
    personnel = Personnel.objects.get(id=int(request.POST["perso_assign"]))
    values_assign = request.POST["values_assign"].split("$")
    try:
        operations_check = request.POST["operations_recursive"]
    except:
        operations_check = None
    for v in values_assign[:-1]:
        # entity = Entity.objects.get(id=int(v.split("#")[0]))
        entity = int(v.split("#")[0].replace("'", ""))
        entity = Entity.objects.get(id=entity)
        raci_role = v.split("#")[1]
        if "1" in raci_role:
            if operations_check != None:
                operations = entity.operations()
                rs = raci_role.split("|")
                for o in operations:
                    if rs[0] == "1":
                        o.personnel = personnel
                    if rs[1] == "1":
                        o.accountable = personnel
                    if rs[2] == "1":
                        o.consulted = personnel
                    if rs[3] == "1":
                        o.informed = personnel
                    o.save()
            pR = PersonnelRACI(m_personnel=personnel, m_entity=entity, m_roles=raci_role)

            pR.save()
    return redirect("/personnels_raci/")


def print_pdf(request):
    name_pdf = request.GET.get("name_pdf")
    html = request.GET.get("html")
    html = html.replace("<table", "<table border='1' width='100%' cellpadding='5px'")
    html = html.replace("<td", "<td width='100' ")
    html = html.replace("<th", "<th width='100' ")

    data = dict()

    class MyFPDF(FPDF, HTMLMixin):
        pass

    pdf = MyFPDF()
    pdf.add_page()
    pdf.write_html(html)
    pdf.output('html3.pdf', 'F')
    return JsonResponse(data, safe=False)


@login_required(login_url='/log_account')
def List(request):
    template = "webpages/ctn_bpf/tache_non.html"
    context = basis(request)
    actual_institution = context['actual_institution']
    personnel=Personnel.objects.filter(actual_institution_id=actual_institution)
    context['personnel']=personnel
    operation = Operation.objects.filter(m_institution_id = actual_institution, etat = "0")
    count = Operation.objects.count()
    operation_historic = HistoricRACI.objects.all()
    context['operation_historic'] = operation_historic
    context["operation"] = operation
    context["count"] = count
    return render(request, template, context)
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger

def taches_effectuee(request):
    template = "webpages/ctn_bpf/tache_effectuee.html"
    operation_historic = HistoricRACI.objects.all()
    context = basis(request)
    actual_institution = context['actual_institution'].id
    all_operations = Operation.objects.filter(m_institution_id=actual_institution)

    # Nombre d'éléments par page
    items_per_page = 10
    paginator = Paginator(all_operations, items_per_page)

    page = request.GET.get('page')
    try:
        operations_paginated = paginator.page(page)
    except PageNotAnInteger:
        # Si le paramètre de page n'est pas un entier, afficher la première page
        operations_paginated = paginator.page(1)
    except EmptyPage:
        # Si le paramètre de page est en dehors de la plage, afficher la dernière page de résultats
        operations_paginated = paginator.page(paginator.num_pages)


    context['operations_paginated'] = operations_paginated  # Utilisation des résultats paginés
    context['operation_historic'] = operation_historic
    personnel=Personnel.objects.filter(actual_institution_id = actual_institution)
    context['personnel']=personnel

    return render(request, template, context)



def Avis(request, id):
    #  template="webpages/ctn_bpf/avis_raci.html"
    operation_historic = HistoricRACI.objects.all()
    operation = Operation.objects.get(id=id)
    context = basis(request)
    context['operation_historic'] = operation_historic
    operation_rapport = operation.get_operation_details_invalid().last()
    context["operation_rapport"] = operation_rapport
    try:
        operation = Operation.objects.get(id=id)
        context['operation'] = operation
    except Operation.DoesNotExist:
        context['error_message'] = "operation n'existe pas."
    return render(request, "webpages/ctn_bpf/avis_raci.html", context)


def recuperer_personnel(request):
    result = Personnel.objects.filter(id=request.POST.get('mail')).values('nom', 'prenom', 'tel').first()
    if result is not None:
        return JsonResponse(result)
    else:
        return JsonResponse({'error': 'Aucun enregistrement trouve'})


def design_form(request):
    context = basis(request)
    if request.method == "POST":
        form_name = request.POST['form_name']
        elements = request.POST.getlist('element')
        indicateurs = request.POST.getlist('indicateur')
        periode = request.POST.get('periode')
        sub_periode = request.POST.get('sub_periode')
        
        actual_institution = context['actual_institution'].id
        role = request.POST.getlist('role')
        structure = request.POST.getlist('structure')
        # double = request.POST.get('double','')
        # print("role:",role)
        # print("structure:",structure)
        # print("indicateur:",indicateurs)
        dS = DataSet.objects.create(m_name=form_name, periodicite_id=periode, m_sub_periode=sub_periode,
                                    m_institution_id=actual_institution)

        dS.save()
        dS.m_indicateurs.set(indicateurs)
        dS.m_dataelements.set(elements)
        dS.m_roles.set(role)
        dS.m_indicateurs.set(indicateurs)
        dS.m_structures.set(structure)
        responsemndjn = "/data_sets/design/" + str(dS.id) + "/"
        return redirect(responsemndjn)
def modif_form(request, id):
    context = basis(request)
    if request.method == "POST":
        form_name = request.POST['form_name']
        elements = request.POST.getlist('element')
        indicateurs = request.POST.getlist('indicateur')
     
        #periode = request.POST['periode']
        #sub_periode = request.POST['sub_periode']
        actual_institution = context['actual_institution'].id
        role = request.POST.getlist('role')
        structure = request.POST.getlist('structure')
    

        dS = DataSet.objects.get(pk=id)
        dS.m_name = form_name
        #dS.m_periode = periode
        #dS.m_sub_periode = sub_periode
        dS.m_institution_id = actual_institution
        
        dS.m_indicateurs.set(indicateurs)
        dS.m_dataelements.set(elements)
        dS.m_roles.set(role)
        dS.m_structures.set(structure)

        dS.save()

        response_url = "/data_sets/design/" + str(dS.id) + "/"
        return redirect(response_url)

def edit_dataset(request, id):
    context = basis(request)
    data_set = DataSet.objects.get(id=id)
    context['data_set'] = data_set
    
    # Récupérer toutes les structures de l'institution actuelle
    all_structures = Structure.objects.filter(institution_id=context["actual_institution"])
    context['all_structures'] = all_structures
    
    # Récupérer les structures liées au DataSet
    linked_structures = data_set.m_structures.all()
    context['linked_structures'] = linked_structures
    
    # Récupérer les structures non liées
    unlinked_structures = all_structures.exclude(id__in=linked_structures.values_list('id', flat=True))
    context['unlinked_structures'] = unlinked_structures
    
    element_donnee = data_set.m_dataelements.all()
    context['element_donnee'] = element_donnee
    
    # Récupérer les indicateurs de l'institution actuelle
    indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
    context['indicateurs'] = indicateurs

    # Récupérer les éléments de données
    dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
    context['dataelts']=dataelts
     # Récupérer les éléments de donneequi n'appartiennent pas aux datasets
    unlinked_element = dataelts.exclude(id__in=element_donnee.values_list('id',flat=True))
    context['unlinked_element']=unlinked_element
    valeur_indicateur = data_set.m_indicateurs.all()  
    context['valeur_indicateur'] = valeur_indicateur  
    unlinked_indicateur = indicateurs.exclude(id__in=valeur_indicateur.values_list('id', flat=True))  
    context['unlinked_indicateur'] = unlinked_indicateur
    context["menu"] = "h"
    
    if id != 0:
        dataset = DataSet.objects.get(id=int(id))
        context["dataset"] = dataset

    template = "webpages/ctn_bpf/data_sets_edit.html"
    return render(request, template, context)

# def edit_dataset(request, id):
#     context = basis(request)
#     data_set = DataSet.objects.get(id=id)
#     context['data_set'] = data_set
#     structure = Structure.objects.filter(institution_id=context["actual_institution"])
#     context['structure'] = structure
#     structures = data_set.m_structures.all()
#     context['structures'] = structures
#     indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
#     template = "webpages/ctn_bpf/data_sets_edit.html"
#     context["dataelts"] = DataElement.objects.filter(m_institution=context["actual_institution"])
#     context["indicateurs"] = indicateurs
#     context["menu"] = "h"
#     if id != 0:
#         dataset = DataSet.objects.get(id=int(id))
#         context["dataset"] = dataset

#     return render(request, template, context)


# def count_operations(request):
#     context = basis(request)
#     actual_institution = context['actual_institution']

#     count = Operation.objects.filter(m_institution_id=actual_institution, etat="0").count()
#     return JsonResponse({'count': count})


def count_tache_consulted(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    count_tache_consulted = Operation.objects.filter(perso=personnel_id, etat="0").count()
    return JsonResponse({'count_tache_consulted': count_tache_consulted})


def count_informed(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    count_informed = OperationDetails.objects.filter(request.user.personnel == personnel.id, etat="2").count()

    return JsonResponse({'count_informed': count_informed})
def count_consult(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    personnel=request.user.personnel
    count_consult = Operation.objects.filter(request.user.personnel == personnel.consulted, etat="0").count()

    return JsonResponse({'count_consult': count_consult})

# def Avis_informed(request, id=0):
#     context = basis(request)
#     template = "webpages/ctn_bpf/avis_informed.html"
#     operation = Operation.objects.get(id=int(id))
#     context['operation'] = operation
#     operation_historic = HistoricRACI.objects.all()
#     context['operation_historic'] = operation_historic
#     operation_rapport = operation.get_operation_details_invalid().last()
#     context["operation_rapport"] = operation_rapport
#     return render(request, template, context)


# def tache_consulted(request):
#     context = basis(request)
#     atual_institution = context['actual_institution']
#     operation = Operation.objects.all()
#     context['operation'] = operation
#     operation_historic = HistoricRACI.objects.all()
#     context['operation_historic'] = operation_historic

#     template = "webpages/ctn_bpf/tache_consulted.html"
#     return render(request, template, context)


def edit_data(request, id):
    if request.method == "POST":
        nom_donnee = request.POST['nom_donne']
        data_eltype = request.POST['data_eltype']

        aggregation = request.POST['aggregation']
        comment = request.POST['comment']
        default_value = request.POST['default_value']
        nature_donne = request.POST['nature_donne']
        nicename = request.POST['nicename']
        data_element = DataElement.objects.filter(pk=id)

        data_element.update(nicename=nicename,m_name=nom_donnee, m_value_type=data_eltype, m_aggregation_type=aggregation,
                            m_description=comment, m_default_value=default_value, m_domain_type=nature_donne)
        # save_data.update()
        return redirect('../dataelts')


# def count_persos(request):
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     perso = request.user.personnel.id

#     count_persos = OperationDetails.objects.filter(m_institution_id=actual_institution, etat="2",is_deleted=False).count()
#     return JsonResponse({'count_persos': count_persos})


# def count_accountable(request):
#     context = basis(request)
#     actual_institution = context['actual_institution']
#     perso = request.user.personnel.id
#     operation = Operation.objects.all()
#     m_operation_consulted = Operation.objects.filter(m_institution_id=actual_institution, etat="1").count()
#     return JsonResponse({'m_operation_consulted': m_operation_consulted})


def count_effectuee(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    operation = Operation.objects.all()
    count_effect = Operation.objects.filter(m_institution_id=actual_institution).count()
    return JsonResponse({'count_effect': count_effect})


from django.db.models import Q  # For combining filters

def regroup_consulted(request):
    context = basis(request)  # Assuming this provides institution data
    actual_institution = context.get('actual_institution', None)  # Handle potential absence

    if not actual_institution:
        # Handle case where no institution is found (e.g., return empty data or an error message)
        return JsonResponse({'message': 'No institution found in context'})

    perso = request.user.personnel.id  # Assuming 'personnel' relates to user's personnel ID

    # Combine filters using Q objects for clarity and efficiency
    operations_to_consult = Operation.objects.filter(
        Q(etat=0) | Q(etat=1),  # Operations in states 0 or 1
        consulted=request.user.personnel
    )

    # Count the filtered operations
    operation_count = operations_to_consult.count()

    return JsonResponse({'regroup_consulted': operation_count})

def tach_valid(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    operation_historic=HistoricRACI.objects.all()
    context['operation_historic'] = operation_historic
    operation_details_file=OperationFile.objects.all()
    context['operation_details_file'] = operation_details_file
    operation_detail = Operation.objects.filter(m_institution_id = actual_institution, etat = "2",is_deleted=False)
    context['operation_detail'] = operation_detail
    operation=Operation.objects.all()
    context['operation']=operation
    operation_rapport=OperationRapport.objects.all()
    context['operation_rapport']=operation_rapport
    personnel=Personnel.objects.filter(actual_institution_id = actual_institution)
    context['personnel']=personnel
    template = "webpages/ctn_bpf/tache_valide.html"
    return render(request,template,context)

def archive(request,id):
    operation_detail = Operation.objects.get(id=id)
    operation_detail.is_deleted = True
    operation_detail.save()
    return redirect('../tache_valide')

def restore(request,id):
    operation_detail = Operation.objects.get(id=id)
    operation_detail.is_deleted = False
    operation_detail.save()
    return redirect('../tache_archive')


def archive_list(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    operation_detail = Operation.objects.filter(m_institution_id = actual_institution, etat = "2",is_deleted=True)
    context['operation_detail']=operation_detail
    operation_historic=HistoricRACI.objects.all()
    context['operation_historic'] = operation_historic

    template="webpages/ctn_bpf/tache_archive.html"
    return render(request,template,context)

def error_page(request):
    context=basis(request)
    template="webpages/ctn_bpf/error_page.html"
    return render(request,template,context)

def count_restored(request):
    context = basis(request)
    actual_institution = context['actual_institution']
    perso = request.user.personnel.id
    operation = Operation.objects.all()
    count_restore = Operation.objects.filter(m_institution_id=actual_institution, etat="2", is_deleted=True).count()
    return JsonResponse({'count_restore': count_restore})
from django.core.exceptions import ValidationError
from django.shortcuts import render, redirect
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.core.mail import EmailMultiAlternatives
from django.conf import settings
from django.contrib import messages
from django.db import IntegrityError
from .models import HistoricRACI, OperationRapport, Operation

def send_email(subject, message_plain, message_html, recipient_list):
    mail = EmailMultiAlternatives(subject, message_plain, settings.EMAIL_HOST_USER, recipient_list)
    mail.attach_alternative(message_html, 'text/html')
    mail.send()

def save_comment(request):
    if request.method == "POST":
        try:
            # Validation des saisies
            required_fields = ['commentaire']  # Supprimer 'file' de la liste des champs obligatoires
            if not all(request.POST.get(field) for field in required_fields):
                raise ValidationError("Un ou plusieurs champs obligatoires sont manquants.")

            operation_id = int(request.POST.get('operation_id'))

            # Enregistrer le commentaire et l'opération
            date = datetime.datetime.now()
            mail = request.POST.get('email')
            commentaire = request.POST.get('commentaire')
            role = request.POST.get('role')

            # Vérifier si un fichier est joint
            file_uploaded = request.FILES.get('file')
            file_to_save = file_uploaded if file_uploaded else None

            save_comment = HistoricRACI.objects.create(
                mail=mail,
                m_date_realisation=date,
                m_commentaire=commentaire,
                m_operation_id=operation_id,
                m_role=role,
                file=file_to_save
            )

            # Vérifier si le champ 'file' est présent avant de l'enregistrer
            if file_uploaded:
                operation_rapport = OperationRapport.objects.create(
                    piece_jointe=file_uploaded,
                    commentaire=commentaire,
                    operation_id=operation_id
                )


            # Envoyer un email
            operation = Operation.objects.get(pk=operation_id)
            subject = f"Commentaire pour l'opération '{operation.nom}'"
            message_html = render_to_string('webpages/ctn_bpf/email/comment.html', {'commentaire': commentaire, 'email': mail})
            message_plain = strip_tags(message_html)
            recipient_list = [save_comment.mail]

            send_email(subject, message_plain, message_html, recipient_list)
            messages.success(request,'Le commentaire a ete envoye avec succes!')

        except Exception as e:
            messages.error(request, f"Une erreur s'est produite : {str(e)}")

    return redirect('/')  # Rediriger vers une vue spécifique après le traitement du formulaire
def file(request,id):
    upload_file=HistoricRACI.objects.get(id=id)
    response =HttpResponse(upload_file.file,content_type="application/force-download")
    response['Content-Disposition'] = f'attachment; filename="{upload_file.file.name}"'

    return response


def Avis_Informed(request):
    if request.method == "POST":
        operation_id = request.POST['operation']
        nb_stars = request.POST.get("nb_stars")
        observations = request.POST["observations"]
        email1= request.POST['email1']
        email2 = request.POST['email2']
        email3 = request.POST['email3']
        email4 = request.POST['email4']


        if not operation_id.isdigit():
            return HttpResponse("Identifiant d'operation invalide.")

        operation = Operation.objects.get(id=operation_id)

        oCo = OperationConsulted.objects.create(email2=email2, email3=email3, email4=email4, email1=email1, m_operation_id=operation_id, m_observations=observations)

        subject = f"Accusee De Reception pour l'operation '{operation.nom}'"
        message_html = render_to_string('webpages/ctn_bpf/email/Avis.html', {'observations': oCo.m_observations,'nb_stars':nb_stars,'email1':email1})
        message_plain = strip_tags(message_html)
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [oCo.email1, oCo.email2, oCo.email3]  # Liste des destinataires

        send_mail(
            subject,
            message_plain,
            email_from,
            recipient_list,
            html_message=message_html
        )

        return redirect('/operations')

def edit_personnel(request,id):
    context=basis(request)
    fields_personnel = ['', 'Nom', 'Prenom', 'Adresse Mail', 'Structure', 'Fonction', 'sexe']
    fields_roles = ['Role', 'Description', 'Entite']
    personnel=Personnel.objects.get(id=id)
    context['personnel']=personnel
    actual_institution = context['actual_institution']
    roles = Role.objects.filter(actual_institution=context['actual_institution'], is_simple_user=1).select_related(
        'actual_institution')

    if search != None:
        roles = roles.filter(nom__contains=search)
    context['entity'] = 'Utilisateur Simple'
    context['fields1'] = fields_personnel
    context['personnel'] = personnel
    context['fields'] = fields_roles
    context['lines'] = roles
    context['g_v'] = 'r'
    context['g_vs'] = 'u2'
    context['searches'] = []
    context['searches'].append({'label': 'Fonction', 'values': Role.objects.filter(
        actual_institution=context['actual_institution']).select_related('actual_institution')})
    context['searches'].append({'label': 'Structure', 'values': Structure.objects.filter(
        institution=context['actual_institution']).select_related('institution')})

    template="webpages/ctn_bpf/personnel_edit.html"
    return render(request,template,context)
from django.contrib import messages

def edit_form(request, id):
    context=basis(request)
    if request.method == "POST":
        nom = request.POST['nom']
        prenom = request.POST['prenom']
        tel = request.POST['tel']
        mail = request.POST['mail']
        #r_structure = request.POST['Structure']
        #r_function =  request.POST['Function']
        r_role = request.POST['Fonction']
        r_role = Role.objects.get(id=int(r_role))
        r_structure = request.POST['Structure']

        r_structure = Structure.objects.get(id=int(r_structure))

        personnel = Personnel.objects.filter(pk=id).first()
        #structure = Personnel_Structure.objects.filter(pk=id).first()
        #function  = Personnel_Function.objects.filter(pk=id).first()


        if request.FILES:
            file = request.FILES['file']
            personnel.photo = file

            # VÃ©rifier si l'ancienne photo existe avant de la supprimer
            if personnel.photo and os.path.isfile(personnel.photo.path):
                os.remove(personnel.photo.path)

        personnel.nom = nom
        personnel.prenom = prenom
        personnel.tel = tel
        personnel.mail = mail
        ps = Personnel_Structure(m_personnel=personnel, m_structure=r_structure)
        ps.save()
        pf = Personnel_Function.objects.filter(m_personnel=personnel,
                                                   m_institution=context['actual_institution']).first()

        pf = Personnel_Function(m_personnel=personnel, m_role=r_role,
                                        m_institution=context['actual_institution'])
        pf.save()
        #function.m_role_id=r_function
        #structure.m_structure_id=structure
        #function.save()
        #structure.save()
        personnel.save()

        messages.success(request, "Personnel updated successfully")
        return redirect('/personnels/')
import hashlib
def recup_password(request):




    if request.method == "POST":


        email = request.POST['email']
        request.session['reset_email'] = email
        hashed_email = hashlib.md5(email.encode()).hexdigest()[:8]
        # print(request.session['reset_email'])

        try:
            user = User.objects.get(email=email)

            request.session.set_expiry(60)

            subject = "Reinitialisation Du Mot De Passe"
            message_html = render_to_string('webpages/ctn_bpf/email/Reinitialisation.html',{'hashed_email': hashed_email,'email': email})
            message_plain = strip_tags(message_html)
            email_from = settings.EMAIL_HOST_USER
            recipient_list = [request.POST['email']]

            send_mail(
                subject,
                message_plain,
                email_from,
                recipient_list,
                html_message=message_html
            )
            messages.info(request, "Consultez Votre Boite E-mail pour Poursuivre Votre Reinitialisation")



            return redirect('/bad_auth/')

        except User.DoesNotExist:
            return redirect('/')


def verify(request,email):
    context=basis(request)
    template="webpages/ctn_bpf/verify.html"
    return render(request,template,context,)

def verify_code(request):
    context = basis(request)
    template= "webpages/ctn_bpf/new_password.html"
    if request.method == "POST":
        code = request.POST['code']
        try:
            user = User.objects.get(first_name=code)
            return redirect('/new_password')
        except User.DoesNotExist:
            return redirect('/')
def new_password(request):
    context = basis(request)
    template = "webpages/ctn_bpf/new_password.html"
    return render(request,template,context)
from django.contrib import messages
from django.contrib.auth.hashers import make_password

def save_password(request):
    if request.method == "POST":
        password = request.POST['password']
        retyped_password = request.POST['retyppassword']

        if password == retyped_password:
            # Hachez le mot de passe avant de l'enregistrer
            hashed_password = make_password(password)

            email =   request.session['reset_email']  # Récupérez l'adresse e-mail de l'utilisateur depuis les paramètres
            try:
                user = User.objects.get(email=email)  # Récupérez l'utilisateur à partir de son adresse e-mail
                user.set_password(password)  # Modifiez le mot de passe de l'utilisateur
                user.save()
                messages.info(request,'Bravo Veuillez a Present vous connecter avec le nouveau mot de passe')
                return redirect('/log_account/')
                # Enregistrez les modifications dans la base de données
                return HttpResponse("Mot de passe enregistré avec succès")
            except User.DoesNotExist:
                return HttpResponse("Aucun utilisateur trouvé avec cette adresse e-mail")
        else:
            messages.error(request, 'Les mots de passe ne correspondent pas')
            return HttpResponse("les mots de passe de correspondent pas")

def import_from_excel(request):
    if request.method == 'POST':
        excel_file = request.FILES['excel_file']
        wb = load_workbook(excel_file)
        ws = wb.active
        context=basis(request)
        actual_institution = context['actual_institution'].id
        for row in ws.iter_rows(min_row=2, values_only=True):
            nom, prenom, email,tel = row
            Personnel.objects.create(nom=nom, prenom=prenom, mail=email,tel=tel,actual_institution_id=actual_institution)

        return redirect('/personnels/')

def tache_attente(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    operation_historic = HistoricRACI.objects.all()
    operation = Operation.objects.filter(m_institution_id=actual_institution, etat="1")
    personnel=Personnel.objects.filter(actual_institution_id=actual_institution)
    template = "webpages/ctn_bpf/tache_attente.html"

    context['operation_historic'] = operation_historic  # Ajout des données de historic_raci au contexte
    context['operation'] = operation
    personnel=Personnel.objects.filter(actual_institution=actual_institution.id)
    context['personnel']=personnel
    return render(request, template, context)
def historique(request):
    template="webpages/ctn_bpf/history.html"
    context=basis(request)
    actual_institution = context['actual_institution']
    operation_file=OperationFile.objects.all()
    context['operation_file']=operation_file
    operation_rapport=OperationRapport.objects.all()
    context['operation_rapport']=operation_rapport
    operation_historic=HistoricRACI.objects.all()
    context['operation_historic']=operation_historic
    operation=Operation.objects.filter(etat="2",m_institution_id=actual_institution)
    personnel=Personnel.objects.filter(actual_institution_id = actual_institution)
    context['personnel']=personnel
    context['operation']=operation
    return render(request,template,context)


import imaplib
import email



def message(request):
    # Remplacez 'votre_adresse_email@gmail.com' par votre adresse e-mail Gmail
    username = 'dairounjankouo2019@gmail.com'

    # Remplacez 'votre_mot_de_passe' par votre mot de passe Gmail
    password = 'jpkoslmepqidixqr'

    mail = imaplib.IMAP4_SSL('imap.gmail.com')
    mail.login(username, password)
    mail.select('inbox')

    typ, data = mail.search(None, '(FROM "operaplusbeinfos@gmail.com")')
    emails = []
    for num in data[0].split()[-5:]:  # Limiter à récupérer seulement les 5 derniers messages
        typ, data = mail.fetch(num, '(RFC822)')
        raw_email = data[0][1]
        msg = email.message_from_bytes(raw_email)

        # Récupération des informations de l'e-mail
        sujet = msg['Subject']
        expéditeur = msg['From']
        date = msg['Date']

        # Ajouter les informations de l'e-mail à la liste d'e-mails
        emails.append({
            'sujet': sujet,
            'expéditeur': expéditeur,
            'date': date
        })

    mail.close()
    mail.logout()

    context=basis(request)

    template = "webpages/ctn_bpf/messages.html"
    return render(request, template, context)

import mimetypes

def View_file(request, id):
    try:
        upload_file = OperationRapport.objects.get(id=id)

        if not upload_file.piece_jointe:
            messages.error(request, "Aucun fichier associé à cet objet.")
            return redirect('/historique/')

        # Lire le contenu du fichier
        file_content = upload_file.piece_jointe.read()

        # Déterminer le type de contenu en fonction de l'extension du fichier
        content_type, _ = mimetypes.guess_type(upload_file.piece_jointe.name)

        # Si le type de contenu n'est pas déterminé, définir un type de contenu par défaut
        if not content_type:
            content_type = 'application/octet-stream'

        # Créer une réponse pour afficher le contenu du fichier
        response = HttpResponse(file_content, content_type=content_type)

        return response
    except OperationRapport.DoesNotExist:
        messages.error(request, "Le fichier demandé n'a pas été trouvé.")
        return redirect('/historique/')
def rejet_rapport(request, id):
    if request.method == 'POST':
        try:
            new_etat = 0
            operation = get_object_or_404(Operation, id=id)
            operation.etat = new_etat
            operation.save()

            operation_details = OperationDetails.objects.filter(m_operation_id=operation)
            for detail in operation_details:
                detail.etat = new_etat
                detail.save()

            operation_rapport = OperationRapport.objects.filter(operation_id=operation)
            operation_rapport.delete()

            history_raci = HistoricRACI.objects.create(m_operation_id=operation.id, m_role="C", m_commentaire=request.POST['commentaire'])
            history_raci.save()

        except ObjectDoesNotExist as e:
            # Gérer l'exception ObjectDoesNotExist
            messages.error(request,'Erreur Survenue Dans le systeme')

        except Exception as e:
            # Gérer d'autres exceptions non prévues
            messages.error(request,'Erreur Survenue Dans le systeme')

        return redirect('/')




def View_file_operation(request, id):
    try:
        upload_file = OperationFile.objects.get(id=id)

        if not upload_file.m_file:
            messages.error(request, "Aucun fichier associé à cet objet.")
            return redirect('/historique/')

        # Lire le contenu du fichier
        file_content = upload_file.m_file.read()

        # Déterminer le type de contenu en fonction de l'extension du fichier
        content_type, _ = mimetypes.guess_type(upload_file.m_file.name)

        # Si le type de contenu n'est pas déterminé, définir un type de contenu par défaut
        if not content_type:
            content_type = 'application/octet-stream'

        # Créer une réponse pour afficher le contenu du fichier
        response = HttpResponse(file_content, content_type=content_type)

        return response
    except OperationRapport.DoesNotExist:
        messages.error(request, "Le fichier demandé n'a pas été trouvé.")
        return redirect('/historique/')





def download_files(request,id):
    try:
        upload_file = HistoricRACI.objects.get(id=id)

        if not upload_file.file:
            messages.error(request, "Aucun fichier associé à cet objet.")
            return redirect('/tache_effectuee/')

        # Lire le contenu du fichier
        file_content = upload_file.file.read()

        # Déterminer le type de contenu en fonction de l'extension du fichier
        content_type, _ = mimetypes.guess_type(upload_file.file.name)

        # Si le type de contenu n'est pas déterminé, définir un type de contenu par défaut
        if not content_type:
            content_type = 'application/octet-stream'

        # Créer une réponse pour afficher le contenu du fichier
        response = HttpResponse(file_content, content_type=content_type)

        return response
    except OperationRapport.DoesNotExist:
        messages.error(request, "Le fichier demandé n'a pas été trouvé.")
        return redirect('/tache_effectuee/')



from django.shortcuts import redirect
from django.contrib import messages

# ... other imports

def load_file(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    if request.method == 'POST':
        try:
            excel_file = request.FILES['file']
            ins = request.POST['institution']
            wb = load_workbook(excel_file)
            ws = wb.active

            errors = []
            for row in ws.iter_rows(min_row=2, values_only=True):
                try:
                    nom, designation = row  # Unpack fields
                    Structure.objects.create(nom=nom, designation=designation, institution_id=ins)
                except ValueError as e:
                    errors.append(f"Row {row[0]}: {e}")  # Append error message

            if errors:
                messages.error(request, "Errors found in Excel file:")
                for error in errors:
                    messages.error(request, error)
                return redirect('/structures/')  # Redirect with error messages

            messages.success(request, "Toute Les Structures ont ete chargés avec succes!")
            return redirect('/structures/')

        except Exception as e:  # Catch general errors
            messages.error(request, f"Erreur Veuillez Uploader un fichier compatible: {e}")
            return redirect('/structures/')

    return redirect('/structures/')



def load_entity(request):
    context = basis(request)
    actual_institution = context['actual_institution']

    if request.method == 'POST':
        try:
            excel = request.FILES['file']
            entity = request.POST['entity']
            wb = load_workbook(excel)
            ws = wb.active

            errors = []
            for row in ws.iter_rows(min_row=2, values_only=True):
                try:
                    nom = row # Unpack fields
                    Entity.objects.create(m_value_fields=nom, m_type_entity_id=entity)
                except ValueError as e:
                    errors.append(f"Row {row[0]}: {e}")  # Append error message

            if errors:
                messages.error(request, "Errors found in Excel file:")
                for error in errors:
                    messages.error(request, error)
                return redirect('/gestionnaire/0/')  # Redirect with error messages

            messages.success(request, "Toute Les Entite ont ete chargés avec succes!")
            return redirect('/gestionnaire/0/')

        except Exception as e:  # Catch general errors
            messages.error(request, f"Erreur Veuillez Uploader un fichier compatible: {e}")
            return redirect('/gestionnaire/0/')

    return redirect('gestionnaire/0/')


def licences(request):
    context = basis(request)
    owner=Owner.objects.all()
    context['owner']=owner
    user = User.objects.all()
    context['user']=user
    template="webpages/ctn_bpf/licence.html"
    return render(request,template,context)


import string

def add_license(request):
    if request.method == "POST":
        date_expiration = request.POST['date_expiration']
        date_debut = request.POST['date_debut']
        id_user = request.POST['id_utilisateur']
        nbre_institution = request.POST['nbre_institution']

        # Générer un code de licence aléatoire de 9 chiffres
        code = ''.join(random.choices(string.digits, k=9))

        # Enregistrer le code de licence en base de données
        owner = Owner.objects.create(m_code=code, m_type=nbre_institution, m_user_id=id_user)
        owner.save()

        messages.success(request, 'La licence a été générée avec succès')
        return redirect('/licences/')
from django.contrib.auth.hashers import PBKDF2PasswordHasher
from django.contrib import messages
from django.shortcuts import render, redirect

def add_users(request):
    if request.method == "POST":
        email = request.POST['email']
        nom = request.POST['nom']
        prenom = request.POST['prenom']
        password = request.POST['password']

        try:
            hasher = PBKDF2PasswordHasher()
            hashed_password = hasher.hash_password(password)

            user = User.objects.create(password=hashed_password, first_name=nom, last_name=prenom, email=email)
            user.save()
            messages.info(request, "Utilisateur créé avec succès")
            return redirect('/')
        except ValidationError as e:
            messages.error(request, e.messages)
            return render(request, 'webpages/ctn_bpf/error_page.html', {'errors': e.messages})
        except IntegrityError as e:
            if "unique_email" in e.args[0]:
                messages.error(request, "L'email est déjà utilisé.")
            else:
                messages.error(request, "Une erreur est survenue lors de la création de l'utilisateur.")
            return render(request, 'webpages/ctn_bpf/error_page.html')
        except Exception as e:
            messages.error(request, "Une erreur est survenue lors de la création de l'utilisateur.")
            return render(request, 'webpages/ctn_bpf/error_page.html')

    return render(request, '/')



def archive_doc(request):
    template='webpages/ctn_bpf/archive.html'
    context=basis(request)
    actual_institution=context['actual_institution']
    categorie=Categorie.objects.filter(institution_id=actual_institution)
    context['categorie']=categorie
    archive=Archive.objects.filter(
        institution_id=actual_institution)
    context['archive']=archive
    personnel=Personnel.objects.filter(actual_institution_id = actual_institution)
    sous_categorie= Sous_categorie.objects.filter(institution_id=actual_institution)
    context['sous_categorie']=sous_categorie
    context['personnel'] = personnel

    return render(request,template,context)


def add_categorie(request):

    if request.method =="POST":
        nom = request.POST['nom']
        context=basis(request)
        actual_institution=context['actual_institution']

        add_categorie=Categorie.objects.create(nom=nom,institution_id=actual_institution.id)
        add_categorie.save()
        return redirect('/archive_doc/')
def add_archive(request):
    context = basis(request)  # Assurez-vous que la fonction basis est correctement définie
    if request.method == "POST":
        titre = request.POST.get('titre')
        auteur = request.POST.get('auteur')
        categorie_id = request.POST.get('categorie_id')
        format_document = request.POST.get('format')
        upload_file = request.FILES.get('upload_file')  # Utilisez request.FILES.get pour les fichiers
        description = request.POST.get('description')
        sous_categorie_id = request.POST.get('sous_categorie')
        provenance = request.POST.get('provenance')
        source_financement = request.POST.get('source_financement')
        is_public = request.POST.get('is_public')

        # categorie = Categorie.objects.get(pk=categorie_id)
        # sous_categorie= Sous_categorie.objects.get(pk=sous_categorie_id)
        categorie = Categorie.objects.get(pk=categorie_id)


        categorie_nom = categorie.nom


        if not categorie_id:
            messages.error(request, 'Veuillez renseigner le champ "categorie"')
            return render(request, 'webpages/ctn_bpf/archive.html', context)

        taille = upload_file.size if upload_file else 0
        unite = 'Mo' if taille < 1048576 else 'Go'
        taille = taille / 1048576 if unite == 'Go' else taille / 1024

        actual_institution = context['actual_institution'].id  # Assurez-vous que context est défini
        date_enregistrement = datetime.date.today()
        index_value = f"{date_enregistrement}_{source_financement}_{provenance} {description}_{provenance}_{categorie_nom}_"
        save_archive = Archive.objects.create(
            titre=titre,
            auteur=auteur,
            categorie_id=categorie_id,
            format_fichier=format_document,
            description=description,
            institution_id=actual_institution,
            date_enregistrement=date_enregistrement,
            taille=taille,
            unite=unite,
            sous_categorie_id=sous_categorie_id,
            provenance= provenance,
            source_financement=source_financement,
            index = index_value,
            is_public= True


        )

        if upload_file:
            save_archive.file = upload_file

        save_archive.save()
        messages.success(request, 'Document archivé avec succès')
        return redirect('/archive_doc/')  # Utilisez return pour renvoyer la réponse

    return render(request, 'webpages/ctn_bpf/archive.html', context)  # Assurez-vous de renvoyer le contexte approprié à votre template
import requests
from django.core.files.storage import FileSystemStorage
from django.conf import settings
from requests.auth import HTTPBasicAuth
import time

def convert_word_to_pdf(file_path):
    """Convertit un fichier Word en PDF avec Zamzar et enregistre le PDF généré localement."""

    ZAMZAR_API_KEY = "408eb9b83748cda610d5430a42d6c2b5c6e9eba9"
    ZAMZAR_ENDPOINT = "https://api.zamzar.com/v1/jobs"

    headers = {
        "Authorization": "Bearer " + ZAMZAR_API_KEY,
    }
    files = {
        "source_file": open(file_path, "rb"),
    }
    data = {
        "target_format": "pdf",
    }

    response = requests.post(ZAMZAR_ENDPOINT, headers=headers, files=files, data=data)

    if response.status_code == 201:
        # Récupérer l'ID de la tâche à partir de la réponse
        job_id = response.json()["id"]

        # Attendre que la conversion soit terminée
        while True:
            job_response = requests.get(f"https://api.zamzar.com/v1/jobs/{job_id}", headers=headers)
            if job_response.json()["status"] == "successful":
                download_url = None
                for target_file in job_response.json()["target_files"]:
                    if target_file["format"] == "pdf":
                        download_url = target_file["download_url"]
                        break
                if download_url:
                    # Télécharger le fichier PDF localement
                    local_filename = "C://nom_du_fichier.pdf"  # Spécifiez le chemin et le nom du fichier local
                    with requests.get(download_url, stream=True) as r:
                        r.raise_for_status()
                        with open(local_filename, 'wb') as f:
                            for chunk in r.iter_content(chunk_size=8192):
                                if chunk:
                                    f.write(chunk)
                    return "Conversion réussie. Le fichier PDF a été enregistré localement sur le disque C."
                else:
                    raise Exception("Aucun fichier PDF trouvé dans la réponse de la tâche de conversion.")
            elif job_response.json()["status"] == "failed":
                raise Exception("La conversion a échoué.")
            else:
                time.sleep(5)  # Attendre 5 secondes avant de vérifier à nouveau le statut de la conversion
    else:
        # Erreur de conversion
        raise Exception("Erreur de conversion Zamzar: " + str(response.status_code))

def convert_to_pdf(request):
    if request.method == "POST":
        uploaded_file = request.FILES['file']
        fs = FileSystemStorage()
        file_name = fs.save(uploaded_file.name, uploaded_file)
        file_path = fs.path(file_name)

        zamzar_id = convert_word_to_pdf(file_path)

        # Gérer la conversion et afficher les résultats à l'utilisateur
        messages.success(request,'fichier converti avec succes')

    return render(request, 'webpages/ctn_bpf/archive.html')


from django.utils import timezone
def download(request,id):
    try:
        upload_file = Archive.objects.get(id=id)

        if not upload_file.file:
            messages.error(request, "Aucun fichier associé à cet objet.")
            return redirect('/archive_doc/')

        # Lire le contenu du fichier
        file_content = upload_file.file.read()

        # Déterminer le type de contenu en fonction de l'extension du fichier
        content_type, _ = mimetypes.guess_type(upload_file.file.name)

        # Si le type de contenu n'est pas déterminé, définir un type de contenu par défaut
        if not content_type:
            content_type = 'application/octet-stream'

        # Créer une réponse pour afficher le contenu du fichier
        response = HttpResponse(file_content, content_type=content_type)
        if request.user.is_authenticated:
            user_id = request.user.id
        consultation_entry = ConsultationLog.objects.create(
        document_id=upload_file.id,
        user_ip=request.META.get('REMOTE_ADDR'),
        user_id_id=user_id,
        consultation_datetime=timezone.now()
    )
        return response
    except Archive.DoesNotExist:
        messages.error(request, "Le fichier demandé n'a pas été trouvé.")
        return redirect('/archive_doc/')
import requests
from django.shortcuts import render, redirect
from django.http import StreamingHttpResponse

def ma_vue(request):
  if request.method == "POST":
    url = request.POST["url"]

    try:
      response = requests.get(url, stream=True)  # Définir stream=True pour les fichiers volumineux
      response.raise_for_status()

      # Obtenir le nom du fichier à partir des en-têtes de la réponse (si disponible)
      filename = response.headers.get('Content-Disposition', None)
      if filename:
        filename = filename.split('filename=')[-1].strip('"')  # Extraire le nom du fichier de l'en-tête

      # Créer un StreamingHttpResponse pour une gestion efficace du téléchargement
      file_response = StreamingHttpResponse(response.content, content_type=response.headers['Content-Type'])
      if filename:
        # Définir l'en-tête Content-Disposition avec le nom du fichier extrait pour les navigateurs
        file_response['Content-Disposition'] = f'attachment; filename="{filename}"'
      return file_response

    except requests.exceptions.RequestException as e:
      # Gérer les erreurs de téléchargement de manière élégante
      return render(request, "webpages/ctn_bpf/archive.html", {"error_message": str(e)})

  else:
    # Afficher le formulaire
    return render(request, "webpages/ctn_bpf/archive.html")




# def upload_fichier(request):
#     if request.method == 'POST':
#         form = FileUploadForm(request.POST, request.FILES)
#         if form.is_valid():
#             fichier = form.cleaned_data['fichier']
#             taille = fichier.size
#             unite = 'Mo'
#             if taille >= 1048576:
#                 taille = taille / 1048576
#                 unite = 'Go'
#             mon_fichier = MonFichier(fichier=fichier, taille=taille, unite=unite)
#             mon_fichier.save()
#             return HttpResponseRedirect('/')
#     else:
#         form = FileUploadForm()
#     return render(request, 'upload_fichier.html', {'form': form})
# Utilisez ce code avec préca



def drop_categorie(request, id):
    categorie = get_object_or_404(Categorie, id=id)
    archives = Archive.objects.filter(categorie_id=categorie)

    if archives.exists():
        messages.error(request,'cette categorie contient des archives dont ne peut etre retiré')
        return redirect('/archive_doc/')
    else:
        categorie.delete()
        messages.success(request,'Categorie Retiré Avec succès')
        return redirect('/archive_doc/')



def edit_categorie(request, id):
    template="webpages/ctn_bpf/sous-categorie.html"
    context = basis(request)
    categorie = Categorie.objects.get(id=int(id))
    context['categorie']=categorie
    return render(request,template,context)




def add_souscategory(request):
    if request.method == "POST":
        actual_institution=request.POST['institution_id']
        sous_categorie = request.POST['sous_categorie']
        categorie_id = request.POST['categorie_id']
        sous_categorie= Sous_categorie.objects.create(nom=sous_categorie,categorie_id=categorie_id,institution_id=actual_institution)
        sous_categorie.save
        messages.success(request,'Sous-Categorie Ajoute Avec Succes')
        return redirect('/archive_doc/')



def get_categorie(request):
    selected_id = request.GET.get('id')  # Récupérer l'ID de la période sélectionnée depuis la requête

    # Récupérer les informations de la table periodeok en fonction de l'ID de la période sélectionnée
    sous_categorie = Sous_categorie.objects.filter(categorie_id=selected_id).values('id', 'nom')  # Remplacez 'champ1', 'champ2' par les noms de vos champs

    return JsonResponse(list(sous_categorie), safe=False)  # Retourner les informations sous forme de données JSON



def drop_sous_categorie(request, id):
    # Récupérer l'instance de la sous-catégorie à supprimer
    sous_categorie = Sous_categorie.objects.get(id=int(id))

    # Vérifier si des archives sont associées à cette sous-catégorie
    archives = Archive.objects.filter(sous_categorie_id=sous_categorie)
    if archives.exists():
        messages.error(request, 'Cette sous-catégorie contient des archives.')
        return redirect('/archive_doc/')  # Rediriger vers une page appropriée

    # Vérifier si des catégories sont associées à cette sous-catégorie

    # Si la sous-catégorie ne contient ni archives ni catégories, la supprimer
    sous_categorie.delete()
    messages.success(request, 'Sous-catégorie retirée avec succès.')
    return redirect('/archive_doc/')  # Rediriger vers une page appropriée




def add_archive_operation(request,operation_id):
    operation_rapport = OperationRapport.objects.get(pk=int(operation_id))

    if request.method == "POST":
        titre = request.POST.get('titre')

        auteur = request.POST.get('auteur')

        description = request.POST.get('description')

        provenance = request.POST.get('provenance')

        source_financement = request.POST.get('source_financement')

        categorie_id = request.POST.get('categorie_id')

        format= request.POST.get('format')

        sous_categorie = request.POST.get('sous_categorie')
        date_enregistrement=datetime.date.today()
        piece_jointe = operation_rapport.piece_jointe

        index_value = f"{date_enregistrement}_{source_financement}_{provenance} {description}_{provenance}_"

        destination_obj = Archive(file=piece_jointe,index=index_value,sous_categorie_id=sous_categorie,categorie_id=categorie_id,source_financement=source_financement,provenance=provenance,auteur=auteur,titre=titre,description=description,format_fichier=format,date_enregistrement=date_enregistrement)

        destination_obj.save()
        operation_rapport.etat=1
        operation_rapport.save()
        messages.success(request,'Fichier Archivé Avec Succes')

        return redirect('/archive_doc/')


def edit_sous_categorie(request,id):
    sous_categorie = Sous_categorie.objects.get(id=int(id))
    context = basis(request)
    context['sous_categorie']=sous_categorie
    template = "webpages/ctn_bpf/edit-sous_categorie.html"

    return render(request,template,context)



def edit_souscategory(request,sous_categorie_id):
    sous_categorie=Sous_categorie.objects.get(id=int(sous_categorie_id))

    if request.method == "POST":
        nom = request.POST.get('sous_categorie')


        sous_categorie.nom = nom

        sous_categorie.save()

        messages.success(request,'mise a Jour Realisé Avec Succes')

        return redirect('/archive_doc/')





from .models import IndicateurValeur

def add_periode(request):
    if request.method == 'POST':
        id_indicateur = request.POST['id_indicateur']
        type_donnee = request.POST['type_donnee']
        structure_id = request.POST['structure']  # Assurez-vous que 'structure' est l'ID de la structure dans la requête POST

        # Récupérez les données des champs clonés
        periodes = request.POST.getlist('periode')  # Assurez-vous que le nom du champ est 'periode'
        cibles = request.POST.getlist('cible')  # Assurez-vous que le nom du champ est 'cible'

        # Créez une liste pour stocker les instances à créer
        instances = []

        # Créez une instance pour chaque champ cloné et ajoutez-la à la liste
        for i in range(len(periodes)):
            nouvel_champ_clone = IndicateurValeur(
                indicateur_id=id_indicateur,
                type_donnee=type_donnee,
                structure_id=structure_id,
                periode_ok_id=periodes[i],
                valeur=cibles[i],
            )
            instances.append(nouvel_champ_clone)

        # Utilisez bulk_create pour ajouter toutes les instances en une seule requête
        IndicateurValeur.objects.bulk_create(instances)

        # Ajoutez un traitement supplémentaire si nécessaire
        messages.info(request, 'Périodes définies avec succès. Veuillez consulter le graphique.')
        return redirect('/evaluer/0/0/')  # Affichez une page de confirmation après l'enregistrement


def get_periodeok_informations(request):
    selected_id = request.GET.get('id')  # Récupérer l'ID de la période sélectionnée depuis la requête

    # Récupérer les informations de la table periodeok en fonction de l'ID de la période sélectionnée
    informations = PeriodeOk.objects.filter(periodicite_id=selected_id).values('id', 'nom')  # Remplacez 'champ1', 'champ2' par les noms de vos champs

    return JsonResponse(list(informations), safe=False)  # Retourner les informations sous forme de données JSON





from django.http import JsonResponse
from .models import IndicateurValeur, PeriodeOk
def recuperer_donnees_pour_graphique(request, id):
    if IndicateurValeur.objects.filter(indicateur_id=int(id), type_donnee__in=['cible','valeur_form']).exists():
        indicateur_valeurs = IndicateurValeur.objects.filter(indicateur_id=int(id), type_donnee__in=['cible','valeur_form'])

        donnees = {}
        for iv in indicateur_valeurs:
            periode = PeriodeOk.objects.get(id=iv.periode_ok_id)
            if periode.annee not in donnees:
                donnees[periode.annee] = {
                    'periode': periode.annee,  # Utiliser le champ 'annee' pour l'année
                    'nom': periode.nom,
                    'numero_ordre': periode.numero_ordre,  # Utiliser le champ 'numero_ordre' pour le numéro d'ordre
                    'cible': iv.valeur if iv.type_donnee == 'cible' else None,  # Ajouter la valeur de cible si c'est le type de donnée cible, sinon None
                    'valeur_form': iv.valeur if iv.type_donnee == 'valeur_form' else None  # Ajouter la valeur de valeur_form si c'est le type de donnée valeur_form, sinon None
                }
            else:
                if iv.type_donnee == 'cible':
                    donnees[periode.annee]['cible'] = iv.valeur
                elif iv.type_donnee == 'valeur_form':
                    donnees[periode.annee]['valeur_form'] = iv.valeur

        # Convertir le dictionnaire en liste
        donnees = list(donnees.values())

        # Trier les données par année et numéro d'ordre en ordre croissant
        donnees = sorted(donnees, key=lambda x: (x['periode'], x['numero_ordre']))

        return JsonResponse(donnees, safe=False)
    else:
        return JsonResponse({'error': 'Aucune donnée de type "cible" ou "valeur_form" disponible pour cet indicateur'}, status=404)


from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
import datetime

@csrf_exempt
def add_cible_ajax(request):
    if request.method == "POST":
        context = basis(request)
        actual_institution = context['actual_institution'].id  # Assurez-vous que context est défini
        id_indicateur = request.POST.get('id_indicateur')  # Utilisation de get() au lieu de get[]
        type_donnee = request.POST['type_donnee']
        structure = request.POST['structure']
        periode = request.POST['periode']  # Utilisation de 'periode' au lieu de 'informations'
        cible = request.POST['cible']
        date_enregistrement = datetime.date.today()
        add_cible = IndicateurValeur(valeur=cible, type_donnee=type_donnee, indicateur_id=id_indicateur, periode_ok_id=periode, structure_id=structure, date_enregistrement=date_enregistrement, institution_id=actual_institution)
        add_cible.save()
        messages.success(request,'cible definit avec succes')
        return redirect(request.META.get('HTTP_REFERER','/'))


def view_cible(request,id):

    template = "webpages/ctn_bpf/def_cible.html"
    context = basis(request)
    periode_ok = PeriodeOk.objects.all()

    context['periode_ok']=periode_ok
    periode = Periode.objects.all()
    context['periode']=periode
    actual_institution=context['actual_institution']
    structure=Structure.objects.filter(institution_id=actual_institution)
    context['structure']=structure

    indicateur_valeur = IndicateurValeur.objects.filter(institution_id=actual_institution)

    context ['indicateur_valeur']=indicateur_valeur
    ind = Indicateur.objects.get(id=int(id))
    context['ind']=ind
    return render(request,template,context)

from django.views.decorators.http import require_POST
@require_POST
def update_indicateur_valeur(request):
    indicateur_valeur_id = request.POST.get('indicateurValeurId')
    new_value = request.POST.get('newValue')

    try:
        indicateur_valeur = IndicateurValeur.objects.get(pk=indicateur_valeur_id)
        indicateur_valeur.valeur = new_value
        indicateur_valeur.save()
        return JsonResponse({'success': True})
    except IndicateurValeur.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'IndicateurValeur does not exist'})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})



def delete_cible(request,id):
    indicateur = IndicateurValeur.objects.get(id=int(id))

    indicateur.delete()

    messages.success(request,'Cible Retiré Avec Success')


    return redirect('/evaluer/0/')

# from auditlog.models import LogEntry
def journalisation(request):
    template = "webpages/ctn_bpf/journalisation.html"
    context = basis(request)
    historique = LogEntry.objects.all().order_by('-timestamp')[:10]  # Exemple : Récupérer les 10 dernières entrées
    context['historique']=historique
    return render(request,template,context)


def stat_doc(request,id):
    archive = Archive.objects.get(id=int(id))
    context = basis(request)
    context['archive']=archive
    consultation_log = ConsultationLog.objects.all()
    context['consultation_log'] = consultation_log
    template = 'webpages/ctn_bpf/stat_doc.html'
    return render(request,template,context)



def count_views_document(request,document_id):
    # Vue pour récupérer le nombre de personnes ayant visualisé le document

    # Utiliser Django ORM pour compter le nombre de consultations distinctes

    number_of_views = ConsultationLog.objects.filter(document_id=document_id).values('user_id_id').distinct().count()

    # Retourner les données au format JSON
    return JsonResponse({'count_persos': number_of_views})


def recuperer_periodes_par_id(request):
    if 'periode_id' in request.GET:
        periode_id = request.GET['periode_id']
        # Récupérer les données des périodes à partir de la base de données en fonction de l'identifiant de période spécifique
        periodes = PeriodeOk.objects.filter(id=periode_id).values('id', 'nom')  # Remplacez les colonnes par celles que vous souhaitez récupérer

        # Convertir les données des périodes en une liste de dictionnaires
        periodes_list = list(periodes)

        # Renvoyer les données au format JSON
        return JsonResponse(periodes_list, safe=False)
    else:
        # Gérer le cas où aucun identifiant de période n'est fourni dans la requête
        return JsonResponse({'error': 'Identifiant de période manquant dans la requête.'}, status=400)



def recuperer_periodes_mensuel(request):
    if request.method == 'GET':
        # Récupérer les périodes depuis la base de données
        periodes = PeriodeOk.objects.filter(periodicite_id=1).values('id','annee', 'nom')
        return JsonResponse(list(periodes), safe=False)
    else:
        return JsonResponse({'error': 'Méthode non autorisée'}, status=405)


def recuperer_periodes_trimestriel(request):
    if request.method == 'GET':
        # Récupérer les périodes depuis la base de données
        periodes = PeriodeOk.objects.filter(periodicite_id=3).values('id','annee', 'nom')
        return JsonResponse(list(periodes), safe=False)
    else:
        return JsonResponse({'error': 'Méthode non autorisée'}, status=405)




def recuperer_periodes(request):
    if request.method == 'GET':
        # Récupérer les périodes depuis la base de données
        periodes = PeriodeOk.objects.filter(periodicite_id=4).values('id','annee', 'nom')
        return JsonResponse(list(periodes), safe=False)
    else:
        return JsonResponse({'error': 'Méthode non autorisée'}, status=405)



def recuperer_indicateurs(request):
    # Récupérer la liste des indicateurs depuis la base de données
    context = basis(request)
    actual_institution = context['actual_institution']
    indicateurs = Indicateur.objects.filter(m_institution_id=actual_institution)

    # Créer une liste de dictionnaires contenant les données des indicateurs
    data = [{'id': indicateur.id, 'nom': indicateur.m_name} for indicateur in indicateurs]

    # Renvoyer les données au format JSON en réponse à la requête AJAX
    return JsonResponse(data, safe=False)



@require_POST
def recuperer_nombre_consultations(request):
    if request.method == 'POST':
        document_id = request.POST.get('documentId')  # Récupérer l'identifiant du document depuis la requête POST
        # Effectuer une requête à la base de données pour compter le nombre de consultations pour le document donné
        nombre_de_consultations = ConsultationLog.objects.filter(document_id=document_id).count()
        return JsonResponse({'nombreDeConsultations': nombre_de_consultations})  # Renvoyer le nombre de consultations au format JSON
    else:
        return JsonResponse({'error': 'Méthode non autorisée'}, status=405)  # Renvoyer une réponse d'erreur si la méthode n'est pas autorisée



def actualite(request):
    context = basis(request)
    actualite = Actualite.objects.filter(institution=context['actual_institution'].id)
    context['actualite']=actualite
    sous_rubrique =Sous_Rubrique.objects.all()
    context['sous_rubrique'] = sous_rubrique
    rubrique=Rubrique.objects.all()
    context['rubrique']=rubrique
    baniere=Baniere.objects.all()
    context['baniere']=baniere
    sous_actualite=SousActualite.objects.all()
    context['sous_actualite']=sous_actualite
    institutions = Institution.objects.all()
    context['institutions']=institutions
    faq = Faq.objects.all()
    context['faq'] = faq
    template ="webpages/ctn_bpf/actualite.html"

    return render(request,template,context)


def valid_actualite(request):  
    context = basis(request)  # Assuming 'basis' is defined elsewhere  
    
    if request.method == "POST":  
        try:  
            # Extracting form data from POST request  
            intitule = request.POST.get('intitule')  
            description = request.POST.get('description')  
            rubrique = request.POST.get('rubrique')  
            sous_rubrique = request.POST.get('sous_rubrique')  
            institution = request.POST.get('institution')  
            photos = request.FILES.getlist('photos')  # Get list of uploaded files  
            prix = request.POST.get('prix')
            
            # Getting current date and time  
            date = datetime.datetime.now()  

            # Validate required fields (basic example)  
            # if not all([intitule, description, rubrique, sous_rubrique, institution]):  
            #     messages.error(request, 'Tous les champs doivent être remplis.')  
            #     return redirect('/dashboard/e-commerce/')  
            
            # Creating and saving Actualite instances  
            for photo in photos:  
                Actualite.objects.create(  
                    institution_id=institution,  
                    date=date,  
                    intitule=intitule,  
                    description=description,  
                    rubrique_id=rubrique,  
                    sous_rubrique_id=sous_rubrique,  
                    photos=photo,  
                    prix=prix
                )  

            messages.success(request, 'Article publié avec succès.')  
            return redirect('/dashboard/e-commerce/')  # Redirect after successful submission  

        except Exception as e:  
            # Log the exception for debugging (optionally)  
            # print(e)  # Uncomment for debugging purposes  
            messages.error(request, 'Erreur : pensez à attacher un document à votre actualité.')  
            return redirect('/dashboard/e-commerce/')  
    
    return redirect(META.get('HTTP_REFERER','/'))  # Redirect if not a POST request  

def add_sousactualite(request):
    if request.method == "POST":
        nom= request.POST['nom']


        sous_rubrique= request.POST['sous_rubrique']

        save_sousrubrique =Sous_Rubrique.objects.create(nom=nom,rubrique_id=sous_rubrique)

        save_sousrubrique.save()

        messages.success(request,'Sous-Rubrique enregistre Avec Succes')

        return redirect('/actualite/')
def trash_sousactualite(request,id):
    sous_rubrique = Sous_Rubrique.objects.get(id=int(id))
    sous_rubrique.delete()
    messages.success(request,'Sous-Rubrique Retiré Avec Succes')

    return redirect('/actualite/')


def delete_Rubrique(request, id):
    rubrique = Rubrique.objects.get(id=int(id))

    # Vérifier si la rubrique a des sous-rubriques
    has_sous_rubriques = Sous_Rubrique.objects.filter(rubrique_id=rubrique).exists()

    if has_sous_rubriques:
        messages.error(request, 'Cette rubrique contient des sous-rubriques')
    else:
        rubrique.delete()
        messages.success(request, 'Rubrique retirée avec succès')

    return redirect(request.META.get('HTTP_REFERER','/'))

def search_rubrique(request):
    selected_id = request.GET.get('id')  # Récupérer l'ID de la période sélectionnée depuis la requête

    # Récupérer les informations de la table periodeok en fonction de l'ID de la période sélectionnée
    sous_rubrique = Sous_Rubrique.objects.filter(rubrique_id=selected_id).values('id', 'nom')  # Remplacez 'champ1', 'champ2' par les noms de vos champs

    return JsonResponse(list(sous_rubrique), safe=False)  # Retourner les informations sous forme de données JSON




# def trash_actualite(request, id):
#     actualite = Actualite.objects.get(id=int(id))
#
#     # Vérifier si l'actualité a des sous-actualités
#     has_sous_actualites = Sous_Actualite.objects.filter(actualite_id=actualite).exists()
#
#     if has_sous_actualites:
#         messages.error(request, 'Cet Actualité ne peut être retiré car il contient des sous-Actualité')
#     else:
#         actualite.delete()
#         messages.success(request, 'Actualité retiré avec succès')
#
#     return redirect('/actualite/')

def add_rubrique(request):  
    if request.method == "POST":  
        nom = request.POST.get('nom')  
        rubrique_id = request.POST.get('id')  
        
        if rubrique_id:  
            # Editing an existing Rubrique  
            rubrique = get_object_or_404(Rubrique, id=rubrique_id)  
            rubrique.nom = nom  
            rubrique.save()  
            messages.success(request, 'Rubrique mise à jour avec succès.')  
        else:  
            # Creating a new Rubrique  
            rubrique, created = Rubrique.objects.get_or_create(nom=nom)  
            if created:  
                messages.success(request, 'Rubrique ajoutée avec succès.')  
            else:  
                messages.info(request, 'Rubrique déjà existante.')  

        return redirect(request.META.get('HTTP_REFERER','/'))  


def view_actualite(request, id):
    actualite = get_object_or_404(Actualite, id=int(id))

    if not actualite.documents:
        messages.error(request, "Aucun fichier associé à cet objet.")
        return redirect('/')

    file_content = actualite.documents.read()
    content_type, _ = mimetypes.guess_type(actualite.documents.name)

    if not content_type:
        content_type = 'application/octet-stream'

    response = HttpResponse(file_content, content_type=content_type)
    response['Content-Disposition'] = 'attachment; filename="{}"'.format(actualite.documents.name)

    return response


def all_actuality(request):
    context = basis(request)
    actualite = Actualite.objects.all()
    context['actualite']=actualite
    archive = Archive.objects.filter(format_fichier='video')
    context['archive']=archive

    categorie = Categorie.objects.all()
    context['categorie'] = categorie

    sous_categorie = Sous_categorie.objects.all()
    context['sous_categorie'] = sous_categorie

    template ="webpages/ctn_bpf/all_actuality.html"

    return render(request,template,context)

def all_actuality_article(request,id):

    template = 'webpages/ctn_bpf/all_actuality_article.html'

    institution = Institution.objects.get(id=int(id))

    archive = Archive.objects.filter(format_fichier='video', institution_id=institution.id)

    context = {
    'institution': institution,
    'archive':archive


    }

    return render(request,template,context)





def institution_list(request):
    context = basis(request)
    institution = Institution.objects.all()
    context['institution']=institution
    template ="webpages/ctn_bpf/all_institution.html"

    return render(request,template,context)


def archive_operation_rapports(request,id):
    context=basis(request)
    operation_rapport = OperationRapport.objects.get(id=int(id))
    context['operation_rapport']=operation_rapport
    categorie=Categorie.objects.all()
    context['categorie']=categorie
    sous_categorie=Sous_categorie.objects.all()
    context['sous_categorie'] = sous_categorie
    operation = Operation.objects.all()
    context['operation'] = operation
    template = "webpages/ctn_bpf/archive_rapport.html"

    return render(request,template,context)


def all_actuality_site(request):
    template= "webpages/ctn_bpf/site.html"
    context = basis(request)
    actualite = Actualite.objects.all().order_by('-id')
    context['actualite'] = actualite
    sous_actualite= SousActualite.objects.all().order_by('-id')
    baniere = Baniere.objects.all()
    context['baniere'] = baniere
    context['sous_actualite'] =sous_actualite
    return render(request,template,context)


def recuperer_periodes(request):
    if request.method == 'GET':
        # Récupérer les périodes depuis la base de données
        periodes = PeriodeOk.objects.filter(periodicite_id=4).values('id','annee', 'nom')
        return JsonResponse(list(periodes), safe=False)
    else:
        return JsonResponse({'error': 'Méthode non autorisée'}, status=405)


def search_period(request):
    selected_id = request.GET.get('id')


    periode_ok_id = PeriodeOk.objects.filter(id=selected_id).values('id','nom')

    return JsonResponse(list(periode_ok_id), safe=False)

def add_sub_structure(request):  
    if request.method == 'POST':  
        # Check if a file was uploaded  
        if 'file' not in request.FILES:  
            messages.error(request, 'No file was uploaded.')  
            return redirect('/structures/')  # Redirect or render as needed  

        excel_file = request.FILES['file']  
        
        # Try to load the workbook while handling potential errors  
        try:  
            wb = load_workbook(excel_file)  
        except (InvalidFileException, FileNotFoundError) as e:  
            messages.error(request, 'The uploaded file is not a valid Excel file.')  
            return redirect('/structures/')  
        except Exception as e:  
            messages.error(request, f'An unexpected error occurred: {e}')  
            return redirect('/structures/')  
        
        ws = wb.active  
        
        context = basis(request)  
        actual_institution = context['actual_institution'].id  
        structure_id = request.POST['structure']  
        structure = Structure.objects.get(id=structure_id)  

        # Initialize a variable to track if any structures were created  
        structures_created = 0  
        
        # Fetch sous_structure and designation from POST or read Excel file  
        sous_structure = request.POST.get('sous_structure')  
        designation = request.POST.get('designation')  
        institution = request.POST['institution']  

        if sous_structure and designation:  
            # If both are provided, create a structure for the input values  
            Structure.objects.create(  
                parent=structure,  
                nom=sous_structure,  
                designation=designation,  
                institution_id=institution  
            )  
            structures_created += 1  
        else:  
            # If either is missing, read through the Excel file  
            for row in ws.iter_rows(min_row=2, values_only=True):  
                # Make sure the row has the expected number of columns  
                if len(row) >= 2:  
                    nom = row[0]  
                    designation_from_excel = row[1]  

                    # Create a new Structure for each row in the Excel file  
                    new_structure = Structure.objects.create(  
                        parent=structure,  
                        nom=nom,  
                        designation=designation_from_excel,  
                        institution_id=institution  
                    )  
                    structures_created += 1  

        # Provide feedback to the user about the operation result  
        if structures_created > 0:  
            messages.success(request, f'Opération réalisée avec succès! {structures_created} structures ajoutées.')  
        else:  
            messages.error(request, 'Aucune structure n\'a été ajoutée.')  

        return redirect('/structures/')  

    return rendirect(request.META.get('HTTP_REFERER','/'))  
def count_informed(request):
    context = basis(request)
      
    actual_institution = context['actual_institution']
   
    personnel = request.user.personnel.id
    count_informed = Operation.objects.filter(is_deleted = False,etat = 2,informed_id=personnel).count()
    return JsonResponse({'count_informed': count_informed})


import mimetypes

def view_file(request, id):
    try:
        archive = get_object_or_404(Archive, id=int(id))
        if not archive.file:
            messages.error(request, "Aucun fichier associé à cet objet.")
            return redirect('/')
        file_content = archive.file.read()
        content_type, _ = mimetypes.guess_type(archive.file.name)
        if not content_type:
            content_type = 'application/octet-stream'
        response = HttpResponse(file_content, content_type=content_type)
        response['Content-Disposition'] = 'attachment; filename="{}"'.format(archive.file.name)
        return response
    except Exception as e:
        messages.error(request, f"Une erreur est survenue : {str(e)}")
        return redirect('/')
def add_baniere(request):
    if request.method == "POST":
        logo=request.FILES['logo']
        nom = request.POST['nom']
        
       
        baniere = Baniere.objects.create(nom=nom,logo=logo)
        baniere.save()
        messages.success(request,'Baniere Crée Avec Succes')
        return redirect('/institution/')
def groupe_institution(request):
    if request.method == "POST":
        nom=request.POST['nom']
        description=request.POST['description']
        icone = request.FILES['icone']
        groupe_institution=Groupe_institution.objects.create(nom=nom,description=description,icone=icone)
        groupe_institution.save()
        messages.success(request,'Groupe Crée Avec Succes')
        return redirect('/groupe_boutique/')
def edit_group_institution(request,id):
    if request.method == "POST":
        groupe = request.POST['groupe']
        groupe_save = Institution.objects.get(id=int(id))
        groupe_save.groupe_id=groupe 
        groupe_save.save()
        messages.success(request,'Association Reussit Avec Succes')
        return redirect('/institution/')

from django.shortcuts import get_object_or_404

def delete_group(request, id):
    """
    Deletes a group and handles potential related institutions gracefully.

    Args:
        request (HttpRequest): The incoming HTTP request.
        id (int): The ID of the group to be deleted.

    Returns:
        HttpResponseRedirect: Redirects to the institution list view on success,
                             or displays an error message on failure.

    Raises:
        Http404: If the group with the specified ID is not found.
    """

    groupe = get_object_or_404(Groupe_institution, pk=id)  # Use pk for primary key

    # Check for related institutions before deletion
    related_institutions = groupe.institution_set.all()  # Use related manager

    if related_institutions.exists():
        messages.error(request, 'ce group ne peut etre supprimé.')
        return redirect(request.META.get('HTTP_REFERER','/'))  # Redirect to institution list on failure

    groupe.delete()
    messages.success(request, 'Groupe Supprimé .')
    return redirect(request.META.get('HTTP_REFERER','/'))
        
def delete_baners(request,id):
    baners = Baniere.objects.get(id=int(id))
    baners.delete()
    messages.success(request,'Baniere Supprimé')
    return redirect(request.META.get('HTTP_REFERER','/'))
def groupe_link(request,id):
    context=basis(request)
    groupe = Groupe_institution.objects.get(id=int(id))
    context['groupe'] = groupe
    institution = Institution.objects.all()
    context['institution'] = institution
    template = "webpages/ctn_bpf/groupe_institution.html"
    return render(request,template,context)
def invoices(request):
    context = basis(request)
    template="webpages/ctn_bpf/rapport.html"
    structure = Structure.objects.filter(institution_id=context['actual_institution'].id)
    context['structure'] = structure
    periode_ok= PeriodeOk.objects.all().distinct('annee')
    context['periode_ok'] = periode_ok
    return render(request,template,context)

from django.template import loader
from io import BytesIO
from xhtml2pdf import pisa   
import io
from django.template.loader import get_template
from django.http import HttpResponse
from django.shortcuts import render  # Optional, for cleaner views

from django.template import TemplateDoesNotExist


def invoice_fosa(request, context_dict={}):
    if request.method == "POST":
        periode = request.POST['periode']
        structure = request.POST['structure']
   
    template_path = "webpages/ctn_bpf/invoice.html"  # Assuming template path is a string

    try:
        template = get_template(template_path)
    except TemplateDoesNotExist:
        print(f"Error: Template '{template_path}' not found.")
        return None  # Handle missing template gracefully

    # Fetch DSet_DElt data (modify to filter if needed)
    dset_delt_list = DSet_DElt.objects.filter(periode_id=periode,m_structure_id=structure)

    # Prepare context
    context = basis(request)
    groupe_element=GroupeElement.objects.all()
    context.update({'dset_delt_list': dset_delt_list,'groupe_element':groupe_element})

    # Render the template with the context
    html = template.render(context)

    # Create a BytesIO object to hold the PDF content
    result = io.BytesIO()

    # Convert HTML to PDF using pisaDocument
    try:
        pdf = pisa.pisaDocument(io.BytesIO(html.encode("ISO-8859-1")), result)
        if not pdf.err:
            return HttpResponse(result.getvalue(), content_type='application/pdf')
            return render_pdf(template, context)
    except Exception as e:
        print(f"Error generating PDF: {e}")  # Log the error for debugging
        return None  # Handle PDF generation errors

    return None  # If no errors occur but no PDF is generated
def groupe_element(request):
    if request.method == "POST":
        element = request.POST['element']
        cu = request.POST['cu']
        qte_declare = request.POST['qte_declare']
        qte_valide = request.POST['qte_valide']

        try:
            
            groupe_element = GroupeElement.objects.get(dataelement_id=element)
            # GroupeElement already exists, so don't save a new record
            messages.error(request, 'Cette information existe déjà dans le groupe')
            return redirect('/dataelts/')

        

        except GroupeElement.DoesNotExist:
            # Create a new GroupeElement object
            new_groupe_element = GroupeElement.objects.create(
                dataelement_id=element,
                cout_unitaire=cu,
                qte_declare=qte_declare,
                qte_valide=qte_valide,
            )
            new_groupe_element.save()
            messages.success(request, 'Information créée avec succès!')
            return redirect('/dataelts/')
def delete_groupe_element(request,id):
    groupe_element = GroupeElement.objects.get(id=int(id))
    groupe_element.delete()
    messages.success(request,'Element Retire Du Groupe Avec Succes')
    return redirect('/dataelts/')
def generate_pdf_district(request):
    if request.method == "POST":
        periode = request.POST['periode']
        structure = request.POST['structure']
   
    template_path = "webpages/ctn_bpf/invoice_district.html"  # Assuming template path is a string

    try:
        template = get_template(template_path)
    except TemplateDoesNotExist:
        print(f"Error: Template '{template_path}' not found.")
        return None  # Handle missing template gracefully

    # Fetch DSet_DElt data (modify to filter if needed)
    indicateurvaleur = IndicateurValeur.objects.filter(periode_ok_id=periode,structure_id=structure)

    # Prepare context
    context = basis(request)
    
    context.update({'indicateurvaleur': indicateurvaleur})

    # Render the template with the context
    html = template.render(context)

    # Create a BytesIO object to hold the PDF content
    result = io.BytesIO()

    # Convert HTML to PDF using pisaDocument
    try:
        pdf = pisa.pisaDocument(io.BytesIO(html.encode("ISO-8859-1")), result)
        if not pdf.err:
            return HttpResponse(result.getvalue(), content_type='application/pdf')
    except Exception as e:
        print(f"Error generating PDF: {e}")  # Log the error for debugging
        return None  # Handle PDF generation errors

    return None  # If no errors occur but no PDF is generated
def edit_structure(request,id):
    if request.method == "POST":
        nom = request.POST['nom']
        designation= request.POST['designation']
        
        structure = Structure.objects.get(id=int(id))
        structure.nom=nom
        structure.designation=designation
        structure.save()
        messages.success(request,'Mise a Jour Effectuee')
        return redirect('/structures/')
def delete_sub_line(request,id):
    structure = Structure.objects.get(id=int(id))
    
   
    structure.delete()
    messages.success(request,'Element Supprime avec succes')
    return redirect('/structures/')
def presentation(request, id):
    context = basis(request)
    actualite = Actualite.objects.filter(institution__baniere_id = id )
    baniere = Baniere.objects.get(id=int(id))
    videos = Archive.objects.filter(institution__baniere_id=id,format_fichier = "video")
    archives_s = Archive.objects.filter(institution__baniere_id = id)
    context['archives_s']=archives_s
    institution = Institution.objects.filter(baniere_id = id)
    context['institution'] = institution 
    context['videos'] = videos
    context['actualite'] = actualite
    context['baniere'] = baniere
    sous_actualite = SousActualite.objects.filter(institution__baniere_id = id)
    context['sous_actualite'] = sous_actualite
    template = "webpages/ctn_bpf/presentation_view.html"
    return render(request, template, context)
def actualites_del(request,id):
    actualite=Actualite.objects.get(id=int(id))
    all_link = [SousActualite]
    for all_links in all_link:
        if all_links.objects.filter(actualite_id=actualite).exists():

            messages.info(request,'Cet Article Possede Des Articles Similaires Donc Ne Peut Etre Retire')
        actualite.delete()
        messages.success(request,'Article Supprimé avec succes')
    return redirect('/dashboard/e-commerce/')
def baniere_actialite(request,id):
    
    if request.method == "POST":  
        intitule = request.POST['intitule']
        description = request.POST['description']
        institution = request.POST['institution']
        actualite = Actualite.objects.get(id=int(id))
        actualite.institution_id=institution
        actualite.description= description
        actualite.intitule = intitule
        actualite.save()
        messages.success(request,'Actualite Mise A Jour Avec Succes')
        return redirect('/actualite/')

def facturation(request):
    template = "webpages/ctn_bpf/backup.html"
    context=basis(request)
    actual_institution=context['actual_institution']
    master_groupe = MasterGroupe.objects.filter(institution_id=actual_institution)
    context['master_groupe']=master_groupe
    master=Master.objects.filter(institution_id=actual_institution)
    context['master']=master
    data_element = DataElement.objects.all()
    context['data_element']=data_element
    return render(request,template,context)
def add_master(request):
    if request.method =="POST":
        master_group = request.POST['master']
        institution=request.POST['institution']
        master_group = MasterGroupe.objects.create(nom=master_group,institution_id=institution)
        master_group.save()
        return redirect('/facturation/')
def delete_master_groupe(request,id):
    
    delete_master_groupe=MasterGroupe.objects.get(id=int(id))
    delete_master_groupe.delete()
    return redirect('/facturation/')
def add_master(request):
    if request.method =="POST":
        institution = request.POST['institution']
        master_grpe=request.POST['master_groupe']
        nom= request.POST['nom']
        master = Master.objects.create(nom=nom,institution_id=institution,master_groupe_id=master_grpe) 
        master.save()
        return redirect('/facturation/')
def delete_master(request,id):
    master = Master.objects.get(id=int(id))
    master.delete()
    return redirect('/facturation/')
def add_master_element(request):
    if request.method == "POST":
        type = request.POST['type']
        data_element_ids = request.POST.getlist('data_element')  # Récupérez une liste d'identifiants de DataElement
        master_ids = request.POST.getlist('master')  # Récupérez une liste d'identifiants de Master

        new_master_element = MasterElement.objects.create(type=type)
        
        for data_element_id in data_element_ids:
            data_element = DataElement.objects.get(id=data_element_id)
            new_master_element.element.add(data_element)

        for master_id in master_ids:
            master = Master.objects.get(id=master_id)
            new_master_element.master.add(master)

        new_master_element.save()
        

        return redirect('/facturation/')
def add_nature(request,id):
    if request.method == "POST":
        nature = request.POST['nature']
    
        nature_institution= Institution.objects.get(id=int(id))
        nature_institution.nature=nature
        nature_institution.save()
       
        return redirect('/configurations/')
def add_nature_operation(request):
    if request.method == "POST":
        intitule=request.POST['intitule']
        description = request.POST['description']
        institution=request.POST['institution']
        add_nature_operation=NatureOperation.objects.create(intitule=intitule,description=description,institution_id=institution)
        add_nature_operation.save()
        return redirect('/configurations_admin/')
from django.db import transaction


def data(request):
    template="webpages/ctn_bpf/data.html"
    context=basis(request)
    data_accreditation=DataAccreditation.objects.all()
    context['data_accreditation']=data_accreditation
    return render(request,template,context)

def configurations_admin(request):
    template ="webpages/ctn_bpf/configuration_admin.html"
    context=basis(request)
    actual_institution=context['actual_institution']
    nature=NatureOperation.objects.filter(institution_id=actual_institution.id)
    context['nature']=nature
    categorie_operation=CategorieOperation.objects.filter(institution_id=actual_institution.id)
    context['categorie_operation']=categorie_operation
    periode_ok,dataset= PeriodeOk.objects.order_by('numero_ordre'),DataSet.objects.filter(m_institution=actual_institution.id)
    context['periode_ok']=periode_ok
    periode = Periode.objects.all()
    context['periode'] = periode
    context['dataset'] = dataset
    return render(request,template,context)
def activ_cat(request,id):
    if request.method == "POST":
        categorie=True
        
        
        institution_id=Institution.objects.get(id=int(id))
        institution_id.categorie_op=categorie
        institution_id.save()
        messages.success(request,'Categorisation Active avec Succes')
        return redirect('/configurations_admin/')
def add_categorie_operation(request):
    if request.method=="POST":
        intitule=request.POST['intitule']
        description=request.POST['description']
        institution=request.POST['institution']
        save_categorie_operation=CategorieOperation.objects.create(intitule=intitule,description=description,institution_id=institution)
        save_categorie_operation.save()
        
        return redirect('/configurations_admin/')
def desactive_categorie(request,id):
    if request.method == "POST":
        categorie_id=Institution.objects.get(id=int(id))
        categorie=False
        categorie_id.categorie=categorie
        categorie_id.save()
        messages.success(request,'Categorie Desactive')
def desactive_nature(request,id):
    if request.method == "POST":
        nature=Institution.objects.get(id=int(id))
        nature=False
        nature.nature=nature
        nature.save()
        messages.success(request,'nature Desactive')
def api_count_operations_by_nature(request):
    context = basis(request)
    actual_institution = context['actual_institution'].id
    data = Operation.objects.filter(m_institution_id=actual_institution) \
        .values('nature_operation__intitule') \
        .annotate(count=models.Count('id')) \
        .order_by('-count')
    data_dict = {item['nature_operation__intitule']: item['count'] for item in data}
    #print("Données récupérées :", data_dict)
    return JsonResponse(data_dict)

def api_count_operations_by_categorie(request):
    context = basis(request)
    actual_institution = context['actual_institution'].id
    data = Operation.objects.filter(m_institution_id=actual_institution) \
        .values('categorie__intitule') \
        .annotate(count=models.Count('id')) \
        .order_by('-count')
    data_list = [{'name': item['categorie__intitule'], 'y': item['count']} for item in data]
    #print("Données récupérées Par Categorie:", data_list)
    return JsonResponse(data_list, safe=False)
def add_cat_nat(request, id):  
    operation = get_object_or_404(Operation, id=int(id))  

    if request.method == "POST":  
        # Récupération des données du formulaire  
        nature = request.POST.get('nature')  
        categorie = request.POST.get('categorie')  
        etat = request.POST.get('etat',None)
        nom = request.POST.get('nom')  
        datasets = request.POST.getlist('dataset')  # Use getlist for multiple selections.  
        annee = request.POST.get('annee')  
        periode = request.POST.get('mois')  
        date_echeance = request.POST.get('date_echeance')  
        structure = request.POST.get('structure')  
        personnel = request.POST.get('personnel')  
        accountable = request.POST.get('accountable')  
        informed = request.POST.get('informed')  
        consulted = request.POST.get('consulted')  
        date_debut = request.POST.get('date_debut',None)
        code = request.POST.get('code',None)
        
        # return HttpResponse(datasets)

        # Mise à jour de l'objet Operation  
        operation.nature_operation_id = nature  
        operation.categorie_id = categorie  
        operation.nom = nom  
        operation.structure_id = structure  
        operation.periode_ok_id = periode  
        operation.date_echeance = date_echeance  
        operation.personnel_id = personnel  
        operation.accountable_id = accountable  
        operation.consulted_id = consulted  
        operation.informed_id = informed  
        operation.date_debut = date_debut
        operation.code = code
        operation.etat = etat

        try:  
            # Update the ManyToMany field  
            operation.dataset.set(datasets)  # Pass a list of dataset IDs to set the relation.  

            operation.save()  
            messages.success(request, "L'opération a été mise à jour avec succès.")  
        except Exception as e:  
            messages.error(request, f"Une erreur s'est produite lors de la mise à jour : {str(e)}")  
            return redirect(request.META.get('HTTP_REFERER', '/'))  # Redirect to the referring page.  

        return redirect(request.META.get('HTTP_REFERER', '/'))  # Redirect to a suitable page.  

    return redirect(request.META.get('HTTP_REFERER', '/'))  # Handle GET requests.  
def count_attente_operation(request):
    context = basis(request)
    actual_institution = context['actual_institution'].id
    perso = request.user.personnel.id

    attente = Operation.objects.filter(m_institution_id=actual_institution, etat="1").count()
    return JsonResponse({'attente': attente})




from openpyxl import load_workbook  
from django.shortcuts import render, redirect  
from django.contrib import messages  
from .models import DataAccreditation  

def load_file_data(request):  
    if request.method == 'POST':  
        file = request.FILES['file']  
        
        wb = load_workbook(file, data_only=True)  # Added data_only=True to retrieve only values  
        ws = wb.active    
        for row in ws.iter_rows(min_row=17, values_only=True):  
            (  
                region, district, aire, fosa, statut_fosa, fonction,   
                thematique, critere, numero, critere_consensus, poids,   
                pas_du_tout_noter_0, partiel_noter_1, entierement_noter_2,   
                total_points, total_max, score, type
            ) = row  

            data = DataAccreditation.objects.create(  
                region=region, district=district, aire=aire, fosa=fosa, status_fosa=statut_fosa,   
                fonction=fonction, thematique=thematique, critere=critere, numero=numero,   
                critere_consensus=critere_consensus, poids=poids, pas_du_tout_noter_0=pas_du_tout_noter_0,   
                partiel_noter_1=partiel_noter_1, entierement_noter_2=entierement_noter_2,   
                total_points=total_points, total_max=total_max,score=score, type=type  
            )  
            print('les donnees',data)
            data.save()  
        
        messages.success(request, "Toutes les données ont été chargées avec succès!")  
        return redirect('/data/')  
    
    return render(request, 'webpages/ctn_bpf/data.html')
def activ_form(request,id):
    if request.method == "POST":
        
        formulaire=True
        institution=Institution.objects.get(id=int(id))
        institution.formulaire=formulaire
        
        institution.save()
        messages.success(request,'Formulaire Active')
        return redirect('/configurations_admin/')
def add_sous_actualite(request):
    if request.method == "POST":
        
        institution = request.POST['institution']
        intitule = request.POST['intitule']
        description = request.POST['description'] 
        
        actualite= request.POST['actualite']  
        photos = request.FILES['photos']
        documents = request.FILES['documents']
        photos = request.FILES.get('photos', None)  
        documents = request.FILES.get('documents', None)
        sous_actualite = SousActualite.objects.create(institution_id = institution,actualite_id=actualite,intitule=intitule,description=description,photos=photos,documents=documents)
        sous_actualite.save()
        messages.success(request,'sous-Actualite Ajoute Avec Succes')
        return redirect('/actualite/')
def delete_sous_actualite(request,id):
    sous_actualite=SousActualite.objects.get(id=int(id))
    sous_actualite.delete()
    messages.success(request,'Article Similaire retiré Avec Succes!')
    return redirect(request.META.get('HTTP_REFERER','/'))



from django.http import JsonResponse  
from django.core.exceptions import ObjectDoesNotExist  




def get_dataset(request, dataset_id):  
    try:  
        dataset = DataSet.objects.get(id=dataset_id)  
        data = {  
            'id': dataset.id,  
            'content': dataset.m_formulaire,  # Adaptez cette ligne en fonction des attributs de votre modèle  
        }  
        return JsonResponse(data)  
    except DataSet.DoesNotExist:  
        return JsonResponse({'error': 'Dataset not found'}, status=404)

def edit_baniere_institution(request):
    baniere = request.POST['baniere']
    institution_id = request.POST.get('institution')
    if institution_id:
        
        institution = Institution.objects.get(id = institution_id)
        institution.baniere_id = baniere
        institution.save()
        messages.success(request,'Baniere Associee Avec Succes!')
        return redirect('/institution/')
def actual(request,id):
    context = basis(request)
    actualite = Actualite.objects.filter(institution__baniere_id = id )
    baniere = Baniere.objects.get(id=int(id))
    
    context['actualite'] = actualite
    context['baniere'] = baniere
    sousactualite=SousActualite.objects.filter(institution__baniere_id = id)
    context['sousactualite'] = sousactualite
    template = "webpages/ctn_bpf/presentation_specific.html"
    return render(request, template, context)
def edit_sous_actualite(request,id):
    template ="webpages/ctn_bpf/edit_sous_actuality.html"
    context = basis(request)
    sous_actualite = SousActualite.objects.get(id = int(id))
    context['sous_actualite']=sous_actualite
    actualite = Actualite.objects.all()
    context['actualite'] = actualite
    institution = Institution.objects.all()
    context['institution'] = institution
   
    return render(request,template,context)

def update_sous_actuality(request, id):  
    sous_actualite = get_object_or_404(SousActualite, id=id)  # Safely get the object or return 404  

    if request.method == "POST":  
        intitule = request.POST['intitule']  
        description = request.POST['description']  
        institution = request.POST['institution']  
        sexe = request.POST.get('sexe')  
        tranche = request.POST.get('tranche')  
        colors = request.POST.get('colors')  
        prix = request.POST.get('prix')  
        
        # Check if a new photo is provided in the request  
        photos = request.FILES.get('photos')  
        if photos:  
            sous_actualite.photos = photos  # Update only if a new photo is uploaded  

        # Update other fields  
        sous_actualite.intitule = intitule  
        sous_actualite.description = description  
        sous_actualite.institution_id = institution  
        sous_actualite.prix = prix  
        sous_actualite.colors = colors  
        sous_actualite.tranche = tranche  
        sous_actualite.sexe = sexe  

        sous_actualite.save()  # Save changes  
        messages.success(request, 'Mise à jour effectuée.')  # Use correct French accent  
        return redirect(request.META.get('HTTP_REFERER', '/'))  

def edit_baniere(request,id):
    template = "webpages/ctn_bpf/edit_baniere.html"
    context = basis(request) 
    baniere = Baniere.objects.get(id = int(id)) 
    context['baniere'] = baniere
    return render(request,template,context)
import os  

def edit_baniere_up(request, id):  
    baniere = get_object_or_404(Baniere, id=int(id))  
    
    if request.method == "POST":  
        if request.FILES:  
            # Vérifier si le logo existe avant de tenter de le supprimer  
            if baniere.logo and os.path.exists(baniere.logo.path):  
                try:  
                    os.remove(baniere.logo.path)  
                except FileNotFoundError:  
                    # Journalisez l'erreur ou gérez-la selon vos besoins  
                    messages.error(request, "Le fichier logo existant n'a pas pu être supprimé.")  
            
            # Mettre à jour le logo  
            baniere.logo = request.FILES['logo']  
        
        # Mettre à jour le nom  
        baniere.nom = request.POST.get('nom', '')  
        baniere.save()  
        
        messages.success(request, "Mise à jour réalisée avec succès !")  
        return redirect('/institution/')  

    return redirect('/institution/')  
def delete_nature(request,id):
    nature=NatureOperation.objects.get(id=int(id))
    nature.delete()
    messages.success(request,'Nature Retiré Avec Succes !')
    return redirect('/configurations_admin/')
def delete_categorie(request,id):
    categorie = CategorieOperation.objects.get(id=int(id))
    categorie.delete()
    messages.success(request,'Categorie Retiré Avec Succes !')
    return redirect('/configurations_admin/')
def update_categorie(request,id):
    context=basis(request)
    template = "webpages/ctn_bpf/edit_categorie.html"
    categorie = CategorieOperation.objects.get(id=int(id))
    context['categorie']=categorie
    return render(request,template,context)
def edit_natures(request,id):
    context=basis(request)
    template = "webpages/ctn_bpf/edit_nature.html"
    nature = NatureOperation.objects.get(id=int(id))
    context['nature']=nature
    return render(request,template,context)
def edit_nature_up(request,id):
    
    if request.method == "POST":
        nom=request.POST['nom']
        nature = NatureOperation.objects.get(pk=int(id))
        nature.intitule=nom
    
        nature.save()
    
        messages.success(request,'Mise A Jour Effectuée')
        return redirect('/configurations_admin/')
def edit_categorie_up(request,id):
    
    if request.method == "POST":
        nom = request.POST['nom']
        categorie = CategorieOperation.objects.get(pk=int(id))
        categorie.intitule=nom
    
        categorie.save()
    
        messages.success(request,'Mise A Jour Effectuée')
        return redirect('/configurations_admin/')
def add_information_actualite(request,id):
    template = "webpages/ctn_bpf/article_similaire.html"
    context=basis(request)
    actuality = Actualite.objects.get(pk=int(id))
    context['actuality'] = actuality
    rubrique = Rubrique.objects.all()
    context['rubrique'] = rubrique
    sous_rubrique = Sous_Rubrique.objects.all()
    context['sous_rubrique'] = sous_rubrique
    sous_actualite = SousActualite.objects.filter(actualite_id=actuality)
    context['sous_actualite'] = sous_actualite
    return render(request,template,context)

def add_information_data(request, id):  
    actualite = get_object_or_404(Actualite, pk=int(id))  # Utilisation de get_object_or_404 pour éviter des erreurs si l'actualite n'existe pas  

    if request.method == "POST":  
        # Récupérer les fichiers et les données du formulaire  
       
        photo = request.FILES.get('photos', None)  
        intitule = request.POST.get('intitule', '').strip()  # Utilisation de strip() pour enlever les espaces  
        description = request.POST.get('description', '').strip()  
        institution = request.POST.get('institution', '').strip()  
        date = datetime.datetime.now()
        colors = request.POST.get('colors')
        sexe = request.POST.get('sexe')
        prix = request.POST.get('prix')
        tranche= request.POST.get('tranche')


        # Vous pouvez également vérifier si les champs requis sont remplis  
        if not intitule or not description or not photo:  
            messages.error(request, 'L\'intitule, la description et la photo sont requis.')  
            return redirect(request.META.get('HTTP_REFERER','/'))  # Redirigez vers la même page ou une autre, si vous le souhaitez  

        # Créer et sauvegarder une nouvelle instance de SousActualite  
        sous_actualite = SousActualite(  
            intitule=intitule,  
            description=description,  
            photos=photo if photo else None,
            
            actualite=actualite,  # Utilisez l'objet actualite directement  
            institution_id=institution,
            date=date,
            sexe=sexe,
            prix=prix,
            tranche=tranche,
            colors=colors
        )  
        sous_actualite.save()  
        
        messages.success(request, 'Article Similaire publié')  
        return redirect(request.META.get('HTTP_REFERER','/'))  

    # Si c'est une requête GET, vous pouvez renvoyer un formulaire (non inclus ici)  
    return redirect('/dashboard/e-commerce/')  # Optionnel, selon votre logique d'application 

def get_dataset_accountable(request, id):  
    try:
        dataset = get_object_or_404(DataSet, id=id)  
        data = {  
            'id': dataset.id,  
            'content': dataset.m_formulaire,  
        }  
        return JsonResponse(data)  
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

from django.http import JsonResponse  
def load_data(request, structure_id, periode_id):  
    try:  
        dataset_delt = DSet_DElt.objects.filter(periode_id=periode_id, m_structure_id=structure_id)  

        # Préparer les données à retourner, incluant plusieurs valeurs pour chaque élément de données  
        data_elements = [{  
            'id': dataset.m_dataelement_id,  
            'content': dataset.m_value,  
            'date': dataset.date_element,        # Ajouter le champ date_element  
            'texte': dataset.texte_element,      # Ajouter le champ texte_element  
        } for dataset in dataset_delt]  

        return JsonResponse({'data': data_elements, 'message': 'Data loaded successfully'}, status=200)  

    except DSet_DElt.DoesNotExist:  
        return JsonResponse({'error': 'Data not found for the given parameters'}, status=404)  
    except Exception as e:  
        return JsonResponse({'error': str(e)}, status=500)
from django.core.exceptions import ObjectDoesNotExist
import json
import json  
from django.db import transaction  
from django.core.exceptions import ObjectDoesNotExist  
from django.contrib import messages  
# def save_value(request):  
#     if request.method == "POST":  
#         context = basis(request)  

#         try:  
#             dataset_id = int(request.POST["dSv_id"])  
#             r_dataset = DataSet.objects.get(id=dataset_id)  
#             r_user = request.user.personnel  
#             r_period1 = request.POST["period1_saisie"]  
#             r_period2 = request.POST["period2_saisie"]  
#             structure = request.POST['struc_selec']  

#             with transaction.atomic():  
#                 # Enregistrement du DataSetValue  
#                 entity = DataSetValue(  
#                     m_dataset=r_dataset,  
#                     m_user=r_user,  
#                     m_period_value=r_period1,  
#                     m_sub_period_value=r_period2  
#                 )  
#                 entity.save()  
                
#                 # Récupération des valeurs d'indicateurs  
#                 indicator_values = json.loads(request.POST.get('indicator-values', '{}'))  
#                 indicator_ids = json.loads(request.POST.get('indicator-ids', '[]'))  

#                 for indicator_id in indicator_ids:  
#                     indicator_value = indicator_values.get(indicator_id, None)  
#                     if indicator_value is not None:  
#                         IndicateurValeur.objects.create(  
#                             type_donnee="valeur_form",  
#                             indicateur_id=indicator_id,  
#                             periode_ok_id=r_period2,  
#                             valeur=indicator_value,  
#                             structure_id=structure,  
#                             institution_id=context['actual_institution'].id  
#                         )  

#                 # Récupérer les valeurs d'éléments  
#                 element_values_raw = request.POST.get('elementsArea', '')  
#                 element_values = json.loads(element_values_raw) if element_values_raw else []  

#                 for element in element_values:  
#                     element_id = element.get('id')  # L'identifiant de l'élément  
#                     element_value = element.get('value')  # La valeur de l'élément  

#                     # Assurez-vous que l'ID et la valeur ne sont pas vides  
#                     if element_id and element_value:  
#                         try:  
#                             # Récupération de l'objet DataElement à partir de l'ID  
#                             data_element = DataElement.objects.get(id=element_id)  

#                             # Création de l'entrée DSet_DElt  
#                             dt = DSet_DElt(  
#                                 m_dataelement=data_element,  
#                                 m_dataset_value=entity,  
#                                 periode_id=r_period2,  
#                                 m_structure_id=structure,  
#                                 m_value=element_value  
#                             )  
#                             dt.save()  
                           
#                         except ObjectDoesNotExist:  
#                             messages.error(request, f"DataElement introuvable pour ID: {element_id}")  
#                         except Exception as e:  
#                             messages.error(request, f"Une erreur s'est produite pour l'ID {element_id}: {str(e)}")  

#             messages.success(request, 'Informations Renseignées Avec Succès')  

#         except ObjectDoesNotExist:  
#             messages.error(request, "Dataset introuvable.")  
#         except Exception as e:  
#             messages.error(request, f"Une erreur s'est produite : {str(e)}")  
        
#         finally:  
#             return redirect('/alert_notifs/0/0/')  

#     return redirect('/alert_notifs/0/0/') 
def save_value(request):  
    if request.method == "POST":  
        context = basis(request)  

        try:  
            # Récupérer l'identifiant du dataset à partir de la requête POST  
            dataset_id = int(request.POST["dSv_id"])  
            r_dataset = DataSet.objects.get(id=dataset_id)  
            r_user = request.user.personnel  
            r_period1 = request.POST["period1_saisie"]  
            r_period2 = request.POST["period2_saisie"]  
            structure = request.POST['struc_selec']  
        
            with transaction.atomic():  
                # Enregistrement du DataSetValue  
                entity = DataSetValue(  
                    m_dataset=r_dataset,  
                    m_user=r_user,  
                    m_period_value=r_period1,  
                    m_sub_period_value=r_period2,
                   
                )  
                entity.save()  
                
                # Récupération des valeurs d'indicateurs  
                indicator_values = json.loads(request.POST.get('indicator-values', '{}'))  
                indicator_ids = json.loads(request.POST.get('indicator-ids', '[]'))  

                # Traitement de chaque indicateur reçu  
                for indicator_id in indicator_ids:  
                    indicator_value = indicator_values.get(indicator_id, None)  
                    if indicator_value is not None:  
                        #print(f"Traitement de l'indicateur ID: {indicator_id}, Valeur: {indicator_value}")  # Debug  
                        # Modification pour assurer la mise à jour correcte  
                        IndicateurValeur.objects.update_or_create(  
                            date_saisie=timezone.now(),
                            indicateur_id=indicator_id,  
                            periode_ok_id=r_period2,  
                            structure_id=structure,  
                            institution_id=context['actual_institution'].id,  
                            defaults={  
                                'valeur': indicator_value,  
                                'type_donnee': "valeur_form",  
                            }  
                        )  

                # Récupération et traitement des valeurs d'éléments  
                element_values_raw = request.POST.get('elementsArea', '')  
                element_values = json.loads(element_values_raw) if element_values_raw else []  

                for element in element_values:  
                    element_id = element.get('id')  # L'identifiant de l'élément  
                    element_value = element.get('value')  # La valeur de l'élément  
                    

                  

                    # Assurez-vous que l'ID et la valeur ne sont pas vides  
                    if element_id and element_value:  
                        
                        #print(f"Traitement de l'élément ID: {element_id}, Valeur: {element_value}")  # Debug  
                        try:  
                            # Récupération de l'objet DataElement à partir de l'ID  
                            data_element = DataElement.objects.get(id=element_id) 

                            if data_element.m_value_type == 'Date':
                                dt, created = DSet_DElt.objects.update_or_create(  
                                date_saisie=timezone.now(),
                                periode_id=r_period2,  
                                m_structure_id=structure,  
                                m_dataelement=data_element,  
                                defaults={'date_element': element_value, 'm_dataset_value': entity}  
                            )   
                            elif(data_element.m_value_type == 'Text'):
                                dt, created = DSet_DElt.objects.update_or_create(  
                                date_saisie=timezone.now(),
                                periode_id=r_period2,  
                                m_structure_id=structure,  
                                m_dataelement=data_element,  
                                defaults={'texte_element': element_value, 'm_dataset_value': entity})
                            else:
                                dt, created = DSet_DElt.objects.update_or_create(  
                                date_saisie=timezone.now(),
                                periode_id=r_period2,  
                                m_structure_id=structure,  
                                m_dataelement=data_element,  
                                defaults={'m_value': element_value, 'm_dataset_value': entity})

                         
                            
                                

                            
                                
                           
                        except ObjectDoesNotExist:  
                            messages.error(request, f"DataElement introuvable pour ID: {element_id}")  
                        except Exception as e:  
                            messages.error(request, f"Une erreur s'est produite pour l'ID {element_id}: {str(e)}")  

            messages.success(request, 'Informations Renseignées Avec Succès')  

        except DataSet.DoesNotExist:  
            messages.error(request, "Dataset introuvable.")  
        except ValueError:  # Catch any conversion issues  
            messages.error(request, "ID Dataset invalide.")  
        except Exception as e:  
            messages.error(request, f"Une erreur s'est produite : {str(e)}")  
        
        finally:  
            return redirect(request.META.get('HTTP_REFERER','/'))
def add_periode(request):  
    if request.method == "POST":  
        try:  
            nom = request.POST['nom']  
            annee = request.POST['annee']  
            periode = request.POST['periodicite']  
            numero = request.POST['numero']  
            nicename = request.POST.get('nicename')
            # Vérifiez si tous les champs sont remplis  
            if not all([nom, annee, periode, numero]):  
                messages.error(request, 'Renseignez tous les champs obligatoires.')  
                return redirect('/configurations_admin/')  
            
            # Créez l'objet  
            save_data = PeriodeOk.objects.create(  
                nom=nom,  
                annee=annee,  
                numero_ordre=numero,  
                periodicite_id=periode,
                nicename = nicename 
            )  
            
            messages.success(request, 'Période renseignée avec succès!')  
        
        except Exception as e:  
            messages.error(request, f'Erreur lors de l\'ajout de la période: {str(e)}')  
            return redirect('/configurations_admin/')  
    
    return redirect('/configurations_admin/')  
def delete_periode(request,id):
    periodeok = PeriodeOk.objects.get(id=int(id))
    periodeok.delete()
    messages.success(request,'Periode Retiré Avec Succes!')
    return redirect('/configurations_admin/')

def invoice_district(request):  
    inherited_structures = []  # Initialiser la liste pour éviter les erreurs si la méthode n'est pas POST  

    if request.method == "POST":  
        periode = request.POST['period']  
        structure_id = request.POST['structure']  
        
        # Récupérer la structure sélectionnée  
        selected_structure = Structure.objects.get(id=structure_id)  

        # Récupérer les structures qui héritent de la structure sélectionnée  
        inherited_structures = selected_structure.children.all()  # Cela récupère toutes les structures enfants  

        # Fetch DSet_DElt data (modify to filter if needed)  
        indicateur_valeur = IndicateurValeur.objects.filter(periode_ok_id=periode, structure_id=structure_id)  

        # Generate a random invoice number  
        invoice_number = random.randint(100000, 999999)  # Change the range as needed  

        # Prepare context  
        context = basis(request)  # Assurez-vous que cette fonction est définie ailleurs  
        context.update({  
            'indicateur_valeur': indicateur_valeur,  
            'invoice_number': invoice_number,  # Add the random invoice number to the context  
            'periode': periode,  
            'structure': Structure.objects.all(),  # Pass all structures for the dropdown  
            'inherited_structures': inherited_structures,  # Add inherited structures to context  
        })  

        template_path = "webpages/ctn_bpf/invoices_district.html"  # Assuming template path is a string  

        try:  
            template = get_template(template_path)  
        except TemplateDoesNotExist:  
            print(f"Error: Template '{template_path}' not found.")  
            return None  # Handle missing template gracefully  

        # Render the template with the context  
        html = template.render(context)  

        # Create a BytesIO object to hold the PDF content  
        result = io.BytesIO()  

        # Convert HTML to PDF using pisaDocument  
        try:  
            pdf = pisa.pisaDocument(io.BytesIO(html.encode("ISO-8859-1")), result)  
            if not pdf.err:  
                return HttpResponse(result.getvalue(), content_type='application/pdf')  
        except Exception as e:  
            print(f"Error generating PDF: {e}")  # Log the error for debugging  
            return None  # Handle PDF generation errors  

    return None  # If no errors occur but no PDF is generated  

def search_period_id(request):
    selected_id = request.GET.get('annee')
    periode_ok_id = PeriodeOk.objects.filter(annee=selected_id).values('id', 'nom')
    return JsonResponse(list(periode_ok_id), safe=False)

def add_nature_indicateur(request):
    if request.method == 'POST':
        try:
            libelle = request.POST['libelle']
            save_nature = NatureIndicateur.objects.create(libelle=libelle)
            save_nature.save()
            messages.success(request,'Enregistrement Reussi')
            return redirect('/evaluer/0/')
        except Exception as e:
            messages.error(request,'Une Erreur est survenue')
            return redirect('/evaluer/0/')
    return redirect(request.META.get('HTTP_REFERER','/'))


def data_sets_duplicate(request, id):  
    try:  
        # Retrieve the original dataset  
        instance_dataset = DataSet.objects.get(id=int(id))  
        
        # Create a new instance with the same field values  
        save_duplicate = DataSet(  
            # Assuming you want to copy all non-ID fields  
            m_name=instance_dataset.l,          # Example field  
            
            # Add other fields here  
        )  

        # Save the duplicated instance  
        save_duplicate.save()  

        messages.success(request, 'Duplication réussie')  # Success message  
        return redirect(request.META.get('HTTP_REFERER', '/'))  
    
    except DataSet.DoesNotExist:  
        messages.error(request, 'Le jeu de données demandé n\'existe pas.')  
        # print(f'Dataset with id {id} does not exist.')  
    except Exception as e:  
        messages.error(request, f'une erreur est survenue: {e}')  
        # print(f'Error occurred: {e}')  

    return redirect(request.META.get('HTTP_REFERER', '/'))  

from django.views.decorators.http import require_POST  
@require_POST
def delete_selected_operations(request):
    if request.method == 'POST':
        try:
            # Validate IDs (example using try-except)
            selected_ids = []
            for operation_id in request.POST.getlist('selected_id'):
                try:
                    int(operation_id)  # Check if ID is an integer
                    selected_ids.append(int(operation_id))
                except ValueError:
                    messages.warning(request, 'Une erreur est survenue : ID invalide.')
                    return redirect(request.META.get('HTTP_REFERER', '/'))

            # Confirm deletion (example using JavaScript)
            if not selected_ids:
                messages.warning(request, 'Aucune opération sélectionnée.')
                return redirect(request.META.get('HTTP_REFERER', '/'))
            # ... (implement confirmation using JavaScript, if desired) 

            Operation.objects.filter(pk__in=selected_ids).delete()
            messages.success(request, 'Suppression réussie.')
        except Exception as e:
            messages.error(request, f'Une erreur est survenue : {e}')
    return redirect(request.META.get('HTTP_REFERER', '/'))
from django.db.models import Sum  

def view_reult(request, id):  
    context = basis(request)  # Assurez-vous que cette fonction existe et est correcte.  
    indicateur = get_object_or_404(Indicateur, id=int(id))  
    template = 'webpages/ctn_bpf/view_result.html'  
    
    # Utilisez 'aggregate' correctement pour calculer la somme  
    indicateur_calcul = IndicateurValeur.objects.filter(indicateur_id=indicateur,type_donnee='valeur_form').aggregate(total_valeur=Sum('valeur'))  
    
    # Access the correct key 'total_valeur'  
    total = indicateur_calcul['total_valeur'] if indicateur_calcul['total_valeur'] is not None else 0  

    # Mettre à jour le contexte  
    context['indicateur'] = indicateur  
    context['total'] = total  
    return render(request, template, context)  

from django.views.decorators.csrf import csrf_exempt  
@csrf_exempt  # Note: À utiliser avec précaution; vérifiez que vous utilisez le CSRF token dans vos requêtes AJAX pour la sécurité  
def toggle_public(request):  
    if request.method == 'POST':  
        actualite_id = request.POST.get('id')  
        is_public = request.POST.get('is_public') == 'true'  # Convertir la chaîne en booléen  

        try:  
            actualite = Actualite.objects.get(id=actualite_id)  
            actualite.is_public = is_public  
            actualite.save()  
            response_data = {'success': True}  
        except Actualite.DoesNotExist:  
            response_data = {'success': False, 'error': 'Actualité introuvable'}  

        return JsonResponse(response_data)  


def dataset_load(request,operation_id, id):  
    context = basis(request)  # Supposons que cette fonction setup le contexte de base  
    template = 'webpages/ctn_bpf/load_dataset.html'  
    
    # Récupérer l'opération par ID  
    dataset = get_object_or_404(DataSet, id=int(id))  # Utilisation de get_object_or_404 pour gérer les erreurs  
    operation = Operation.objects.get(id=int(operation_id))
    operations = Operation.objects.all()
    context['operation'] = operation

    context['dataset'] = dataset
    all_operation_dataset = operation.dataset.all()
    context['operations'] =operations
    context['all_operation_dataset'] = all_operation_dataset
   
    # Récupérer la période et la structure associées à l'opération  
    context['periode'] = operation.periode_ok 
    context['structure'] = operation.structure  

    # Récupérer toutes les périodes et structures si nécessaire  
    periode_ok = PeriodeOk.objects.all() # (si voulue)  
    structure_s = Structure.objects.all() # (si voulue)  
    context['periode_ok'] = periode_ok  
    context['structure_s'] = structure_s  
    return render(request, template, context)  
def loaddata_set(request,id,operation_id):
    context = basis(request)  # Supposons que cette fonction setup le contexte de base  
    template = 'webpages/ctn_bpf/load_accountable.html'  
    
    # Récupérer l'opération par ID  
    dataset = get_object_or_404(DataSet, id=int(id))  # Utilisation de get_object_or_404 pour gérer les erreurs  
    operation = Operation.objects.get(id=int(operation_id))
    operations = Operation.objects.all()
    context['operation'] = operation

    context['dataset'] = dataset
    all_operation_dataset = operation.dataset.all()
    context['operations'] =operations
    context['all_operation_dataset'] = all_operation_dataset
   
    # Récupérer la période et la structure associées à l'opération  
    context['periode'] = operation.periode_ok 
    context['structure'] = operation.structure  

    # Récupérer toutes les périodes et structures si nécessaire  
    periode_ok = PeriodeOk.objects.all() # (si voulue)  
    structure_s = Structure.objects.all() # (si voulue)  
    context['periode_ok'] = periode_ok  
    context['structure_s'] = structure_s  
    return render(request, template, context) 

def calendar(request):
    template ='webpages/ctn_bpf/calendar.html'
    context=basis(request)
    return render(request,template,context)

from django.http import JsonResponse  

def get_operations(request):  
    # Récupérer les opérations avec le nom du personnel grâce à select_related  
    operations = Operation.objects.select_related('personnel').values(  
        'nom',   
        'date_echeance',   
        'personnel__nom'  # Assuming 'nom' is the field for the personnel's name  
    )  
    
    operations_list = list(operations)  

    # A ce stade, chaque operation contiendra le nom du personnel sous la clé 'personnel__nom'  
    for operation in operations_list:  
        operation['nom_personne'] = operation.pop('personnel__nom')  # Récupérer le nom du personnel et le remplacer sous une nouvelle clé  

    return JsonResponse(operations_list, safe=False)  




def file_duplik(request, id):  
    # The template to be rendered  
    template = 'webpages/ctn_bpf/operations_clone.html'  
    context = basis(request)  
    actual_institution = context['actual_institution']
    
    # Prepare the basis context (assuming 'basis' is a function that prepares a dict)  
    context = basis(request)  

    # Retrieve the operation object, using get_object_or_404 for better error handling  
    operation = get_object_or_404(Operation, id=int(id))  
    context['operation'] = operation  

    # Retrieve all datasets  
    datasets = DataSet.objects.filter(m_institution=actual_institution) 
    context['datasets'] = datasets  
    periode_ok = PeriodeOk.objects.distinct('annee','nom')
    context['periode_ok'] =periode_ok
    structure= Structure.objects.filter(institution=actual_institution)

    personne = Personnel.objects.filter(actual_institution=actual_institution)
    context['personne'] = personne
    # Retrieve datasets associated with the operation  
    operation_dataset = operation.dataset.all()  
    context['operation_dataset'] = operation_dataset  
    context['structure'] = structure

    # Je recuperes Les DataSets Et Jexclus ceux qui appartiennent aux operations
     # Je recuperes Les DataSets Et Jexclus ceux qui appartiennent aux operations

      # Je recuperes Les DataSets Et Jexclus ceux qui appartiennent aux operations
    dataset_None_operation = datasets.exclude(id__in=operation_dataset.values_list('id',flat=True))

     # Je recuperes Les DataSets Et Jexclus ceux qui appartiennent aux operations
     # Je recuperes Les DataSets Et Jexclus ceux qui appartiennent aux operations
     # Je recuperes Les DataSets Et Jexclus ceux qui appartiennent aux operations


    context['dataset_None_operation'] = dataset_None_operation




    nature = NatureOperation.objects.all()
    context['nature'] = nature
    categorie_operation = CategorieOperation.objects.all()
    context['categorie_operation'] = categorie_operation

    # Render the template with the context  
    return render(request, template, context)  
    # return HttpResponse(operation_dataset)

    

    return render(request,template,context)


def grub_form(request,id):
    dataset = DataSet.objects.get(id=id)
    context=basis(request)
    
    

    structure = Structure.objects.filter(parent=None,institution=context['actual_institution'])
    periode_ok=PeriodeOk.objects.distinct('annee')
    context['dataset'] = dataset
    context['structure'] = structure
    context['periode_ok']=periode_ok
    all_dataset = DataSet.objects.filter(m_institution = context['actual_institution'])
    context['all_dataset'] = all_dataset
    context['sub_structures'] = {s.id: Structure.objects.filter(parent=s) for s in structure} 
    template ='webpages/ctn_bpf/grub.html'
    return render(request,template,context)











@transaction.atomic  
def duplicate_operation(request, id):   
    context = basis(request)  
    actual_institution = context['actual_institution']  

    # Attempt to retrieve the original item or raise 404 if not found  
    try:  
        original_item = Operation.objects.get(id=int(id))  
    except Operation.DoesNotExist:  
        raise Http404("Operation not found")  

    # Creating a new object with the same attributes  
    duplicated_item = Operation(  
        nom=original_item.nom,  
        personnel=original_item.personnel,  
        code=original_item.code,  
        accountable=original_item.accountable,  
        informed=original_item.informed,  
        consulted=original_item.consulted,  
        date_echeance=original_item.date_echeance,  
        m_institution=actual_institution,  
        priorite = original_item.priorite,
        etat=original_item.etat,
        montant=original_item.montant,
        montant2=original_item.montant2,
        date_creation = original_item.date_creation,
        m_tache_plannification = original_item.m_tache_plannification,
        tache=original_item.tache,
        is_deleted = original_item.is_deleted,
        periode = original_item.periode,
        periode_ok = original_item.periode_ok,
        categorie = original_item.categorie,
        nature_operation = original_item.nature_operation,

    )  

    # Save the duplicated object in the database  
    duplicated_item.save()  

    # If dataset is a ManyToMany field, replicate relationships  
    duplicated_item.dataset.set(original_item.dataset.all())  # Make sure to handle many-to-many correctly  

    # Success message  
    messages.success(request, f'L\'operation "{duplicated_item.nom}" a été dupliqué avec succès.')  
    
    # Redirecting to the previous page or a default fallback  
    return redirect(request.META.get('HTTP_REFERER', '/'))  

def gantt_planification(request):
    try:
        context=basis(request)
        actual_institution=context['actual_institution']
        operations = Operation.objects.values('date_echeance', 'date_debut', 'nom', 'date_creation').filter(m_institution=actual_institution)
        operation_list = list(operations)  # Convertir QuerySet en liste

        # Format dates to ISO format
        for operation in operation_list:
            if operation['date_debut']:
                operation['date_debut'] = operation['date_debut'].isoformat()
            else:
                # Use date_creation if date_debut is None
                if operation['date_creation']:
                    operation['date_debut'] = operation['date_creation'].isoformat()

            if operation['date_echeance']:
                operation['date_echeance'] = operation['date_echeance'].isoformat()

        return JsonResponse(operation_list, safe=False)  # Renvoie les données en JSON

    except Exception as e:
        messages.error(request, f'Erreur Survenue: {str(e)}')
        return JsonResponse({'error': str(e)}, status=500)

def gantt(request):
    context=basis(request)
    
    template ='webpages/ctn_bpf/gantt.html'
    return render(request,template,context)




def line_delete_structure(request, id):  
    structure = get_object_or_404(Structure, id=int(id))  
    all_models = [Operation, DataSet, IndicateurValeur, DSet_DElt, Personnel]  
    
    can_delete = True  
    
    # Loop through each model to check for relationships  
    for model in all_models:  
        # Check if the model has a foreign key to Structure  
        # If 'structure_id' or any other relevant field is associated, change as needed  
        if model.objects.filter(structure=structure).exists():  # `structure` is the field name  
            can_delete = False  
            break  

    if can_delete:  
        structure.delete()  
        messages.success(request, 'Suppression réussie')  
    else:  
        messages.error(request, 'Cette entité ne peut être supprimée car elle est liée à d\'autres entités.')  
    
    return redirect(request.META.get('HTTP_REFERER', '/'))  


def forms_data(request):
    context=basis(request)
    actual_institution=context['actual_institution']
    dataset = DataSet.objects.filter(m_institution=actual_institution)
    context['dataset'] = dataset
    template ='webpages/ctn_bpf/forms_data.html'
    return render(request,template,context)

# from django.utils import translation
# from django.shortcuts import redirect

# LANGUAGE_SESSION_KEY = 'django_language'  # Définir la clé de session manuellement

# def set_language(request):
#     user_language = request.GET.get('lang', 'fr')
#     print(f"Langue sélectionnée : {user_language}")  # Pour le débogage
#     if user_language:
#         translation.activate(user_language)
#         request.session[LANGUAGE_SESSION_KEY] = user_language  # Utiliser la clé définie
#     return JsonResponse(user_language)



def delete_indicateur(request, id):  
    try:  
        indicateur = Indicateur.objects.get(id=int(id))  
        
        # Check for links to other entities for each model  
        all_models = [DataSet]  # List of models to check against  
        
        # Initialize a flag to check if the indicateur can be deleted  
        can_delete = True  
        
        for model in all_models:  
            if model.objects.filter(m_indicateurs=indicateur).exists():  
                can_delete = False  
                break  # Exit the loop as we found a related entity  
        
        if can_delete:  
            indicateur.delete()  
            messages.success(request, 'Suppression réussie')  
        else:  
            messages.info(request, 'Désolé, vous ne pouvez pas supprimer cet indicateur car il est lié à une entité')  

    except Indicateur.DoesNotExist:  
        messages.warning(request, 'L\'indicateur demandé n\'existe pas')  

    return redirect(request.META.get('HTTP_REFERER', '/'))  

def add_groupe_indicateur(request):
    if request.method == 'POST':
        try:
            libelle = request.POST['libelle']

            save_groupe_indicateur= GroupeIndicateur.objects.create(
                libelle=libelle
            )

            save_groupe_indicateur.save()
            messages.success(request,'Enregistrement Reussie')
            return redirect(request.META.get('HTTP_REFERER','/'))
        except Exception as e:
            messages.error(request,f'Erreur Survenue: {e}')

    return redirect(request.META.get('HTTP_REFERER','/'))


# def add_masters_indicateur(request):
#     if request.method == 'POST':
#         try:
#             libelle = request.POST['libelle']

#             save_masters_indicateur= MasterIndicateur.objects.create(
#                 libelle=libelle
#             )

#             save_masters_indicateur.save()
#             messages.success(request,'Enregistrement Reussie')
#             return redirect(request.META.get('HTTP_REFERER','/'))
#         except Exception as e:
#             messages.error(request,f'Erreur Survenue: {e}')

#     return redirect(request.META.get('HTTP_REFERER','/'))

def Associer_groupe_indicateur(request,id):
    context=basis(request)
    template ='webpages/ctn_bpf/groupe_indicateur.html'
    actual_institution = context['actual_institution'] 
    groupe_indicateur = Indicateur.objects.get(id=int(id))
    groupe_indicateur_not_exists = groupe_indicateur.groupe_indicateur.all()
    indicateur = Indicateur.objects.filter(m_institution=actual_institution)
    unlinked_indicateur = indicateur.exclude(id__in=groupe_indicateur_not_exists.values_list('id', flat=True))
    context['unlinked_indicateur'] = unlinked_indicateur
    
    context['groupe_indicateur'] = groupe_indicateur
    context['groupe_indicateur_not_exists'] = groupe_indicateur_not_exists
    return render(request,template,context)


def analyse_data_indicateur(request,id):
    context = basis(request)
    indicateur = Indicateur.objects.get(id=int(id))
    template='webpages/ctn_bpf/analysis.html'
    context['indicateur'] = indicateur
    return render(request,template,context)



def duplicate_dataset(request, id):
    context = basis(request)
    data_set = DataSet.objects.get(id=id)
    context['data_set'] = data_set
    
    # Récupérer toutes les structures de l'institution actuelle
    all_structures = Structure.objects.filter(institution_id=context["actual_institution"])
    context['all_structures'] = all_structures
    
    # Récupérer les structures liées au DataSet
    linked_structures = data_set.m_structures.all()
    context['linked_structures'] = linked_structures
    
    # Récupérer les structures non liées
    unlinked_structures = all_structures.exclude(id__in=linked_structures.values_list('id', flat=True))
    context['unlinked_structures'] = unlinked_structures
    
    element_donnee = data_set.m_dataelements.all()
    context['element_donnee'] = element_donnee
    
    # Récupérer les indicateurs de l'institution actuelle
    indicateurs = Indicateur.objects.filter(m_institution=context["actual_institution"])
    context['indicateurs'] = indicateurs

    # Récupérer les éléments de données
    dataelts = DataElement.objects.filter(m_institution=context["actual_institution"])
    context['dataelts']=dataelts
     # Récupérer les éléments de donneequi n'appartiennent pas aux datasets
    unlinked_element = dataelts.exclude(id__in=element_donnee.values_list('id',flat=True))
    context['unlinked_element']=unlinked_element
    valeur_indicateur = data_set.m_indicateurs.all()  
    context['valeur_indicateur'] = valeur_indicateur  
    unlinked_indicateur = indicateurs.exclude(id__in=valeur_indicateur.values_list('id', flat=True))  
    context['unlinked_indicateur'] = unlinked_indicateur
    context["menu"] = "h"
    
    if id != 0:
        dataset = DataSet.objects.get(id=int(id))
        context["dataset"] = dataset

    template = "webpages/ctn_bpf/data_sets_duplicate.html"
    return render(request, template, context)


def duplicate_form(request):  
    context = basis(request)  
    
    if request.method == "POST":  
        form_name = request.POST.get('form_name')  
        elements = request.POST.getlist('element')  
        indicateurs = request.POST.getlist('indicateur')  
        dataset=request.POST['dataset']
        
        # Récupération de l'institution actuelle depuis le contexte  
        actual_institution = context['actual_institution'].id  
        role = request.POST.getlist('role')  
        structure = request.POST.getlist('structure')  

        # Création d'une nouvelle instance de DataSet  
        dS = DataSet.objects.create(m_formulaire=dataset,m_name=form_name, m_institution_id=actual_institution)  

        # Établissement des relations avec les éléments, indicateurs, rôles et structures  
        dS.m_indicateurs.set(indicateurs)  
        dS.m_dataelements.set(elements)  
        dS.m_roles.set(role)  
        dS.m_structures.set(structure)  

        # Sauvegarde de l'objet DataSet avec ses relations  
        dS.save()  
        messages.success(request,'Duplication Reussie')

        # Redirection vers une URL définie  
        return redirect('/configurations_admin/')  # Remplacez 'response_url' par une URL ou un nom d'URL réel  

    # Si la méthode n'est pas POST, vous pourriez retourner une page ou un formulaire  
    # return render(request, 'template_name.html', context)  

def add_groupe_structure(request):
    if request.method == 'POST':
        try:

            groupe= request.POST['groupe_structure']
            structure = request.POST.getlist('structure')

            save_groupe_structure = GroupeStructure.objects.create(
                nom =groupe
            )
            save_groupe_structure.save()
            for structures in structure:
                save_groupe_structure.structure.add(structures)
            messages.success(request,'Enregistrement Reussie')
            return redirect(request.META.get('HTTP_REFERER','/'))
        except Exception as e:
            messages.error(request, f'Erreur Survenue: {e}')
    return redirect(request.META.get('HTTP_REFERER','/'))
    
def data_element_group(request):
    template ='webpages/ctn_bpf/group_dataelement.html'
    context=basis(request)
    actual_institution = context['actual_institution']
    data_element = DataElement.objects.filter(m_institution = actual_institution)
    context['data_element'] = data_element
    save_groupe_dataelement = GroupeElement.objects.all()
    context['save_groupe_dataelement']=save_groupe_dataelement
    return render(request,template,context)

def add_groupe_dataelement(request):
    if request.method == 'POST':
        try:
            nom = request.POST['nom']

            save_groupe_dataelement = GroupeElement.objects.create(
                nom=nom
            )
            save_groupe_dataelementsave()
            messages.success(request,'Enregistrement Reussi')
            return redirect(request.META.get('HTTP_REFERER','/'))
        except Exception as e:
            messages.error(request,f'Erreur Survenue:{e}')
    return redirect(request.META.get('HTTP_REFERER','/'))
from django.http import JsonResponse  
from django.contrib import messages  
from django.shortcuts import redirect  
from .models import GroupeElement, DataElement  # Adjust the import according to your project structure  

def add_all_group(request):  
    if request.method == 'POST':  
        try:  
            dataelement_ids = request.POST.getlist('dataelement')  # Adjusted to handle list correctly  
            groupe_name = request.POST.get('nom', '').strip()  # Use get to avoid KeyError  
            
            if not groupe_name:  
                messages.error(request, 'Group name cannot be empty.')  # Handle empty group name  
                return JsonResponse({'status': 'error', 'message': 'Group name cannot be empty.'}, status=400)  
            
            # Create a new group  
            save_groupe_data_element = GroupeElement.objects.create(nom=groupe_name)  
            
            # Iterate over provided data elements' IDs and add them to the group  
            for element_id in dataelement_ids:  
                try:  
                    instance_dataelement = DataElement.objects.get(id=int(element_id))  # Retrieve the DataElement instance  
                    save_groupe_data_element.element.add(instance_dataelement)  # Add instance to the group  
                except DataElement.DoesNotExist:  
                    messages.error(request, f'DataElement with ID {element_id} does not exist.')  # Log missing elements  
            
            messages.success(request, 'Enregistrement Réussi')  # Success message  
            # return JsonResponse({'status': 'success', 'dataelement': dataelement_ids})  
        
        except Exception as e:  
            messages.error(request, f'Erreur Survenue: {e}')  # Display error message  
            return JsonResponse({'status': 'error', 'message': str(e)}, status=500)  # Return error response  
        return redirect(request.META.get('HTTP_REFERER','/'))
def list_element(request,id):
    context = basis(request)
    actual_institution = context['actual_institution']
    groupe = GroupeElement.objects.get(id=int(id))
    dataelement = DataElement.objects.filter(m_institution=actual_institution)
    context['dataelement'] = dataelement
    context['groupe'] = groupe
    list_all_element_linked = groupe.element.all()
    context['list_all_element_linked'] = list_all_element_linked
   

    un_linked_data_element = dataelement.exclude(id__in=list_all_element_linked.values_list('id', flat=True))
    context['un_linked_data_element'] = un_linked_data_element
    template ='webpages/ctn_bpf/list_all_element_group.html'

    return render(request,template,context)
def add_all_group_indicateur(request):
    if request.method == 'POST':
        try:
            nom = request.POST['nom']
            indicateur = request.POST.getlist('indicateur')

            save_groupe_indicateur = GroupeIndicateur.objects.create(libelle=nom)
            save_groupe_indicateur.save()
            for indicateurs in indicateur:
                indicator = Indicateur.objects.get(id=int(indicateurs))
                save_groupe_indicateur.indicateur.add(indicator)
            messages.success(request,'Enregistrement Reussi')
        except Exception as e:
            messages.error(request,f'Erreur Survenue:{e}')
    return redirect(request.META.get('HTTP_REFERER','/'))
def list_indicator_group(request,id):
    context = basis(request)
    actual_institution = context['actual_institution']
    indicateur = Indicateur.objects.filter(m_institution = actual_institution)
    context['indicateur'] = indicateur
    template ='webpages/ctn_bpf/list_all_indicator.html'
    groupe_indicateur = GroupeIndicateur.objects.get(id=int(id))
    context['groupe_indicateur'] = groupe_indicateur
    linkend_indicateur = groupe_indicateur.indicateur.all()
    context['linkend_indicateur'] = linkend_indicateur
    un_linked_indicateur = indicateur.exclude(id__in=linkend_indicateur.values_list('id',flat=True))
    context['un_linked_indicateur'] = un_linked_indicateur
    return render(request,template,context)
def indicator_group(request):
    template ='webpages/ctn_bpf/indicator_group.html'
    context = basis(request)
    actual_institution =context['actual_institution']
    groupe_indicateur = GroupeIndicateur.objects.all()
    indicateur = Indicateur.objects.filter(m_institution =actual_institution )
    context['groupe_indicateur'] = groupe_indicateur
    context['indicateur'] = indicateur
    return render(request,template,context)
def delete_group_indicator(request,id):
    groupe_indicateur = GroupeIndicateur.objects.get(id=int(id))
    if groupe_indicateur.indicateur.exists():
        messages.info(request,'Ce Groupe Ne Peut Etre Retire Car Contient Des Indicateurs')
    else:
        groupe_indicateur.delete()
        messages.success(request,'Indicateur Retire Avec Succes')
    return redirect(request.META.get('HTTP_REFERER','/'))
def delete_groupe_element(request,id):
    groupe_element = GroupeElement.objects.get(id=int(id))
    if groupe_element.element.exists():
        messages.info(request,'Ce Groupe Ne Peut Retire')
    else:
        groupe_element.delete()
        messages.success(request,'Groupe Retire Avec Succes')
    return redirect(request.META.get('HTTP_REFERER','/'))

def dataelt(request,id):
    data_element = DataElement.objects.get(id=int(id))
    data_element.delete()
    messages.success(request,'Supression Reussi')
    return redirect(request.META.get('HTTP_REFERER','/'))
    

def add_groupe_indicateur(request):
    if request.method == 'POST':
        try:
            nom= request.POST['nom']

            save_groupe_indicateur = GroupeIndicateur.objects.create(libelle=nom)
            save_groupe_indicateur.save()
            messages.success(request,'Enregistrement Reussi')
            return redirect(request.META.get('HTTP_REFERER','/'))
        except Exception as e:
            messages.error(request,f'erreur Suvenue:{e}')
    return redirect(request.META.get('HTTP_REFERER','/'))

def groupe_structure(request):  
    template = 'webpages/ctn_bpf/groupe_structure.html'  
    context = basis(request)  

    # Récupère toutes les instances de GroupeStructure  
    groupe_structure = GroupeStructure.objects.all()  
    context['groupe_structure'] = groupe_structure  

    # Obtient l'institution actuelle à partir du contexte  
    actual_institution = context.get('actual_institution')  
    
    # Récupère les structures de premier niveau (parent=None) liées à l'institution actuelle  
    structure = Structure.objects.filter(institution=actual_institution, parent=None)  
    context['structure'] = structure  

    # Crée une liste pour contenir toutes les structures liées  
    all_structure_linked = []  

    # Rassemble toutes les structures liées pour chaque groupe  
    for groupe in groupe_structure:  
        all_structure_linked.extend(groupe.structure.all())  

    context['all_structure_linked'] = all_structure_linked  

    return render(request, template, context)

def add_forms(request,id):
    context= basis(request)
    entities = InsitutionEntities.objects.get(id=int(id))
    actual_institution=context['actual_institution']

    template= 'webpages/ctn_bpf/forms_entity.html'
    context['entities'] = entities

    dataset = DataSet.objects.filter(m_institution = actual_institution)

    context['dataset'] = dataset

    all_institutions_datasets = entities.dataset.all()

    context['all_institutions_datasets'] = all_institutions_datasets

    all_dataset = dataset.exclude(id__in=all_institutions_datasets.values_list('id',flat=True))
    context['all_dataset'] = all_dataset

    return render(request,template,context)

from django.contrib import messages  
from django.shortcuts import redirect, get_object_or_404  

def add_dataset_institution(request, id):  
    if request.method == 'POST':  
        # Use get_object_or_404 for cleaner code and automatic 404 handling.  
        dataset_entities = get_object_or_404(InsitutionEntities, id=int(id))  
        
        # Retrieve the list of dataset IDs from the request.  
        dataset_ids = request.POST.getlist('dataset', [])  

        try:  
            # Use bulk create to add multiple datasets efficiently if possible  
            # If dataset is a ManyToManyField, you might want to use `add` method on the field directly.  
            for dataset_id in dataset_ids:  
                dataset_entities.dataset.add(dataset_id)  # Add dataset using id directly  

            messages.success(request, 'Formulaire Associe Avec Succes')  
        except Exception as e:  
     
            messages.error(request, 'Une erreur s\'est produite lors de l\'ajout des datasets.')  

        # Redirect the user back to the referring page  
        return redirect(request.META.get('HTTP_REFERER', '/'))  
    
    # If the request was not a POST, still redirect back  
    return redirect(request.META.get('HTTP_REFERER', '/'))


def delete_entities(request,id):
    entities = Entity.objects.get(id=int(id))

    all_models =[Indicateur]

    for all_of_fames in all_models:
        if all_of_fames.objects.filter(m_enti=entities).exists():
            messages.info(request,'Cette Entite Ne Peut Etre Retire')

            return redirect(request.META.get('HTTP_REFERER','/'))

        else:
            entities.delete()
            messages.success(request,'Entite Retire Avec Succes')
    return redirect(request.META.get('HTTP_REFERER','/'))
    
def add_structure(request):
    context = basis(request)
    if request.method == 'POST':
        try:

            structure = request.POST.get('structure',None)
            longitude = request.POST.get('longitude',None)
            latitude = request.POST.get('latitude',None)
            file = request.FILES.get('file',None)
            designation = request.POST.get('designation',None)
            actual_institution = context['actual_institution']

           

            structure = Structure(
                nom= structure,
                longitude = longitude,
                latitude = latitude,
                photo = file,
                designation = designation,
                institution = actual_institution
            )
            structure.save()
            messages.success(request,'Enregistrement Reussi')
            return redirect('/structures/')
        except Exception as e:
            messages.error(request,f"Erreur Survenue Au Monment Du Traitement De:{e}")
    return redirect('/structures/')


def edit_periode(request,id):
    template ='webpages/ctn_bpf/edit_periode.html'
    context = basis(request)
    periode = get_object_or_404(PeriodeOk, id=id)
    context['periode'] = periode
    periodicite = Periode.objects.all()
    context['periodicite'] = periodicite
    return render(request,template,context)


def edition_periode(request,id):
    if request.method == 'POST':
        try:
            nom =request.POST['nom']
            annee = request.POST['annee']
            indice = request.POST['numero']
            periodicite = request.POST['periodicite']
            nicename= request.POST['nicename']

            periode = get_object_or_404(PeriodeOk, id=id)
            periode.nom = nom
            periode.annee = annee
            periode.numero_ordre = indice
            periode.periodicite_id = periodicite
            periode.nicename = nicename
            periode.save()
            messages.success(request,'Edition Reusie')
            return redirect('/configurations_admin/')
        except Exception as e:

            messages.error(request,'Erreur Survenue:{e}')
    return redirect('/configurations_admin/')


def roles_personnels(request):
    context=basis(request)
    actual_institution=context['actual_institution']
    template ='webpages/ctn_bpf/roles_personnels.html'
    roles = Role.objects.filter(actual_institution=actual_institution)
    context['roles']=roles
    return render(request,template,context)


def add_sou_rubrique(request,id):
    context = basis(request)
    rubrique = Rubrique.objects.get(id=int(id))
    actual_institution = context['actual_institution']
    template ='webpages/ctn_bpf/add_sou_rubrique.html'
    context['rubrique'] = rubrique
    return render(request,template,context)

def deleted_personnel(request,id):
    personnel = Personnel.objects.get(id=int(id))
    all_models = [Operation]
    for all_of_fames in all_models:
        if all_of_fames.objects.filter(personnel=personnel).exists():
            messages.info(request,'Imposible de supprimer ce personnel car contient des operations')
            return redirect(request.META.get('HTTP_REFERER','/'))
        else:
            personnel.delete()
        
            messages.success(request,'Personnel Retire Avec Succes')
    return redirect(request.META.get('HTTP_REFERER','/'))

def calculators_operations(request):  
    if request.method == 'POST':  
        date_debut = request.POST.get('date_debut')  
        date_fin = request.POST.get('date_fin')  

        # Convert strings to date objects if necessary  
        try:  
            date_debut = timezone.datetime.strptime(date_debut, '%Y-%m-%d').date()  
            date_fin = timezone.datetime.strptime(date_fin, '%Y-%m-%d').date()  
        except (ValueError, TypeError):  
            return JsonResponse({'error': 'Invalid date format'}, status=400)  

        context = basis(request)  
        actual_institution = context['actual_institution']  
        
        # Calcul du nombre total d'opérations dans la plage de dates  
        total_operations = Operation.objects.filter(  
            m_institution=actual_institution,  
            date_creation__range=(date_debut, date_fin)  # Use date_creation for filtering  
        ).count()  
        
        # Calcul du nombre d'opérations validées et planifiées  
        operations_validated = Operation.objects.filter(  
            m_institution=actual_institution,  
            etat=2,  
            date_creation__range=(date_debut, date_fin)  # Use date_creation for filtering  
        ).count()  
        operations_planned = Operation.objects.filter(  
            m_institution=actual_institution,  
            etat=0,  
            date_creation__range=(date_debut, date_fin)  # Use date_creation for filtering  
        ).count()   

        # Calcul du pourcentage de réalisation  
        operations_calcul = (operations_validated / total_operations * 100) if total_operations > 0 else 0.0  
        
        # Returning the result as JSON  
        return JsonResponse({'operations_percentage': operations_calcul})  

    return JsonResponse({'error': 'Invalid request method'}, status=405) 

from datetime import timedelta  

# def calcul_promptitude(request):  
#     context = basis(request)  
#     actual_institution = context['actual_institution']  
#     operations = Operation.objects.filter(m_institution=actual_institution)  

#     durations = []  
#     for operation in operations:  
#         if operation.date_echeance and operation.date_creation:  
#             # Calculate the difference  
#             duration = operation.date_echeance - operation.date_creation  
#             durations.append(duration.days)  # Append the number of days to the list  
    
#     # Return the durations as a JSON response  
#     return JsonResponse({'durations': durations})  

def api_count_operations(request):
    context = basis(request)
    actual_institution = context['actual_institution'].id
    data = Operation.objects.filter(m_institution_id=actual_institution,etat=2) \
        .values('categorie__intitule') \
        .annotate(count=models.Count('id')) \
        .order_by('-count')
    data_list = [{'name': item['categorie__intitule'], 'y': item['count']} for item in data]
    #print("Données récupérées Par Categorie:", data_list)
    return JsonResponse(data_list, safe=False)

def api_get_categories(request):  
    # Récupérer toutes les catégories  
    categories = CategorieOperation.objects.values('intitule')  # Remplacez 'intitule' par le champ approprié dans votre modèle  
    categories_list = [category['intitule'] for category in categories]  
    
    return JsonResponse(categories_list, safe=False)  


def edit_indicator(request,id):
    template ='webpages/ctn_bpf/edit_indicator.html'
    context = basis(request)
    actual_institution=context['actual_institution']
    indicator = get_object_or_404(Indicateur, id=id)
    context['indicator'] = indicator
    categories = CategorieOperation.objects.all()
    dataelts = DataElement.objects.filter(m_institution=actual_institution)
    context['dataelts'] = dataelts
    context['categories'] = categories
    return render(request,template,context)

def editions_indicator(request,id):
    if request.method == 'POST':
        try:
            nature_indicateur=request.POST['nature_indicateur']
            numerateur= request.POST['numerateur']
            type=request.POST['type']
            nicename = request.POST['nicename']
            indicateur =Indicateur.objects.get(id=int(id))
            indicateur.m_name=nature_indicateur
            indicateur.m_numerateur = numerateur
            indicateur.nicename=nicename
            indicateur.type_aggregation=type
            indicateur.save()
            messages.success(request,'Edition Reussiie')
        except Exception as error:
            messages.error(request,f'Erreur Survenue:{error}')
            return redirect(request.META.get('HTTP_REFERER'))
    return redirect('/evaluer/0/0/')

def template_participant(request):
    try:
        context = basis(request)
        operation_files = OperationFile.objects.all()
        actual_institution = context['actual_institution']
        personnel = Personnel.objects.filter(actual_institution=actual_institution)
        operation = Operation.objects.filter(etat=0, participant=request.user.personnel).order_by('-id')
        context['operation'] = operation
        context['personnel'] = personnel
        context['operation_files'] = operation_files
            
        template = 'webpages/ctn_bpf/participant.html'
       
    except Exception as e:
        context = {'error': str(e)}
        template = '500.html'
    return render(request,template,context)

def count_participant(request):  
    context = basis(request)  
    actual_institution = context['actual_institution']  
    perso = request.user.personnel  

    # Count operations where the personnel matches and etat is "0"  
    count_participant = Operation.objects.filter(participant=perso, statut="0").count()  

    return JsonResponse({'count_participant': count_participant})  

def affecter_operation(request, id):  
    try:  
        operation = Operation.objects.get(id=int(id))  
        
        if request.method == 'POST':  
            responsable_id = request.POST.get('responsible')  
            informed_id = request.POST.get('informed')  
            accountable_id = request.POST.get('accountable')  
            consulted_id = request.POST.get('consulted')  
            date_debut = request.POST['date_debut']  
            date_fin = request.POST['date_fin']  
            commentaire = request.POST['commentaire']  

            # Récupérer le personnel responsable, ajouter une vérification pour personnel responsable  
            if not responsable_id:  
                messages.error(request, 'Le responsable est requis.')  
                return redirect(request.META.get('HTTP_REFERER', '/'))  

            personnel = Personnel.objects.get(id=int(responsable_id))  
            
            # Récupérer le personnel accountable, vérifier et gérer les exceptions  
            instance_accountable = Personnel.objects.get(id=int(accountable_id)) if accountable_id else None  

            # Initialiser les instances pour informed et consulted  
            instance_informed = None  
            instance_consulted = None  
            
            # Récupérer l'instance pour informed si fournie  
            if informed_id:  
                try:  
                    instance_informed = Personnel.objects.get(id=int(informed_id))  
                except Personnel.DoesNotExist:  
                    instance_informed = None  # Si non trouvé, garder None  

            # Récupérer l'instance pour consulted si fournie  
            if consulted_id:  
                try:  
                    instance_consulted = Personnel.objects.get(id=int(consulted_id))  
                except Personnel.DoesNotExist:  
                    instance_consulted = None  # Si non trouvé, garder None   

            # Mise à jour de l'opération  
            operation.personnel = personnel  
            operation.accountable = instance_accountable  
            operation.statut = 1  
            operation.date_debut = date_debut  
            operation.date_echeance = date_fin  
            operation.m_commentaire = commentaire  

            # Si informed ou consulted est défini, les mettre à jour  
            if instance_informed:  
                operation.informed = instance_informed  
            if instance_consulted:  
                operation.consulted = instance_consulted  
            
            operation.save()  

            # Envoi d'e-mails aux personnels  
            personnels_to_notify = {  
                'responsible': (personnel, f'Monsieur {personnel.nom}, vous avez été désigné comme responsable de l\'opération {operation.nom}.'),  
                'accountable': (instance_accountable, f'Monsieur {instance_accountable.nom}, vous avez été désigné comme accountable pour l\'opération {operation.nom}.'),  
            }  

            # Ajouter les notifications si les utilisateurs sont définis  
            if instance_informed:  
                personnels_to_notify['informed'] = (instance_informed, f'Monsieur {instance_informed.nom}, vous avez été désigné comme informed pour l\'opération {operation.nom}.')  
            if instance_consulted:  
                personnels_to_notify['consulted'] = (instance_consulted, f'Monsieur {instance_consulted.nom}, vous avez été désigné comme consulted pour l\'opération {operation.nom}.')  

            for role, (p, message) in personnels_to_notify.items():  
                if p and p.mail:  # Assurez-vous que l'utilisateur a une adresse e-mail  
                    send_mail(  
                        'Notification de désignation d\'opération',  
                        message + f'\n\nDétails supplémentaires :\nDate de début : {date_debut}\nDate de fin : {date_fin}\nCommentaire : {commentaire}\n\nMerci.',  
                        settings.DEFAULT_FROM_EMAIL,  
                        [p.mail],  
                        fail_silently=False,  
                    )  

            messages.success(request, 'Affection réussie et notifications envoyées.')  
    except Exception as e:  
        messages.error(request, f'Erreur survenue : {e}')  

    return redirect(request.META.get('HTTP_REFERER', '/'))   

def edit_role(request,id):
    if request.method == 'POST':
        try:

            nom = request.POST['nom']
            description = request.POST['description']

            role = Role.objects.get(id = int(id))
            role.nom  = nom
            role.description = description
            role.save()
            messages.success(request,'Edition Reussie')
        except Exception as e:
            messages.error(request,f'erreur survenue:{e}')

    return redirect(request.META.get('HTTP_REFERER','/'))

def delete_role(request,id):
    role = Role.objects.get(id=int(id))

    allmodels = [Personnel_Function]

    for allmodel in allmodels:
        if allmodel.objects.filter(m_role=role).exists():
            messages.info(request,'Ce role ne peut etre supprime')
        else:
            role.delete()
            messages.success(request,'Role supprime')
    return redirect(request.META.get('HTTP_REFERER','/'))


def view_actuality(request, id):
    actualities = Actualite.objects.get(id=int(id))
    context = basis(request)
    context['actuality'] = actualities
    sous_actualite = SousActualite.objects.filter(actualite_id=actualities.id)
    context['sous_actualite'] = sous_actualite
    template = 'webpages/ctn_bpf/details_actualite.html'
    baniere = Baniere.objects.all()
    context['baniere'] = baniere
    return render(request,template,context)

from django.shortcuts import redirect  
from django.contrib import messages  
from .models import Faq  

def add_faq(request):  
    if request.method == 'POST':  
        try:  
            intitule = request.POST.get('intitule', None)  
            description = request.POST.get('description', None)  
            file = request.FILES.get('file', None)  

            # Check if file is None (it's optional)  
            if file:  
                newfaqs = Faq.objects.create(  
                    intitule=intitule,  
                    description=description,  
                    logo=file  
                )  
            else:  
                # Create without a file  
                newfaqs = Faq.objects.create(  
                    intitule=intitule,  
                    description=description,  
                    logo=None  
                )  

            messages.success(request, 'Enregistrement réussi')  
        except Exception as e:  
            messages.error(request, f"Erreur d'enregistrement : {e}")  
            print(f'Erreur : {e}')  
            return redirect(request.META.get('HTTP_REFERER', '/'))  

    return redirect(request.META.get('HTTP_REFERER', '/'))  


def sousActuality(request,id):
    
    context = basis(request)
    
    sous_actualite = SousActualite.objects.get(id=int(id))
    context['sous_actualite'] = sous_actualite
    baniere=Baniere.objects.all()
    context['baniere'] = baniere
    template = 'webpages/ctn_bpf/details_sous_actualite.html'
    return render(request,template,context)




import requests
import json
from django.shortcuts import render, redirect
from django.views import View
from django.middleware.csrf import get_token
from django.contrib import messages

class MonFormulaireView(View):
    def get(self, request):
        template = 'webpages/ctn_bpf/configuration_admin.html'
        context = basis(request)  # Assurez-vous que `basis` est défini
        actual_institution = context['actual_institution']
        return render(request, template, context)

    def post(self, request):
        # Créez une session pour gérer les cookies
        session = requests.Session()

        # Récupérez le token CSRF
        csrf_token = get_token(request)

        # Ajoutez le cookie CSRF à la session
        session.cookies['csrftoken'] = csrf_token

        # Récupérez les données du formulaire
        nom = request.POST.get('nom')

        # Définissez la mutation GraphQL
        mutation = f"""
            mutation {{
                createAnnee(nom: {json.dumps(nom)}) {{
                    annee {{
                id
                nom
            }}
                }}
            }}
        """

        # Affichez la mutation pour le débogage
        print("Mutation GraphQL:", mutation)

        # Envoyez la requête à votre API GraphQL
        try:
            response = session.post(
                'https://operaplus:8000/graphql/',
                json={'query': mutation},
                headers={
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrf_token  # Ajoutez le token CSRF dans les en-têtes
                },
                verify=False  # Désactive la vérification SSL
            )

            # Affichez la réponse pour le débogage
            print("Response Status Code:", response.status_code)
            print("Response Body:", response.json())

            # Traitez la réponse
            if response.status_code == 200:
                data = response.json()
                if 'errors' in data:
                    # Gérer les erreurs renvoyées par GraphQL
                    messages.error(request, f"Erreur GraphQL: {data['errors']}")
                    return render(request, 'webpages/ctn_bpf/configuration_admin.html', {'errors': data['errors']})

                # Rediriger vers une page de succès ou afficher un message
                messages.success(request, 'Enregistrement réussi')
                return redirect(request.META.get('HTTP_REFERER', '/'))

            # En cas d'erreur HTTP
            messages.error(request, f"Erreur HTTP: {response.status_code}")
            return render(request, 'webpages/ctn_bpf/configuration_admin.html', {'error': 'Erreur lors de la soumission du formulaire.'})

        except requests.exceptions.RequestException as e:
            # En cas d'erreur de connexion
            messages.error(request, f"Erreur de connexion: {str(e)}")
            return render(request, 'webpages/ctn_bpf/configuration_admin.html', {'error': 'Erreur de connexion au serveur.'})

class Deletes_periodes(View):  
    def post(self, request, id):  
        try:  
            # Récupérer l'objet PeriodeOk ou renvoyer une 404 si non trouvé  
            periode = get_object_or_404(PeriodeOk, id=int(id))  
            
            # Préparer la requête GraphQL pour la suppression  
            query = """  
            mutation($id: ID!) {  
                deletePeriode(id: $id) {  
                    success  
                    message  
                }  
            }  
            """  
            variables = {"id": id}  
            response = requests.post(  
                'https://localhost:8000/graphql',  
                json={'query': query, 'variables': variables}  
            )  
            response_data = response.json()  

            # Vérifiez si la réponse est un succès  
            if response_data.get('data', {}).get('deletePeriode', {}).get('success'):  
                periode.delete()  
                messages.success(request, 'Suppression Réussie')  
            else:  
                raise Exception(response_data.get('errors', 'Erreur inconnue'))  

        except Exception as e:  
            messages.error(request, f'Erreur Survenue : {e}')  
        
        # Rediriger vers la page précédente ou la page d'accueil  
        return redirect(request.META.get('HTTP_REFERER', '/'))  
def account(request, id):  
    template = 'webpages/ctn_bpf/account.html'  
    context = basis(request)  
    
    # Récupérer l'institution par son ID  
    institution = Institution.objects.get(id=str(id))  

    # Filtrer les actualités selon l'institution  
    all_actualities = SousActualite.objects.filter(institution_id=institution.id) 

    all_institution =  Actualite.objects.filter(institution_id=institution.id) 

    videos= Archive.objects.filter(format_fichier='video', institution_id= institution.id)
        
    archives_s = Archive.objects.filter(format_fichier ='pdf',institution=institution.id)
    rubrique = Rubrique.objects.all()
    faq = Faq.objects.all()
     
       

    # Construire le contexte  
    context.update({  
        'all_actualities': all_actualities,  
        'institution': institution,
        'all_institution':all_institution,
        'videos':videos,  
        'archives_s':archives_s,
        'faq':faq,
        'rubrique': rubrique
    })  

    return render(request, template, context)  

def sous_articles(request,id,id2):
    template = 'webpages/ctn_bpf/sous_article_institution.html'

    sous_actualite = SousActualite.objects.get(id=int(id2))

    institution = Institution.objects.get(id=int(id))

    context = {
    'sous_actualite':sous_actualite,
    'institution':institution
    }

    return render(request,template,context)



def all_article(request,id):
    template = 'webpages/ctn_bpf/article_institution.html'
    institution = Institution.objects.get(id=int(id))
    actualite = Actualite.objects.filter(institution_id = institution.id)
    context = {
    'actualite':actualite,
    'institution':institution
    }
    return render(request,template,context)
def actualites_modif(request,id):
    context = basis(request)
    template = 'webpages/ctn_bpf/update_actualite.html'
    actualite = Actualite.objects.get(id=int(id))
    rubrique = Rubrique.objects.all()
    sous_rubrique = Sous_Rubrique.objects.all()
    actual_institution = context['actual_institution']
    context={
        'actualite':actualite,
        'rubrique': rubrique,
        'sous_rubrique':sous_rubrique,
        'actual_institution':actual_institution
        
    }
    

    
    return render(request,template,context)

def edition_actualite(request, id):  
    if request.method == 'POST':  
        try:  
            intitule = request.POST['intitule']  
            description = request.POST['contenu']  
            sous_rubrique = request.POST['sous_rubrique']  
            rubrique = request.POST['rubrique']  
            prix = request.POST['prix']
            
            # Fetching the Actualite object  
            actualite = Actualite.objects.get(id=int(id))  
            instance_sous_rubrique = Sous_Rubrique.objects.get(id=int(sous_rubrique))  
            instance_rubrique = Rubrique.objects.get(id=int(rubrique))  
            
            # Update the actualite fields  
            actualite.intitule = intitule  
            actualite.description = description  
            actualite.sous_rubrique = instance_sous_rubrique  # Correct assignment  
            actualite.rubrique = instance_rubrique  # Correct assignment  
            actualite.prix=prix

            # Check if photos are included in the request and update only if present  
            if 'photo' in request.FILES:  
                actualite.photos = request.FILES['photo']  

            # Save the changes  
            actualite.save()  

            messages.success(request, 'Édition réussie')  
            return redirect('/dashboard/e-commerce/')  
            
        except Actualite.DoesNotExist:  
            messages.error(request, "L'article demandée n'existe pas.")  
        except Sous_Rubrique.DoesNotExist:  
            messages.error(request, "La sous-Categorie spécifiée n'existe pas.")  
        except Rubrique.DoesNotExist:  
            messages.error(request, "La Categorie spécifiée n'existe pas.")  
        except Exception as error:  
            messages.error(request, f'Erreur survenue : {error}')  
           
    return redirect('/dashboard/e-commerce/')  


def view_actualitys(request,id,id2):
    template = 'webpages/ctn_bpf/actualite_institution.html'
    actualite = Actualite.objects.get(id=int(id))
    institution = Institution.objects.get(id=int(id2))
    all_actuality = Actualite.objects.filter(institution_id = institution.id)
    sous_actualite = SousActualite.objects.filter(institution_id = institution.id,actualite=actualite)
    context = {
        'all_actuality':all_actuality,
        'sous_actualite': sous_actualite,
        'institution':institution,
        'actualite':actualite

    }
    return render(request,template,context)


from django.http import Http404
def articles_institution(request, id, id2):
    context = basis(request)  # Assurez-vous que basis() est bien défini ailleurs
    
    try:
        institution = Institution.objects.get(id=int(id))
        actualite = Actualite.objects.get(id=int(id2))
        all_actuality = SousActualite.objects.filter(institution_id = institution.id,actualite=actualite)
        
        context.update({
            'all_actuality': all_actuality,
            'actualite': actualite,  # Je suppose que vous voulez aussi afficher cet élément
            'institution': institution,  # Ajouté pour pouvoir l'utiliser dans le template
        })
        
        template = 'webpages/ctn_bpf/articles.html'
        return render(request, template, context)
        
    except Institution.DoesNotExist:
        raise Http404("L'institution demandée n'existe pas")
    except Actualite.DoesNotExist:
        raise Http404("L'actualité demandée n'existe pas")




def initial_command(request,id):
    template = 'webpages/ctn_bpf/commande.html'

    actualite = Actualite.objects.get(id=int(id))
    baniere = Baniere.objects.all()

    context ={
    'actualite':actualite,
    'baniere':baniere
    }
    return render(request,template,context)
def article_detail(request, id):  
    # Récupérer l'article à partir de la base de données  
    article = Actualite.objects.get(id=id)  

    # Vérifier si l'article a une image  
    if article.photos:  
        image_url = request.build_absolute_uri(article.photos.url)  # URL de l'image  
    else:  
        image_url = ''  # Ou une image par défaut si vous en avez une  

    # Créer le texte de partage  
    share_text = f"Check out this article: {article.intitule} - {article.description}"  
    
    # Ajouter l'URL de l'image au texte de partage si besoin  
    if image_url:  
        share_text += f" {image_url}"  

    # Créer l'URL pour partager sur WhatsApp  
    whatsapp_url = f"https://api.whatsapp.com/send?text={share_text}"  

    context = {  
        'article': article,  
        'whatsapp_url': whatsapp_url,  
    }  
    return render(request, 'webpages/ctn_bpf/article_detail.html', context)  

from django.core import serializers

@login_required(login_url='/register/')
def dashboard_ecommerce(request):  
    template = 'webpages/ctn_bpf/dashboard.html'  
    
    # Fetch all Rubrique and Sous_Rubrique instances  
    rubrique = Rubrique.objects.all()  
    sousrubrique = Sous_Rubrique.objects.all()  
    
    context = basis(request)  
    actual_institution = context['actual_institution']  
    
    # Retrieve actualites for the current institution  
    actualite = Actualite.objects.filter(institution_id=actual_institution)  
    institution1 = list()
    for i in Institution.objects.filter(owner__m_user__id=request.user.id):
        if i not in institution1:
            institution1.append(i)
    count_institution = Institution.objects.filter(owner__m_user__id=request.user.id).count()

    count_article = Actualite.objects.filter(institution=actual_institution).count()

    institution = Institution.objects.filter(parent__isnull=True).exclude( owner__m_user__id =request.user.id)

    #alls_boutique = Institution.objects.filter(parent__isnull=False)

   

    # data = serializers.serializer('json',institution_partenaire)

    # return JsonResponse({'Les Boutiques partenaires':data},safe=False)


    valeur_institution = Institution.objects.filter(parent_id=actual_institution.id)

    # Convert to list of dictionaries for JsonResponse
    institutions_data = list(valeur_institution.values())

    institution_partenaire = Institution.objects.prefetch_related('partenaires').all()

    # return JsonResponse({
    #     'Les Institutions Partenaires': institutions_data
    # })






    baniere = Baniere.objects.all()
    groupe = Groupe_institution.objects.all() 

    # Update context with data  
    context.update({  
        'actualite': actualite,  
        'rubrique': rubrique,  
        'sousrubrique': sousrubrique,  
        'actual_institution': actual_institution,  
        'institution1': institution1,  
        'baniere':baniere,
        'groupe':groupe,
        'count_institution':count_institution,
        'count_article':count_article,
        'institution':institution,
        'institutions_data':institutions_data,
        'institution_partenaire':institution_partenaire
    })  

    return render(request, template, context)  

def register(request):
    template = 'webpages/ctn_bpf/register.html'

  

    return render(request,template)

def login_ecommerce(request):
    template= 'webpages/ctn_bpf/login_ecommerce.html'
    return render(request,template)
from django.core.mail import EmailMessage  
from django.template.loader import render_to_string  
from django.http import HttpResponse  
  
import requests

from django.contrib import messages
from django.shortcuts import redirect

import string
from django.db import transaction
from django.core.exceptions import ValidationError
import logging

logger = logging.getLogger(__name__)

from django.contrib import messages
from django.core.exceptions import ValidationError
from django.db import transaction
from django.shortcuts import redirect
import logging

logger = logging.getLogger(__name__)

def add_personnel(request):
    # Vérification de la méthode HTTP
    if request.method != 'POST':
        messages.error(request, "Méthode non autorisée")
        return redirect(request.META.get('HTTP_REFERER', '/'))

    try:
        # Définition des champs obligatoires
        required_fields = ['mail', 'nom', 'prenom', 'tel']
        field_values = {field: request.POST.get(field, '').strip() for field in required_fields}

        # Validation des champs obligatoires
        if not all(field_values.values()):
            raise ValidationError("Tous les champs obligatoires doivent être remplis.")

        # Récupération des valeurs
        r_mail = field_values['mail']
        r_nom = field_values['nom']
        r_prenom = field_values['prenom']
        r_tel = field_values['tel']
        r_sexe = request.POST.get('sexe')
        password = request.POST.get('password')
        confirm_password = request.POST.get('confirm_password')
        account_type = request.POST.get('account_type',None)

        # Validation du mot de passe
        
        if password != confirm_password:
            messages.error(request, "Les mots de passe ne correspondent pas.")
            return redirect(request.META.get('HTTP_REFERER', '/'))

        if len(password) < 8:
            messages.error(request, "Le mot de passe doit contenir au moins 8 caractères.")
            return redirect(request.META.get('HTTP_REFERER', '/'))
        
        with transaction.atomic():
            # Vérification de l'existence de l'utilisateur
            existing_user = User.objects.filter(email=r_mail).first()

            if existing_user:
                # Mise à jour du personnel existant
                personnel, created = Personnel.objects.update_or_create(
                    bd_user=existing_user,
                    defaults={
                        'nom': r_nom,
                        'prenom': r_prenom,
                        'mail': r_mail,
                        'tel': r_tel,
                        'sexe': r_sexe
                    }
                )
                request.session['user'] = existing_user.id
                messages.info(request, "Votre compte existant a été mis à jour avec succès. Créez simplement votre boutique en remplissant les informations. Veuillez vérifier votre email pour revoir votre mot de passe.")
                # messages.info(request, "Compte existant mis à jour avec succès. Creez Tout Simplement Votre Boutique En Remplissant Les Informations")
            else:
                # Création d'un nouvel utilisateur
                new_user = User.objects.create_user(
                    username=r_mail,
                    email=r_mail,
                    password=password
                )
                request.session['user'] = new_user.id
                
                # Création du personnel
                personnel = Personnel(
                    bd_user=new_user,
                    nom=r_nom,
                    prenom=r_prenom,
                    mail=r_mail,
                    tel=r_tel,
                    sexe=r_sexe
                )
                
                # Gestion de la photo si elle existe
                if 'photo' in request.FILES:
                    personnel.photo = request.FILES['photo']
                
                personnel.save()
               

                # Envoi des informations de connexion
                try:
                    send_password_via_sms(r_tel, password)
                    send_password_via_email(r_mail, password)
                    messages.success(request, "Identifiants envoyés par email et SMS.")
                except Exception as e:
                    logger.error(f"Erreur lors de l'envoi des identifiants: {str(e)}")
                    messages.warning(request, "Compte créé mais échec d'envoi des identifiants.")

            # Stockage de l'ID du personnel en session
            request.session['personnel_id'] = personnel.id
            messages.success(request, f"Votre compte a été activé avec succès. Veuillez  vous connecter en utilisant le mot de passe : {password}. Pour Finaliser La Creation De Votre Boutique Et Y Ajouter Vos articles.")
            #messages.success(request, f"Votre compte a été activé avec succès. Ensuite, créez votre boutique et connectez-vous à laide de ce mot de passe : {password} pour y insérer vos articles.")
    except ValidationError as e:
        messages.error(request, str(e))
    except Exception as e:
        messages.error(request, "Une erreur est survenue lors de la création du compte.")
        logger.exception("Erreur lors de l'ajout de personnel")
    
    return redirect('/log_account/')
    #return redirect('/boutique/')

from urllib.request import urlopen
import urllib.parse
def send_password_via_sms(r_tel, password):
    """Envoi du mot de passe par SMS"""
    try:
        # Vérifier que les paramètres de configuration sont présents
        # if not hasattr(settings, 'SMS_API_KEY') or not hasattr(settings, 'SMS_SENDER'):
        #     logger.error("Configuration SMS manquante dans settings.py")
        #     return False

        # Remplacez ces variables par vos valeurs réelles ou par des paramètres passés à la fonction
        api_key = "f2e5fp29z04ihgcc59lnct3eo5bwy1g9"  # à définir ou récupérer dynamiquement
        sender = "MBOAMARKET"  # à définir ou récupérer dynamiquement

        message = (
            "Votre compte MBOAMARKET a été créé. "
            f"Identifiant: {r_tel}\n"
            f"Mot de passe temporaire: {password}\n"
            "Veuillez changer ce mot de passe après connexion."
        )

        # Encoder le message
        message_encoded = urllib.parse.quote(message)

        # Construire l'URL avec paramètres
        url = (
            "https://obitsms.com/api/v2/bulksms"
            "?"
            f"key_api={api_key}"
            "&sender={sender}"
            "&destination=+237{r_tel}"
            "&message={message_encoded}"
        )

        response = requests.get(url, timeout=10)
        response.raise_for_status()

        # Optionnel : analyser la réponse pour confirmer l'envoi
        # Par exemple, si la réponse est JSON, vous pouvez faire:
        # data = response.json()
        # if data.get('status') == 'success':
        #     return True

        return True
    except Exception as e:
        logger.exception(f"Échec envoi SMS à {r_tel}")
        return False
def send_password_via_email(r_mail, password):
    """Envoi du mot de passe par email"""
    try:
        # if not hasattr(settings, 'DEFAULT_FROM_EMAIL'):
        #     logger.error("Configuration email manquante dans settings.py")
        #     return False

        subject = "Vos identifiants MBOAMARKET"
        message = (
            f"Bonjour,\n\n"
            f"Votre compte a été créé avec succès.\n\n"
            f"Identifiant: {r_mail}\n"
            f"Mot de passe temporaire: {password}\n\n"
            "Veuillez changer ce mot de passe après votre première connexion.\n\n"
            "Cordialement,\n"
            "L'équipe MBOAMARKET"
        )

        send_mail(
            subject=subject,
            message=message,
            from_email=r_mail,
            recipient_list=[r_mail],
            fail_silently=False,
        )
        return True
    except Exception as e:
        logger.exception(f"Échec envoi email à {r_mail}")
        return False

def boutique(request):
    
    template ='webpages/ctn_bpf/boutique.html'
    baniere = Baniere.objects.all()
    groupe = Groupe_institution.objects.all()
    context = {
    'baniere':baniere,
    'groupe':groupe
    }
    return render(request,template,context)
def save_institute(request):
 

    # Récupération des données du formulaire
    lien = request.POST.get('lien', None)
    groupe = request.POST.get('groupe', '')
    nom = request.POST.get("nom", None)
    numero_telephone = request.POST.get('numero_telephone', None)
    description = request.POST.get('description', None)
    baniere = request.POST.get('baniere', None)
    
    nom_boutique = request.POST.get('nom_boutique', None)
    file_boutique = request.FILES.get('file_boutique', None)
    bc = request.POST.get('bc', None)

    ville = request.POST.get('ville',None)

    sigle = request.POST.get('sigle',None)

    # Vérifications obligatoires
    if file_boutique is None:
        messages.error(request, "Veuillez attacher une image pour votre boutique")
        return redirect(request.META.get('HTTP_REFERER','/'))

    if not nom or not baniere:
        messages.error(request, "Le nom et la bannière sont obligatoires")
        return redirect(request.META.get('HTTP_REFERER','/'))

    # Création d'un owner spécifique à l'utilisateur
    try:
        # Récupérer ou créer l'owner pour cet utilisateur
        owner, created = Owner.objects.get_or_create(
            m_user=request.user,
            defaults={'m_code': f"OWNER_{request.user.id}"}
        )

        # Création de l'institution
        institution = Institution(
            nom=nom,
            img=file_boutique,
            link=lien,
            groupe_id=groupe,
            baniere_id=baniere,
            description=description,
            sigle=sigle,
            address=ville,
            owner=owner  # L'owner spécifique à cet utilisateur
        )
        institution.save()

        # Mise à jour de l'institution actuelle pour le personnel associé
        personnel = request.user.personnel  # Supposant une relation OneToOne
        personnel.actual_institution = institution
        personnel.save()

        messages.success(request, "Boutique créée avec succès!")
        if bc:
            return redirect("/dashboard/e-commerce/")
        return redirect("register")

    except Exception as e:
        messages.error(request, f"Erreur lors de la création: {str(e)}")
        return redirect(request.META.get('HTTP_REFERER','/'))
def settings(request):
    template = 'webpages/ctn_bpf/config.html'
    return render(request,template)

def groupe_boutique(request):
    template = 'webpages/ctn_bpf/groupe.html'
    groupe = Groupe_institution.objects.all()
    context = {
        'groupe':groupe
    }
    return render(request,template,context)

def villes(request):
    template = 'webpages/ctn_bpf/ville.html'
    baniere = Baniere.objects.all()
    context = {
        'baniere':baniere
    }
    return render(request,template,context)
def rubriques(request):
    template = 'webpages/ctn_bpf/rubrique.html'
    rubrique = Rubrique.objects.all()
    context = {
        'rubrique':rubrique
    }
    return render(request,template,context)

def all_market(request):
    template = 'webpages/ctn_bpf/all_market.html'
    institution = Institution.objects.all()
    context = {
        'institution':institution
    }
    return render(request,template,context)

def edit_groupe_institution(request,id):
    if request.method == 'POST':
        try:
            nom = request.POST.get('nom')
            icone = request.FILES.get('icone',None)
            description = request.POST.get('description',None)

            groupe = Groupe_institution.objects.get(id=int(id))

            if icone is None:
                icone = groupe.icone  # Conserver l'ancienne icône si aucune nouvelle n'est fournie



            groupe.nom = nom
            groupe.description = description
            groupe.icone = icone
            groupe.save()
            messages.success(request,'Edition Reussie')
        except Exception as e:
            messages.error(request,'erreur survenue')
    return redirect(request.META.get('HTTP_REFERER','/'))

def espace_vendeur(request):
        template = 'webpages/ctn_bpf/espace_vendeur.html'
        return render(request,template)
from django.contrib.auth.decorators import login_required
from django.core.exceptions import ObjectDoesNotExist
from django.db import transaction
from django.shortcuts import get_object_or_404

@login_required
def edition(request, id):
    template = 'webpages/ctn_bpf/edition_boutique.html'
    try:
        institution = get_object_or_404(Institution, id=int(id))
        groupe = Groupe_institution.objects.all()
        baniere = Baniere.objects.all()

        context = {
            'institution': institution,
            'groupe': groupe,
            'baniere': baniere
        }
        return render(request, template, context)
    except ValueError:
        messages.error(request, "ID invalide")
        return redirect('some_default_view')

@login_required
@transaction.atomic
def edit_boutique(request, id):
    if request.method != 'POST':
        messages.error(request, "Méthode non autorisée")
        return redirect('/dashboard/e-commerce/')

    try:
        with transaction.atomic():
            institution = get_object_or_404(Institution, id=int(id))
            
            # Required fields
            required_fields = ['address', 'groupe', 'baniere']
            for field in required_fields:
                if field not in request.POST or not request.POST[field].strip():
                    raise ValidationError(f"Le champ {field} est obligatoire")

            # Get form data with proper validation
            nom = request.POST.get('nom', '').strip() or institution.nom
            sigle = request.POST.get('sigle', '').strip() or institution.sigle
            description = request.POST.get('description', '').strip() or institution.description
            address = request.POST['address'].strip()
            country = request.POST.get('country', '').strip() or institution.country
            groupe_id = request.POST['groupe'].strip()
            email = request.POST.get('email', '').strip() or institution.email
            phone = request.POST.get('phone', '').strip() or institution.numero_whatsapp
            baniere_id = request.POST['baniere'].strip()

            # Get related instances
            groupe_instance = get_object_or_404(Groupe_institution, id=int(groupe_id))
            baniere_instance = get_object_or_404(Baniere, id=int(baniere_id))

          

            # Handle image upload
            if 'img' in request.FILES:
                img = request.FILES['img']
                # Consider deleting old image file if it exists
                if institution.img:
                    institution.img.delete(save=False)
                institution.img = img

            # Update fields
            institution.nom = nom
            institution.sigle = sigle
            institution.description = description
            institution.address = address
            institution.country = country
            institution.groupe = groupe_instance
            institution.email = email
            institution.numero_whatsapp = phone
            institution.baniere = baniere_instance
            
            institution.save()
            messages.success(request, 'Mise à jour de votre boutique réussie')

    except ValidationError as e:
        messages.error(request, str(e))
    except ValueError:
        messages.error(request, "ID invalide")
    except Exception as e:
        messages.error(request, f'Erreur lors de la mise à jour: {str(e)}')
        return redirect(request.META.get('HTTP_REFERER', '/'))
            
    return redirect('/dashboard/e-commerce/')



from django.db.models.deletion import ProtectedError

def delete_institution(request, id):
    context = basis(request)
    institution = get_object_or_404(Institution, id=int(id))
    actual_institution_id = context['actual_institution'].id

    # Verify if we're trying to delete the actual institution
    if int(id) == actual_institution_id:
        messages.error(request, "Vous ne pouvez pas supprimer cette Boutique actuellement sélectionnée")
        return redirect(request.META.get('HTTP_REFERER', '/'))

    # Check for related objects in multiple models
    related_models = [Actualite]  # Add other models here as needed
    has_related_objects = False

    for model in related_models:
        if model.objects.filter(institution=institution).exists():
            has_related_objects = True
            break

    if has_related_objects:
        messages.error(request, 'Cette boutique contient des articles associés et ne peut pas être supprimée')
    else:
        try:
            institution.delete()
            messages.success(request, 'Suppression réussie')
        except ProtectedError:
            messages.error(request, 'Impossible de supprimer car des éléments sont protégés')
        except Exception as e:
            messages.error(request, f'Erreur lors de la suppression: {str(e)}')

    return redirect(request.META.get('HTTP_REFERER', '/'))

def profil(request):
    template = 'webpages/ctn_bpf/profil.html'
    return render(request,template)


def Mdp_Dart(request):
    template = 'webpages/ctn_bpf/reinitialisation.html'
    return render(request,template)

from django.http import JsonResponse
from django.template.loader import render_to_string

from django.http import JsonResponse
from django.template.loader import render_to_string
from django.utils.html import strip_spaces_between_tags

def get_articles(request):
    rubrique_id = request.GET.get('rubrique_id', 'all').strip()
    
    try:
        # Récupération des rubriques avec articles
        rubriques = Rubrique.objects.prefetch_related(
            'actualite_set',
            'actualite_set__institution',
            'sous_rubrique_set'
        ).order_by('nom')
        
        # Filtrage si nécessaire
        if rubrique_id != 'all':
            rubriques = rubriques.filter(id=int(rubrique_id))
        
        sous_rubrique = Sous_Rubrique.objects.all()
        
        # Contexte pour le template
        context = {
            'rubrique': rubriques,
            'is_filtered': rubrique_id != 'all',
            'sous_rubrique':sous_rubrique
        }
        
        # Rendu du template
        html = render_to_string(
            'webpages/ctn_bpf/articles_grid.html', 
            context
        )
        
        # Nettoyage du HTML
        clean_html = strip_spaces_between_tags(
            html.replace('\n', '').strip()
        )
        
        return JsonResponse({
            'status': 'success',
            'html': clean_html,
            'count': sum(r.actualite_set.count() for r in rubriques)
        })
        
    except Exception as e:
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        }, status=400)

from django.db.models import Q

from django.http import JsonResponse
from django.db.models import Q
from .models import SousActualite

def search_suggestions(request):
    query = request.GET.get('q', '').strip()
    if len(query) < 2:
        return JsonResponse({'suggestions': []})
    
    articles = SousActualite.objects.filter(
        Q(intitule__icontains=query) | 
        Q(description__icontains=query),
        intitule__isnull=False  # Exclure les articles sans titre
    ).select_related('institution').distinct()[:5]
    
    suggestions = [{
        'id': article.id,
        'intitule': article.intitule,
        'description': article.description[:100] + '...' if article.description else '',
        'institution': article.institution.nom if article.institution else '',
        'prix': f"{article.prix:,} FCFA" if article.prix else 'Prix non spécifié',
        'photo': article.photos.url if article.photos else '/static/images/default-article.jpg'
    } for article in articles]
    
    return JsonResponse({'suggestions': suggestions})

from rest_framework import viewsets

class ArticlesViewSet(viewsets.ModelViewSet):
    serializer_class = ActualiteSerializer

    def get_queryset(request):
        return Actualite.objects.all()

def support(request):
    template = 'webpages/ctn_bpf/support.html'
    return render(request,template)



def add_partner(request):
    if request.method == 'POST':
        enfants = request.POST.getlist('enfant')  
        parent = request.POST.get('parent')

        if not parent:
            messages.error(request, "Aucun parent sélectionné")
            return redirect(request.META.get('HTTP_REFERER', '/dashboard/e-commerce/'))

        try:
            instance_parent = Institution.objects.get(id=int(parent))
            
            # Création du nouveau partenaire avec un nom unique
            new_institution = Institution.objects.create(
                parent=instance_parent,
                nom=f'partenaire_{instance_parent.nom}',
                sigle=f'partenaire_{instance_parent.sigle}'
            )

            # Filtrage et conversion des IDs
            enfant_ids = [int(eid) for eid in enfants if eid.isdigit()]
            if not enfant_ids:
                messages.warning(request, "Aucun partenaire valide sélectionné")
                return redirect(request.META.get('HTTP_REFERER', '/dashboard/e-commerce/'))

            # Ajout des partenaires
            enfant_instances = Institution.objects.filter(id__in=enfant_ids)
            count = enfant_instances.count()
            new_institution.partenaires.add(*enfant_instances)

            messages.success(request, f"{count} partenaire(s) ajouté(s) avec succès.")
            
        except Institution.DoesNotExist:
            messages.error(request, "Institution parente introuvable")
        except ValueError:
            messages.error(request, "ID invalide")
        except Exception as e:
            messages.error(request, f"Erreur inattendue: {str(e)}")

    return redirect(request.META.get('HTTP_REFERER', '/dashboard/e-commerce/'))

@require_GET
def select_rubrique(request):
    try:
        # Récupérer l'ID de la rubrique depuis les paramètres GET
        rubrique_id = request.GET.get('rubrique')
        
        if not rubrique_id:
            return JsonResponse({'error': 'Le paramètre rubrique est requis'}, status=400)
        
        # Filtrer les sous-rubriques
        sous_rubriques = Sous_Rubrique.objects.filter(rubrique=rubrique_id)
        
        # Préparer les données à renvoyer
        data = {
            'sous_rubriques': [
                {
                    'id': sr.id,
                    'nom': sr.nom,
                  
                } 
                for sr in sous_rubriques
            ]
        }
        
        return JsonResponse(data)
    
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def boutique_detail(request,slug):
    baniere = Baniere.objects.get(nom=str(slug))
    institution = Institution.objects.filter(baniere = baniere.id)
    baners = Baniere.objects.all()

    

    template = 'webpages/ctn_bpf/boutique_ville.html'
    context={
        'baniere':baniere,
        'institution':institution,
        'baners':baners

       
    }

    return render(request,template,context)